# App_clean.py
import streamlit as st
import numpy as np
import pandas as pd
import math
from collections import defaultdict

st.title("üß∂ –ú–∏–Ω–∏-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: –ø–µ—Ä–µ–¥+—Å–ø–∏–Ω–∫–∞ (—á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã)")

# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
# -----------------------------
if "table_front" not in st.session_state:
    st.session_state.table_front = []
if "table_back" not in st.session_state:
    st.session_state.table_back = []

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -----------------------------
def cm_to_st(cm, dens_st_10):
    """–ü–µ—Ç–ª–∏ –≤ 10 —Å–º ‚Üí –ø–µ—Ä–µ–≤–æ–¥ —Å–º ‚Üí –ø–µ—Ç–ª–∏ (—Ü–µ–ª—ã–µ)."""
    return int(round((cm / 10.0) * dens_st_10))

def cm_to_rows(cm, dens_row_10):
    """–†—è–¥—ã –≤ 10 —Å–º ‚Üí –ø–µ—Ä–µ–≤–æ–¥ —Å–º ‚Üí —Ä—è–¥—ã (—Ü–µ–ª—ã–µ)."""
    return int(round((cm / 10.0) * dens_row_10))

def even_cast_on(x):
    """–ù–∞–±–æ—Ä –≤—Å–µ–≥–¥–∞ —á—ë—Ç–Ω—ã–π: –µ—Å–ª–∏ –Ω–µ—á—ë—Ç ‚Äî –ø–ª—é—Å 1."""
    return x if x % 2 == 0 else x + 1

def clamp01(x):
    return max(0.0, min(1.0, x))

def split_int_sum(total, steps):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç total –ø–æ steps —Ü–µ–ª—ã–º–∏, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–æ–≤–Ω–æ."""
    if steps <= 0 or total <= 0:
        return [0] * max(steps, 0)
    base = total // steps
    rem  = total % steps
    out = [base] * steps
    for i in range(rem):
        out[i] += 1
    return out

# -----------------------------
# –†—è–¥—ã ¬´–ø—Ä—è–º–æ¬ª –∏ —à–∞–±–ª–æ–Ω—ã –≤—ã–≤–æ–¥–∞
# -----------------------------
def push_plain(table_rows, start, end, tag="‚Äî"):
    if start > end:
        return
    label = str(start) if start == end else f"{start}-{end}"
    table_rows.append((label, "–ü—Ä—è–º–æ", tag))

def section_tag_simple(row, neck_start_row, shoulder_start_row):
    tags = []
    if neck_start_row and row >= neck_start_row:
        tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if shoulder_start_row and row >= shoulder_start_row:
        tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return " + ".join(tags) if tags else "‚Äî"

# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (—á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ, –∫—Ä—É–≥–ª–∞—è)
# -----------------------------
def calc_neckline_partial(
    W,            # —à–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã, –ø–µ—Ç–ª–∏
    H,            # –≥–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã, —Ä—è–¥—ã
    row0,         # –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    rows_total,   # –≤—Å–µ–≥–æ —Ä—è–¥–æ–≤
    straight_pct=0.10  # –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≥–ª—É–±–∏–Ω—ã –±–µ–∑ —É–±–∞–≤–æ–∫ –ø–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–µ
):
    """
    –ü—Ä–∞–≤–∏–ª–∞:
    - –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã: –¢–û–õ–¨–ö–û —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–±–µ–∑ –ø–ª–µ—á);
    - –ø–æ—Å–ª–µ–¥–Ω–∏–µ straight_pct*H —Ä—è–¥–æ–≤ ‚Äî –ø—Ä—è–º–æ (–≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –±–µ–∑ —É–±–∞–≤–æ–∫);
    - —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ: —É–±–∞–≤–∫–∞ –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É, –Ω–æ —Å—Ç–æ—Ä–æ–Ω–∞ –ø–æ —á—ë—Ç–Ω–æ—Å—Ç–∏:
        –Ω–µ—á—ë—Ç–Ω—ã–π —Ä—è–¥ ‚Üí –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞ ‚Üí —É–±–∞–≤–∫–∞ —Å–ª–µ–≤–∞,
        —á—ë—Ç–Ω—ã–π —Ä—è–¥  ‚Üí –∫–∞—Ä–µ—Ç–∫–∞ —Å–ª–µ–≤–∞  ‚Üí —É–±–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∞.
    - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä: –º–µ–ª–∫–∞—è –≥–ª—É–±–∏–Ω–∞ ‚Üí –±–æ–ª—å—à–∏–π —Ü–µ–Ω—Ç—Ä, –≥–ª—É–±–æ–∫–∞—è ‚Üí –º–µ–Ω—å—à–∏–π.
    """
    actions = []
    if W <= 0 or H <= 0:
        return actions

    # 1) –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –¥–æ–ª—è)
    H_min, H_max = 10, 48
    f_max, f_min = 0.70, 0.52
    t = clamp01((H - H_min) / (H_max - H_min))
    f = f_max - (f_max - f_min) * t

    C = int(round(W * f))
    if C % 2 == 1:
        C += 1
    C = min(C, W if W % 2 == 0 else W - 1)
    C = max(2, C)
    R_total = W - C  # –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–µ (–Ω–∞ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)
    use_row0 = max(6, min(row0, rows_total - 2))

    # –¢–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    actions.append((use_row0, f"-{C} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Ü–µ–Ω—Ç—Ä, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))
    if R_total <= 0:
        return actions

    # 2) –í–µ—Ä—Ö–Ω–∏–µ –ø—Ä—è–º—ã–µ —Ä—è–¥—ã –ø–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–µ
    S = max(2, int(math.ceil(H * max(0.0, straight_pct))))
    N = H - S  # —Ä—è–¥—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    if N <= 0:
        return actions

    # 3) –†–∞—Å–∫–ª–∞–¥–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ ¬´–ø–æ–ª—É–∫–æ—Å–∏–Ω—É—Å—É¬ª (–º—è–≥–∫–∞—è ¬´–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å¬ª)
    per_side = R_total // 2
    weights = [(1 - math.cos(math.pi * (i / N))) / 2 for i in range(1, N + 1)]
    sum_w = sum(weights) if sum(weights) > 0 else 1.0
    raw = [per_side * w / sum_w for w in weights]
    v = [math.floor(x) for x in raw]
    need = per_side - sum(v)
    # –¥–æ–∫–∏–¥–∞–µ–º –∫–æ–ø–µ–π–∫–∏ –ø–æ –Ω–∞–∏–±–æ–ª—å—à–µ–π –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏
    order = sorted(range(N), key=lambda i: (raw[i] - v[i]), reverse=True)
    for i in order[:need]:
        v[i] += 1
    if sum(v) == 0:
        return actions

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤–µ—Ä—Ö–∞ –ø–æ 1 –ø–µ—Ç–ª–µ (2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —à–∞–≥–∞)
    for i in [N - 1, N - 2]:
        if 0 <= i < N and v[i] > 1:
            diff = v[i] - 1
            v[i] = 1
            k = 0
            while diff > 0 and k < i:
                v[k] += 1
                diff -= 1
                k += 1

    # –†—è–¥—ã –ø–æ–¥ —É–±–∞–≤–∫–∏: (row0+1) .. (row0+N)
    rows_window = list(range(use_row0 + 1, use_row0 + N + 1))

    # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –ø–æ —á—ë—Ç–Ω–æ—Å—Ç–∏: odd ‚Üí –ª–µ–≤—ã–π, even ‚Üí –ø—Ä–∞–≤—ã–π
    rows_left  = [r for r in rows_window if r % 2 == 1]  # –Ω–µ—á—ë—Ç–Ω—ã–µ
    rows_right = [r for r in rows_window if r % 2 == 0]  # —á—ë—Ç–Ω—ã–µ

    # –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –¥–æ–±–∏—Ä–∞–µ–º –∏–∑ –æ–∫–Ω–∞ (—Å–æ—Ö—Ä–∞–Ω—è—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ—Å—Ç—å)
    def pad_rows(target, want, pool):
        if len(target) >= want:
            return target[:want]
        need = want - len(target)
        extra = [r for r in pool if r not in target]
        extra.sort()
        target = (target + extra[:need])[:want]
        target.sort()
        return target

    rows_left  = pad_rows(rows_left,  N, rows_window)
    rows_right = pad_rows(rows_right, N, rows_window)

    # –°—Ç–∞–≤–∏–º —É–±–∞–≤–∫–∏ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ: –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø—Ä–æ—Ñ–∏–ª—å v[i]
    for i in range(N):
        if v[i] > 0:
            rl = rows_left[i]
            rr = rows_right[i]
            # –ª–µ–≤–∞—è
            actions.append((rl, f"-{v[i]} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–ª–µ–≤–æ, —á–∞—Å—Ç–∏—á–Ω–æ–µ)"))
            # –ø—Ä–∞–≤–∞—è
            actions.append((rr, f"-{v[i]} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–ø—Ä–∞–≤–æ, —á–∞—Å—Ç–∏—á–Ω–æ–µ)"))

    return actions

# -----------------------------
# –°–∫–æ—Å –ø–ª–µ—á–∞ (–ø–ª–∞–≤–Ω–æ, –≤ –∫–∞–∂–¥–æ–º 2-–º —Ä—è–¥—É)
# -----------------------------
def calc_shoulder_slope(per_shoulder_st, start_row, rows_slope, rows_total, side):
    """
    per_shoulder_st ‚Äî —à–∏—Ä–∏–Ω–∞ –ø–ª–µ—á–∞ –≤ –ø–µ—Ç–ª—è—Ö (–Ω–∞ –æ–¥–Ω–æ –ø–ª–µ—á–æ),
    side: 'L' –∏–ª–∏ 'R'
    –õ–æ–≥–∏–∫–∞:
      - —É–±–∞–≤–∫–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –∫—Ä–∞—é –ø–ª–µ—á–∞,
      - –≤ –∫–∞–∂–¥–æ–º –≤—Ç–æ—Ä–æ–º —Ä—è–¥—É,
      - –õ–ï–í–û–ï ‚Äî –Ω–µ—á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã, –ü–†–ê–í–û–ï ‚Äî —á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã,
      - –ù–ï –¥–µ–ª–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (–µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥—ë—Ç ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º).
    """
    actions = []
    if per_shoulder_st <= 0 or rows_slope <= 0:
        return actions

    # –†—è–¥—ã –¥–ª—è –ø–ª–µ—á–∞: –æ—Ç start_row –¥–æ rows_total-1, —à–∞–≥ 2, –Ω—É–∂–Ω–æ–π —á—ë—Ç–Ω–æ—Å—Ç–∏
    all_rows = list(range(start_row, rows_total))
    if side == "L":
        rows = [r for r in all_rows if r % 2 == 1]  # –Ω–µ—á—ë—Ç–Ω—ã–µ
        label = "—Å–∫–æ—Å –ø–ª–µ—á–∞ (–ª–µ–≤–æ–µ)"
    else:
        rows = [r for r in all_rows if r % 2 == 0]  # —á—ë—Ç–Ω—ã–µ
        label = "—Å–∫–æ—Å –ø–ª–µ—á–∞ (–ø—Ä–∞–≤–æ–µ)"

    if not rows:
        return actions

    # –ë–µ—Ä—ë–º —Ä–æ–≤–Ω–æ rows_slope –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä—è–¥–æ–≤ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
    rows = [r for r in rows if r >= start_row][:rows_slope]
    steps = len(rows)
    if steps <= 0:
        return actions

    parts = split_int_sum(per_shoulder_st, steps)  # –ø–ª–∞–≤–Ω–æ, –Ω–æ –ª–∏–Ω–µ–π–Ω–æ –ø–æ 1-2 –ø–µ—Ç–ª–∏
    # —Å–ª–µ–≥–∫–∞ ¬´–∫–æ–Ω—É—Å–æ–º¬ª: –ø–µ—Ä–≤—ã–µ —Å–Ω–∏–∑—É —à–∞–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ 1 –ø. –±–æ–ª—å—à–µ, —á–µ–º –≤–µ—Ä—Ö–Ω–∏–µ
    # (–Ω–æ split_int_sum —É–∂–µ –¥–∞—ë—Ç —Ä–æ–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ –¥–ª—è ¬´–ø–ª–∞–≤–Ω–æ–≥–æ¬ª –æ–∫)

    for r, v in zip(rows, parts):
        if v > 0:
            actions.append((r, f"-{v} –ø. {label}"))

    return actions

# -----------------------------
# –†–∞–∑–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã: –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã –±–µ–∑ –ø–ª–µ—á–∞
# -----------------------------
def merge_and_separate(actions, first_neck_row):
    """
    1) –í –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –≥–æ—Ä–ª–æ–≤–∏–Ω—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –≥–æ—Ä–ª–æ–≤–∏–Ω—É (—É–±–∏—Ä–∞–µ–º —Å–∫–æ—Å).
    2) –°—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É.
    """
    rows_map = defaultdict(list)
    for r, note in actions:
        rows_map[r].append(note)

    out = []
    for r in sorted(rows_map):
        notes = rows_map[r]
        if r == first_neck_row:
            neck_notes = [n for n in notes if "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n.lower()]
            if neck_notes:
                notes = neck_notes
        # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º
        seen = set()
        uniq = []
        for n in notes:
            if n not in seen:
                uniq.append(n); seen.add(n)
        out.append((r, "; ".join(uniq)))
    return out

# -----------------------------
# –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–ª–µ—á (–æ–¥–Ω–∞ –¥–µ—Ç–∞–ª—å)
# -----------------------------
def make_table_split(actions, rows_total, neck_start_row, rows_slope, key=None, title="–î–µ—Ç–∞–ª—å"):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º:
      1) –¥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è,
      2) –õ–ï–í–û–ï –ü–õ–ï–ß–û,
      3) –ü–†–ê–í–û–ï –ü–õ–ï–ß–û (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä—è–¥—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è),
    —Å—Ç—Ä–æ–∫–∏ ¬´–ü—Ä—è–º–æ¬ª —Å–æ–±–∏—Ä–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏.
    """
    # –°–±–æ—Ä
    m = defaultdict(list)
    for r, note in actions:
        if 1 <= r <= rows_total:
            m[r].append(note)
    if not m:
        df = pd.DataFrame([["1-" + str(rows_total), "–ü—Ä—è–º–æ", "‚Äî"]], columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
        st.dataframe(df, use_container_width=True, hide_index=True)
        if key: st.session_state[key] = df.values.tolist()
        return

    # —Ä—è–¥ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    split_row = None
    for r in sorted(m):
        if any("—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏" in n.lower() for n in m[r]):
            split_row = r
            break

    def tag(r):
        return section_tag_simple(r, neck_start_row, rows_total - rows_slope + 1)

    table_rows = []
    # –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–∏–Ω–µ–π–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å ¬´–ü—Ä—è–º–æ¬ª
    if split_row is None:
        prev = 1
        for r in sorted(m):
            if r > prev:
                push_plain(table_rows, prev, r - 1, tag(prev))
            table_rows.append((str(r), "; ".join(m[r]), tag(r)))
            prev = r + 1
        if prev <= rows_total:
            push_plain(table_rows, prev, rows_total, tag(prev))
        df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
        st.dataframe(df, use_container_width=True, hide_index=True)
        if key: st.session_state[key] = table_rows
        return

    # 1) –¥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    prev = 1
    for r in [x for x in sorted(m) if x < split_row]:
        if r > prev:
            push_plain(table_rows, prev, r - 1, tag(prev))
        table_rows.append((str(r), "; ".join(m[r]), tag(r)))
        prev = r + 1
    if prev <= split_row - 1:
        push_plain(table_rows, prev, split_row - 1, tag(prev))

    # —Å–∞–º split
    table_rows.append((str(split_row), "; ".join(m[split_row]), tag(split_row)))

    # 2) –ª–µ–≤–æ–µ –ø–ª–µ—á–æ
    table_rows.append(("‚Äî –õ–ï–í–û–ï –ü–õ–ï–ß–û ‚Äî", "", ""))
    prev = split_row + 1
    for r in [x for x in sorted(m) if x > split_row]:
        # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ª–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è + ¬´–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ¬ª –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è
        notes = []
        for n in m[r]:
            ln = n.lower()
            if "–ª–µ–≤–æ–µ" in ln or "(–ª–µ–≤–æ" in ln:
                notes.append(n)
            # –≥–æ—Ä–ª–æ–≤–∏–Ω—É –≤ —á–∞—Å—Ç–∏—á–Ω–æ–º —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (–∏–¥—ë—Ç –Ω–∞ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)
            if "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in ln:
                notes.append(n)
        if notes:
            if r > prev:
                push_plain(table_rows, prev, r - 1, tag(prev))
            table_rows.append((str(r), "; ".join(sorted(set(notes), key=str)), tag(r)))
            prev = r + 1
    if prev <= rows_total:
        push_plain(table_rows, prev, rows_total, tag(prev))

    # 3) –ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ
    table_rows.append((f"‚Äî –ü–†–ê–í–û–ï –ü–õ–ï–ß–û ‚Äî (–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ä—è–¥—É {split_row})", "", ""))
    prev = split_row
    for r in [split_row] + [x for x in sorted(m) if x > split_row]:
        notes = []
        for n in m[r]:
            ln = n.lower()
            if "–ø—Ä–∞–≤–æ–µ" in ln or "(–ø—Ä–∞–≤–æ" in ln:
                notes.append(n)
            if r == split_row and "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in ln and "—Ü–µ–Ω—Ç—Ä" in ln:
                notes.append(n)  # –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—Ç—Ä
            if "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in ln:
                notes.append(n)
        if notes:
            if r > prev:
                push_plain(table_rows, prev, r - 1, tag(prev))
            table_rows.append((str(r), "; ".join(sorted(set(notes), key=str)), tag(r)))
            prev = r + 1
    if prev <= rows_total:
        push_plain(table_rows, prev, rows_total, tag(prev))

    df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)
    if key: st.session_state[key] = table_rows

# -----------------------------
# –í–≤–æ–¥
# -----------------------------
st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–º, –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤ 10 —Å–º)")
dens_st_10  = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", min_value=1.0, value=21.0, step=0.5)
dens_row_10 = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  min_value=1.0, value=33.0, step=0.5)

hip_cm      = st.number_input("–®–∏—Ä–∏–Ω–∞ –Ω–∏–∑–∞ (—Å–º)", min_value=1.0, value=50.0, step=0.5)
shoulders_cm= st.number_input("–®–∏—Ä–∏–Ω–∞ –ø–ª–µ—á (–æ–±–∞ –ø–ª–µ—á–∞, —Å–º)", min_value=1.0, value=40.0, step=0.5)
length_cm   = st.number_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", min_value=1.0, value=60.0, step=0.5)

neck_w_cm   = st.number_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=1.0, value=18.0, step=0.5)
neck_h_front_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã –°–ü–ï–†–ï–î–ò (—Å–º)", min_value=1.0, value=12.0, step=0.5)
neck_h_back_cm  = st.number_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã –°–ü–ò–ù–ö–ò (—Å–º)", min_value=1.0, value=3.0, step=0.5)

shoulder_len_cm  = st.number_input("–î–ª–∏–Ω–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (–ø–æ –ø–µ—Ç–ª—è–º, —Å–º)", min_value=1.0, value=12.0, step=0.5)
shoulder_height_cm = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (—Ä—è–¥—ã, —Å–º)", min_value=1.0, value=12.0, step=0.5)

straight_pct = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä—è–º—ã—Ö —Ä—è–¥–æ–≤ –ø–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–µ (–≤–µ—Ä—Ö)", 0, 40, 10)  # 10% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    # –ü–µ—Ä–µ—Å—á—ë—Ç –≤ –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
    st_hip       = even_cast_on(cm_to_st(hip_cm, dens_st_10))
    st_shoulders = cm_to_st(shoulders_cm, dens_st_10)          # –æ–±—â–∞—è —à–∏—Ä–∏–Ω–∞ –î–í–£–• –ø–ª–µ—á
    st_neck      = cm_to_st(neck_w_cm, dens_st_10)
    rows_total   = cm_to_rows(length_cm, dens_row_10)

    rows_neck_front = cm_to_rows(neck_h_front_cm, dens_row_10)
    rows_neck_back  = cm_to_rows(neck_h_back_cm,  dens_row_10)

    st_shoulder_one = cm_to_st(shoulder_len_cm, dens_st_10)    # —à–∏—Ä–∏–Ω–∞ –û–î–ù–û–ì–û –ø–ª–µ—á–∞ –≤ –ø–µ—Ç–ª—è—Ö (–ø–æ —Å–∫–æ—Å—É)
    rows_slope      = cm_to_rows(shoulder_height_cm, dens_row_10)

    # –°—Ç–∞—Ä—Ç –≥–æ—Ä–ª–æ–≤–∏–Ω—ã –∏ —Å–∫–æ—Å–∞
    neck_start_front = rows_total - rows_neck_front + 1
    neck_start_back  = rows_total - rows_neck_back + 1
    shoulder_start   = rows_total - rows_slope + 1

    # 1) –ù–∏–∑ ‚Üí —à–∏—Ä–∏–Ω–∞ —É –≤–µ—Ä—Ö–∞. –ë–µ–∑ –ø—Ä–æ–π–º—ã.
    #   –¶–µ–ª–µ–≤–∞—è —à–∏—Ä–∏–Ω–∞ –≤–≤–µ—Ä—Ö—É –ø–æ–ª–æ—Ç–Ω–∞ = –ø–ª–µ—á–∏ + –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–æ–±–∞ –ø–ª–µ—á–∞ + —Ü–µ–Ω—Ç—Ä)
    st_top = st_shoulders + st_neck
    delta_bottom = st_top - st_hip

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã (—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ) –ø–æ —á—ë—Ç–Ω—ã–º —Ä—è–¥–∞–º,
    # –∏ –ù–ï –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ –≤ –ø–µ—Ä–≤—ã—Ö 5 —Ä—è–¥–∞—Ö (–∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª–∞).
    actions_base = []
    if delta_bottom != 0:
        start_change = max(6, 6)  # –æ—Ç 6-–≥–æ —Ä—è–¥–∞
        end_change = max(6, rows_total - rows_slope)  # –¥–æ –Ω–∞—á–∞–ª–∞ –ø–ª–µ—á
        even_rows = [r for r in range(start_change, end_change + 1) if r % 2 == 0]
        per_side = abs(delta_bottom) // 2
        steps = min(len(even_rows), per_side)
        if steps > 0:
            parts = split_int_sum(per_side, steps)
            idxs = np.linspace(0, len(even_rows) - 1, num=steps, dtype=int)
            chosen = [even_rows[i] for i in idxs]
            for r, v in zip(chosen, parts):
                if delta_bottom > 0:
                    actions_base.append((r, f"+{v} –ø. –±–æ–∫ (—Å–ª–µ–≤–∞)"))
                    actions_base.append((r, f"+{v} –ø. –±–æ–∫ (—Å–ø—Ä–∞–≤–∞)"))
                else:
                    actions_base.append((r, f"-{v} –ø. –±–æ–∫ (—Å–ª–µ–≤–∞)"))
                    actions_base.append((r, f"-{v} –ø. –±–æ–∫ (—Å–ø—Ä–∞–≤–∞)"))

    # 2) –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (–ø–µ—Ä–µ–¥)
    actions_front = actions_base.copy()
    actions_front += calc_neckline_partial(
        W=st_neck,
        H=rows_neck_front,
        row0=neck_start_front,
        rows_total=rows_total,
        straight_pct=straight_pct / 100.0
    )
    # 3) –°–∫–æ—Å –ø–ª–µ—á (–ø–µ—Ä–µ–¥): –ª–µ–≤–æ–µ/–ø—Ä–∞–≤–æ–µ —Ä–∞–∑–¥–µ–ª—å–Ω–æ, –∫–∞–∂–¥—ã–π 2-–π —Ä—è–¥
    actions_front += calc_shoulder_slope(st_shoulder_one, shoulder_start, rows_slope, rows_total, side="L")
    actions_front += calc_shoulder_slope(st_shoulder_one, shoulder_start, rows_slope, rows_total, side="R")

    # –¢–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî –±–µ–∑ –ø–ª–µ—á–∞
    actions_front = merge_and_separate(actions_front, neck_start_front)
    make_table_split(actions_front, rows_total, neck_start_front, rows_slope, key="table_front", title="–ü–µ—Ä–µ–¥")

    # 4) –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–ø–∏–Ω–∫–∞)
    actions_back = actions_base.copy()
    actions_back += calc_neckline_partial(
        W=st_neck,
        H=rows_neck_back,
        row0=neck_start_back,
        rows_total=rows_total,
        straight_pct=straight_pct / 100.0
    )
    actions_back += calc_shoulder_slope(st_shoulder_one, shoulder_start, rows_slope, rows_total, side="L")
    actions_back += calc_shoulder_slope(st_shoulder_one, shoulder_start, rows_slope, rows_total, side="R")
    actions_back = merge_and_separate(actions_back, neck_start_back)
    make_table_split(actions_back, rows_total, neck_start_back, rows_slope, key="table_back", title="–°–ø–∏–Ω–∫–∞")

    # –°–≤–æ–¥–∫–∞
    st.subheader("üìä –°–≤–æ–¥–∫–∞")
    st.write(f"- –ù–∞–±–æ—Ä –ø–µ—Ç–µ–ª—å: **{st_hip}** (—á—ë—Ç–Ω—ã–π)")
    st.write(f"- –í–µ—Ä—Ö–Ω—è—è —à–∏—Ä–∏–Ω–∞ (–ø–ª–µ—á–∏+–≥–æ—Ä–ª–æ): **{st_top} –ø.**")
    st.write(f"- –í—Å–µ–≥–æ —Ä—è–¥–æ–≤: **{rows_total}**")
    st.write(f"- –°–∫–æ—Å –ø–ª–µ—á–∞: **{rows_slope} —Ä—è–¥–æ–≤**, –ø–æ **{st_shoulder_one} –ø.** –Ω–∞ –∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ")

    # PDF (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ)
    st.info("PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å –∫–æ–¥: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å st.session_state.table_front/back.")
