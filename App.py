import streamlit as st
import numpy as np
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –µ–¥–∏–Ω—ã–π –ø–ª–∞–Ω –ø–µ—Ä–µ–¥–∞")

# -----------------------------
# üßæ –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# -----------------------------
st.header("–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

density_stitches = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–ø–µ—Ç–ª–∏ –≤ 10 —Å–º)", min_value=1, value=23)
density_rows = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (—Ä—è–¥—ã –≤ 10 —Å–º)", min_value=1, value=40)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ä–∫–∏
chest = st.number_input("–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)", min_value=50, value=90)
hip = st.number_input("–û–±—Ö–≤–∞—Ç –Ω–∏–∑–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", min_value=50, value=80)
length = st.number_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", min_value=30, value=55)

# –ü—Ä–æ–π–º–∞
armhole_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", min_value=10, value=23)

# –í–µ—Ä—Ö–Ω—è—è —à–∏—Ä–∏–Ω–∞
shoulders_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è –ø–æ –ø–ª–µ—á–∞–º (—Å–º)", min_value=20, value=100)

# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞
neck_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=5, value=18)
neck_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=2, value=6)

# –ü–ª–µ—á–∏
shoulder_length_cm = st.number_input("–î–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ—á–∞ (—Å–º)", min_value=5, value=12)
shoulder_slope_cm = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (—Å–º)", min_value=1, value=4)

st.write("---")

# -----------------------------
# üîÑ –ü–µ—Ä–µ—Å—á—ë—Ç —Å–º ‚Üí –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
# -----------------------------
stitches_chest = int((chest / 10) * density_stitches)
stitches_hip = int((hip / 10) * density_stitches)
stitches_shoulders = int((shoulders_width_cm / 10) * density_stitches)

rows_total = int((length / 10) * density_rows)
rows_armhole = int((armhole_depth_cm / 10) * density_rows)

neck_stitches = int((neck_width_cm / 10) * density_stitches)
neck_rows = int((neck_depth_cm / 10) * density_rows)

stitches_shoulder = int((shoulder_length_cm / 10) * density_stitches)
rows_shoulder_slope = int((shoulder_slope_cm / 10) * density_rows)

# –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –ø–æ –ø—Ä–æ–π–º–µ
armhole_extra_stitches = stitches_shoulders - stitches_chest

# -----------------------------
# üìä –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–æ–≤
# -----------------------------
def distribute_increases(start_st, end_st, total_rows, label):
    diff = end_st - start_st
    if diff <= 0:
        return []
    step = total_rows / diff
    return [(round(i * step), f"+1 –ø. ({label})") for i in range(1, diff + 1)]

def calc_round_neckline(total_stitches, total_rows, start_row):
    percentages = [60, 20, 10, 5, 5]
    decreases = [round(total_stitches * p / 100) for p in percentages]
    plan = []
    current_row = 0
    for d in decreases:
        if d > 0:
            plan.append((start_row + current_row, f"-{d} –ø. (–≥–æ—Ä–ª–æ–≤–∏–Ω–∞)"))
        current_row += 2
    return plan

def slope_shoulder(stitches, rows, start_row):
    if stitches <= 0:
        return []
    step = stitches // 3
    parts = [step, step, stitches - 2*step]
    return [(start_row + i, f"–∑–∞–∫—Ä—ã—Ç—å {val} –ø. (–ø–ª–µ—á–æ)") for i, val in enumerate(parts, 1)]

# -----------------------------
# üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –ø–ª–∞–Ω–∞
# -----------------------------
actions = []

rows_to_armhole = rows_total - rows_armhole

# 1. –û—Ç –Ω–∏–∑–∞ –¥–æ –≥—Ä—É–¥–∏
actions += distribute_increases(stitches_hip, stitches_chest, rows_to_armhole, "–±–æ–∫–æ–≤—ã–µ –ø—Ä–∏–±–∞–≤–∫–∏")

# 2. –ü—Ä–æ–π–º–∞ (–æ–≤–µ—Ä—Å–∞–π–∑ ‚Üí –ø—Ä–∏–±–∞–≤–∫–∏)
actions += distribute_increases(stitches_chest, stitches_shoulders, rows_armhole, "–ø—Ä–æ–π–º–∞")

# 3. –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å—Ç–∞—Ä—Ç—É–µ—Ç —Å–≤–µ—Ä—Ö—É)
neck_start_row = rows_total - neck_rows
actions += calc_round_neckline(neck_stitches, neck_rows, neck_start_row)

# 4. –ü–ª–µ—á–∏ (—Ç–æ–∂–µ —Å–≤–µ—Ä—Ö—É)
shoulder_start_row = rows_total - rows_shoulder_slope
actions += slope_shoulder(stitches_shoulder, rows_shoulder_slope, shoulder_start_row)

# -----------------------------
# üóÇ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ —Ä—è–¥–∞–º
# -----------------------------
merged = defaultdict(list)
for row, action in actions:
    merged[row].append(action)

# -----------------------------
# üìã –í—ã–≤–æ–¥ –µ–¥–∏–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
# -----------------------------
st.header("–ï–¥–∏–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –ø–µ—Ä–µ–¥–∞")

for row in sorted(merged.keys()):
    st.write(f"‚û°Ô∏è –†—è–¥ {row}: " + ", ".join(merged[row]))

st.write("---")
st.success(f"–í—Å–µ–≥–æ —Ä—è–¥–æ–≤: {rows_total}. –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ —Å {neck_start_row}-–≥–æ —Ä—è–¥–∞, –ø–ª–µ—á–æ —Å–æ {shoulder_start_row}-–≥–æ —Ä—è–¥–∞.")
