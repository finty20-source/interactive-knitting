import streamlit as st
import numpy as np
import pandas as pd
from collections import defaultdict
import numpy as np
import pandas as pd
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á—ë—Ç –º–æ–¥–µ–ª–∏")

# -----------------------------
# –°–µ—Å—Å–∏—è
# -----------------------------
if "actions" not in st.session_state:
    st.session_state.actions = []
    st.session_state.actions_back = []
    st.session_state.st_hip = 0
    st.session_state.rows_total = 0
    st.session_state.rows_bottom = 0
    st.session_state.table_front = []
    st.session_state.table_back = []

# -----------------------------
# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
# -----------------------------
def cm_to_st(cm, dens_st):
    return int(round((cm/10.0)*dens_st))

def cm_to_rows(cm, dens_row):
    return int(round((cm/10.0)*dens_row))

# -----------------------------
# –†—è–¥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
# -----------------------------
def allowed_rows_any(start_row: int, end_row: int, rows_total: int, forbid_last_two=True):
    """–õ—é–±—ã–µ —Ä—è–¥—ã. –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ —Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ä—è–¥–∞."""
    if end_row is None:
        end_row = rows_total
    hi = end_row if not forbid_last_two else min(end_row, rows_total-2)
    lo = max(1, start_row)
    if lo > hi:
        return []
    return list(range(lo, hi+1))

def allowed_rows_parity(start_row: int, end_row: int, rows_total: int, want_even=True, forbid_last_two=True):
    rows = allowed_rows_any(start_row, end_row, rows_total, forbid_last_two=forbid_last_two)
    if want_even:
        return [r for r in rows if r % 2 == 0]
    else:
        return [r for r in rows if r % 2 == 1]

def split_total_into_steps(total: int, steps: int):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å total –Ω–∞ steps –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Å–ª–∞–≥–∞–µ–º—ã—Ö (>=1), –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–æ–≤–Ω–µ–µ."""
    if total <= 0 or steps <= 0:
        return []
    base = total // steps
    rem  = total % steps
    out = [base]*(steps)
    for i in range(rem):
        out[i] += 1
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å >=1
    out = [max(1, x) for x in out]
    return out

# -----------------------------
# –°–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ –ø—Ä–∏–±–∞–≤–∫–∏/—É–±–∞–≤–∫–∏ (–≤ –æ–¥–Ω–æ–º —Ä—è–¥—É)
# -----------------------------
def sym_increases(total_add, start_row, end_row, rows_total, label):
    """–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ: –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É."""
    if total_add <= 0: return []
    if total_add % 2 == 1: total_add += 1
    per_side = total_add // 2

    # –º–æ–∂–Ω–æ –≤ –ª—é–±—ã–µ —Ä—è–¥—ã (–¥–∞–ª—å—à–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∫–∞—Ä–µ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–µ–π fix_carriage_side)
    rows = allowed_rows_any(start_row, end_row, rows_total, forbid_last_two=True)
    if not rows: return []

    steps = min(len(rows), per_side)  # –ø–æ —à–∞–≥–∞–º (—Ä—è–¥–æ–≤) –Ω–µ –±–æ–ª—å—à–µ, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è
    # —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —à–∞–≥–∞–º
    parts = split_total_into_steps(per_side, steps)
    # —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Ä—è–¥–æ–≤
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]

    out = []
    for r, v in zip(chosen, parts):
        out.append((r, f"+{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"+{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

def sym_decreases(total_sub, start_row, end_row, rows_total, label):
    """–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ: –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É."""
    if total_sub <= 0: return []
    if total_sub % 2 == 1: total_sub += 1
    per_side = total_sub // 2

    rows = allowed_rows_any(start_row, end_row, rows_total, forbid_last_two=True)
    if not rows: return []

    steps = min(len(rows), per_side)
    parts = split_total_into_steps(per_side, steps)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]

    out = []
    for r, v in zip(chosen, parts):
        out.append((r, f"-{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"-{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

# -----------------------------
# –ü—Ä–æ–π–º–∞ (–∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è)
# -----------------------------
def calc_round_armhole(st_chest, st_shoulders, start_row, shoulder_start_row, rows_total,
                       depth_percent=0.05, hold_percent=0.10):
    """–£–±–∞–≤–∫–∏ –≤–Ω—É—Ç—Ä—å (—Å–ª–µ–≥–∫–∞), –∑–∞—Ç–µ–º –ø—Ä—è–º–æ, –∑–∞—Ç–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫ –ø–ª–µ—á–∞–º (–æ–≤–µ—Ä)."""
    if shoulder_start_row <= start_row:
        return []

    end_row = shoulder_start_row - 1
    total_rows = end_row - start_row + 1
    if total_rows <= 0:
        return []

    depth_armhole_st = int(round(st_chest * depth_percent))
    st_mid = st_chest - depth_armhole_st

    rows_smooth = int(total_rows * 0.4)
    rows_hold   = int(total_rows * hold_percent)

    actions = []
    # –≤–Ω—É—Ç—Ä—å
    delta1 = st_mid - st_chest
    if delta1 < 0:
        actions += sym_decreases(-delta1, start_row, start_row+rows_smooth, rows_total, "–ø—Ä–æ–π–º–∞")
    # –ø—Ä—è–º–æ
    # –Ω–∞—Ä—É–∂—É
    delta2 = st_shoulders - st_mid
    if delta2 > 0:
        actions += sym_increases(delta2, start_row+rows_smooth+rows_hold, end_row, rows_total, "–ø—Ä–æ–π–º–∞")

    return actions

# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞: 60% + –≤–µ—Ä—Ö–Ω–∏–µ 20% –ø—Ä—è–º–æ
# -----------------------------
def neckline_plan(total_stitches, total_rows, start_row, rows_total, straight_percent=0.20):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - split_row: —Ä—è–¥ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–∞!)
    - split_dec: –≤–µ–ª–∏—á–∏–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è (60%, —á—ë—Ç–Ω–æ–µ)
    - left_seq:  —Å–ø–∏—Å–æ–∫ (row, dec) –¥–ª—è –ª–µ–≤–æ–≥–æ –ø–ª–µ—á–∞ (–≥–æ—Ä–ª–æ–≤–∏–Ω–∞)
    - right_seq: —Å–ø–∏—Å–æ–∫ (row, dec) –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –ø–ª–µ—á–∞ (–≥–æ—Ä–ª–æ–≤–∏–Ω–∞)
    –ü—Ä–∞–≤–∏–ª–∞:
    - –≤–µ—Ä—Ö–Ω–∏–µ straight_percent –≥–ª—É–±–∏–Ω—ã –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî –±–µ–∑ —É–±–∞–≤–æ–∫ –ø–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–µ;
    - –ª–µ–≤–æ–µ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –Ω–∞ –ß–Å–¢–ù–´–•; –ø—Ä–∞–≤–æ–µ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –Ω–∞ –ù–ï–ß–Å–¢–ù–´–•.
    - –µ—Å–ª–∏ —Ä—è–¥–æ–≤ –º–∞–ª–æ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞ (–¥–æ 2,3...), —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è.
    """
    if total_stitches <= 0 or total_rows <= 0:
        return None, 0, [], []

    # 60% (—á—ë—Ç–Ω–æ)
    first_dec = int(round(total_stitches * 0.60))
    if first_dec % 2 == 1:
        first_dec += 1
    if first_dec > total_stitches:
        first_dec = total_stitches if total_stitches % 2 == 0 else total_stitches - 1
    rest = max(0, total_stitches - first_dec)

    # –≤–µ—Ä—Ö–Ω–∏–µ 20% –≥–ª—É–±–∏–Ω—ã ‚Äî –±–µ–∑ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    straight_rows = max(1, int(np.ceil(total_rows * max(0.20, straight_percent))))
    neck_end_by_depth = start_row + total_rows - 1 - straight_rows
    if neck_end_by_depth < start_row:
        neck_end_by_depth = start_row
    effective_end = min(neck_end_by_depth, rows_total-2)

    # split row ‚Äî –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä—è–¥ (–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
    split_row = max(1, min(start_row, rows_total-2))
    # –ø–æ—Å—Ç-—à–∞–≥–∏ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî –æ—Ç split_row+1 –¥–æ effective_end
    left_rows  = allowed_rows_parity(split_row+1, effective_end, rows_total, want_even=True,  forbid_last_two=True)  # —á—ë—Ç–Ω—ã–µ
    right_rows = allowed_rows_parity(split_row+1, effective_end, rows_total, want_even=False, forbid_last_two=True)  # –Ω–µ—á—ë—Ç–Ω—ã–µ

    # –¥–µ–ª–∏–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Ä–æ–≤–Ω—É –Ω–∞ –ø–ª–µ—á–∏
    left_need  = rest // 2
    right_need = rest - left_need

    def spread_need(need, rows):
        if need <= 0 or not rows:
            return []
        steps = min(len(rows), need)  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø–æ 1
        parts = split_total_into_steps(need, steps)
        idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
        chosen= [rows[i] for i in idxs]
        return list(zip(chosen, parts))

    left_seq  = spread_need(left_need,  left_rows)
    right_seq = spread_need(right_need, right_rows)

    # –µ—Å–ª–∏ —Ä—è–¥–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ –ø–æ 1 ‚Äî parts —É–∂–µ —Ä–∞–∑–¥—É—Ç—ã (>1) –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ–π–¥—ë—Ç—Å—è –ø–æ —Å—É–º–º–µ
    return split_row, first_dec, left_seq, right_seq

# -----------------------------
# –°–∫–æ—Å –ø–ª–µ—á–∞: –ª–µ–≤–æ–µ ‚Äî –Ω–µ—á—ë—Ç–Ω—ã–µ, –ø—Ä–∞–≤–æ–µ ‚Äî —á—ë—Ç–Ω—ã–µ
# -----------------------------
def shoulders_plan(st_shldr, shoulder_start_row, rows_total):
    """
    –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –£–ë–ê–í–ö–ò –ü–û –ü–õ–ï–ß–£:
    - –ª–µ–≤–æ–µ –ø–ª–µ—á–æ: —Ç–æ–ª—å–∫–æ –ù–ï–ß–Å–¢–ù–´–ï;
    - –ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ: —Ç–æ–ª—å–∫–æ –ß–Å–¢–ù–´–ï;
    —Å—É–º–º–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–ª–µ—á—É = st_shldr (—á—Ç–æ–±—ã —É–π—Ç–∏ –≤ 0 –∫ –∫–æ–Ω—Ü—É).
    """
    if st_shldr <= 0:
        return [], []

    left_rows  = allowed_rows_parity(shoulder_start_row, rows_total-1, rows_total, want_even=False, forbid_last_two=True)
    right_rows = allowed_rows_parity(shoulder_start_row, rows_total-1, rows_total, want_even=True,  forbid_last_two=True)

    def spread(total, rows):
        if total <= 0 or not rows:
            return []
        steps = min(len(rows), total)  # –º–∏–Ω–∏–º—É–º –ø–æ 1 –∑–∞ —à–∞–≥
        parts = split_total_into_steps(total, steps)
        idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
        chosen = [rows[i] for i in idxs]
        return list(zip(chosen, parts))

    left_seq  = spread(st_shldr, left_rows)
    right_seq = spread(st_shldr, right_rows)
    return left_seq, right_seq

# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–∏ (–µ–¥–∏–Ω—ã–π –ø–ª–∞–Ω, –±–µ–∑ –ø–ª–µ—á–∞ –≤ split_row)
# -----------------------------
def plan_front_or_back(neck_st, neck_rows, neck_start_row,
                       st_shldr, rows_slope, rows_total,
                       forbid_first_row_shoulder=True, straight_percent=0.20):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:
    - split_row —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º (—Ç–æ–ª—å–∫–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–∞);
    - –ª–µ–≤–æ–µ –ø–ª–µ—á–æ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞(—á—ë—Ç–Ω—ã–µ) + –ø–ª–µ—á–æ(–Ω–µ—á—ë—Ç–Ω—ã–µ);
    - –ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞(–Ω–µ—á—ë—Ç–Ω—ã–µ) + –ø–ª–µ—á–æ(—á—ë—Ç–Ω—ã–µ);
    - –ø–ª–µ—á–µ–≤—ã–µ —É–±–∞–≤–∫–∏ —Å—É–º–º–∞—Ä–Ω–æ = st_shldr, –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ ‚Äî –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç neck_st –ø–æ—Å–ª–µ 60%;
    """
    actions = []

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞
    split_row, split_dec, left_neck, right_neck = neckline_plan(
        neck_st, neck_rows, neck_start_row, rows_total, straight_percent
    )
    if split_row is None:
        return actions

    # 1) split row: –¢–û–õ–¨–ö–û –≥–æ—Ä–ª–æ–≤–∏–Ω–∞
    actions.append((split_row, f"-{split_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))

    # 2) –ü–ª–µ—á–æ ‚Äî —Ä—è–¥—ã –∏ –æ–±—ä—ë–º—ã
    shoulder_start_row = rows_total - rows_slope + 1
    left_sh, right_sh = shoulders_plan(st_shldr, shoulder_start_row, rows_total)

    # –ï—Å–ª–∏ –ø–ª–µ—á–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ split_row ‚Äî –≤—ã–∫–∏–¥—ã–≤–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥ (–ø—Ä–∞–≤–∏–ª–æ: –≤ split_row —Ç–æ–ª—å–∫–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–∞)
    if forbid_first_row_shoulder:
        left_sh  = [(r,v) for (r,v) in left_sh  if r != split_row]
        right_sh = [(r,v) for (r,v) in right_sh if r != split_row]

    # 3) –õ–µ–≤–æ–µ –ø–ª–µ—á–æ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—á—ë—Ç–Ω—ã–µ), –ø–ª–µ—á–æ (–Ω–µ—á—ë—Ç–Ω—ã–µ)
    for r, v in left_neck:
        actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ [L]"))
    for r, v in left_sh:
        actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ [L]"))

    # 4) –ü—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–Ω–µ—á—ë—Ç–Ω—ã–µ), –ø–ª–µ—á–æ (—á—ë—Ç–Ω—ã–µ)
    for r, v in right_neck:
        actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ [R]"))
    for r, v in right_sh:
        actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ [R]"))

    return actions

# -----------------------------
# –°–ª–∏—è–Ω–∏–µ –∏ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
# -----------------------------
def merge_actions(actions, rows_total):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ —Ä—è–¥–∞–º (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫), —É–±–∏—Ä–∞–µ–º –¥—É–±–ª—å-—Å—Ç—Ä–æ–∫–∏.
    –ï—Å–ª–∏ –≤ split_row –µ—Å—Ç—å –ø–ª–µ—á–æ ‚Äî –≤—ã–Ω–æ—Å–∏–º –µ–≥–æ –∏–∑ split_row (–ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞).
    """
    merged = defaultdict(list)
    for row, note in actions:
        if isinstance(row, int) and 1 <= row <= rows_total:
            merged[row].append(note)

    # –Ω–∞–π—Ç–∏ split_row
    split_row = None
    for r in sorted(merged.keys()):
        if any("—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏" in n.lower() or "—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" in n.lower() for n in merged[r]):
            split_row = r
            break

    final_map = defaultdict(list)
    used = set()

    for r in sorted(merged.keys()):
        # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
        seen = set()
        cleaned = []
        for n in merged[r]:
            if n not in seen:
                cleaned.append(n)
                seen.add(n)

        # –µ—Å–ª–∏ —ç—Ç–æ split_row ‚Äî —É–¥–∞–ª–∏–º –≤—Å—ë –ø–ª–µ—á–µ–≤–æ–µ
        if r == split_row:
            shoulder_notes = [n for n in cleaned if "—Å–∫–æ—Å –ø–ª–µ—á–∞" in n.lower()]
            non_shoulder   = [n for n in cleaned if n not in shoulder_notes]
            final_map[r].extend(non_shoulder)
            used.add(r)
            # –ø–ª–µ—á–∏ –ø–µ—Ä–µ–∫–∏–Ω–µ–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä—è–¥—ã (—Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –ø–∞—Ä–Ω–æ—Å—Ç—å; –Ω–æ
            # —É –Ω–∞—Å —É–∂–µ –ø–ª–µ—á–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –≤–Ω–µ split_row –≤ plan_front_or_back)
        else:
            final_map[r].extend(cleaned)
            used.add(r)

    # –≤–µ—Ä–Ω—É—Ç—å –ø–ª–æ—Å–∫–∏–º —Å–ø–∏—Å–∫–æ–º
    out = []
    for r in sorted(final_map.keys()):
        out.append((r, "; ".join(final_map[r])))
    return out

# -----------------------------
# –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏
# -----------------------------
def fix_carriage_side(actions, method=None):
    """
    –ù–µ—á—ë—Ç–Ω—ã–π —Ä—è–¥ ‚Äî –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞; —á—ë—Ç–Ω—ã–π ‚Äî —Å–ª–µ–≤–∞.
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ: —É–±–∞–≤–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏; –ß–∞—Å—Ç–∏—á–Ω—ã–µ: —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π.
    –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–π —Ä—è–¥, –µ—Å–ª–∏ –≤ –ø–æ–º–µ—Ç–µ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω ¬´—Å–ø—Ä–∞–≤–∞/—Å–ª–µ–≤–∞¬ª –∏ —ç—Ç–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.
    """
    if method is None:
        method = st.session_state.get("method", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)")
    use_std = method.startswith("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
    fixed = []

    for r, note in actions:
        note_lower = note.lower()
        if r % 2 == 1:  # –Ω–µ—á—ë—Ç ‚Äî –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞
            correct_side = "—Å–ø—Ä–∞–≤–∞" if use_std else "—Å–ª–µ–≤–∞"
        else:           # —á—ë—Ç ‚Äî –∫–∞—Ä–µ—Ç–∫–∞ —Å–ª–µ–≤–∞
            correct_side = "—Å–ª–µ–≤–∞" if use_std else "—Å–ø—Ä–∞–≤–∞"

        if (("—Å–ø—Ä–∞–≤–∞" in note_lower) or ("—Å–ª–µ–≤–∞" in note_lower)) and (correct_side not in note_lower):
            new_r = r - 1 if r > 1 else r + 1
            if new_r <= 0: new_r = 1
            fixed.append((new_r, note))
        else:
            fixed.append((r, note))
    return fixed

# -----------------------------
# –°–µ–≥–º–µ–Ω—Ç—ã/–ø–æ–¥–ø–∏—Å–∏
# -----------------------------
def segment_label(row, rows_to_armhole_end, neck_start_row, shoulder_start_row):
    tags = []
    if row <= rows_to_armhole_end:
        tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
    if rows_to_armhole_end < row < shoulder_start_row:
        tags.append("–ü—Ä–æ–π–º–∞")
    if neck_start_row and row >= neck_start_row:
        tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if shoulder_start_row and row >= shoulder_start_row:
        tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return " + ".join(tags) if tags else "‚Äî"

# -----------------------------
# –¢–∞–±–ª–∏—Ü–∞ ¬´–ø–µ—Ä–µ–¥¬ª —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
# -----------------------------
def make_table_front_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    # —Å–æ–±—Ä–∞—Ç—å
    merged = defaultdict(list)
    for row, note in actions:
        if isinstance(row, int) and 1 <= row <= rows_count:
            merged[row].append(note)

    if not merged:
        df = pd.DataFrame([["1-"+str(rows_count), "–ü—Ä—è–º–æ", segment_label(1, rows_to_armhole_end, neck_start_row, shoulder_start_row)]],
                          columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
        st.dataframe(df, use_container_width=True, hide_index=True)
        if key: st.session_state[key] = df.values.tolist()
        return

    # –Ω–∞–π—Ç–∏ split_row
    split_row = None
    for r in sorted(merged.keys()):
        if any("—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" in n.lower() for n in merged[r]):
            split_row = r
            break

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è ‚Äî –æ–±—ã—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if split_row is None:
        make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=key)
        return

    def push_plain(table, a, b):
        if a > b: return
        seg = segment_label(a, rows_to_armhole_end, neck_start_row, shoulder_start_row)
        table.append((str(a) if a==b else f"{a}-{b}", "–ü—Ä—è–º–æ", seg))

    def clean_notes(notes):
        cleaned = []
        for n in notes:
            cleaned.append(n.replace("[L]","").replace("[R]","").strip())
        return cleaned

    rows_sorted = sorted(merged.keys())
    table_rows = []

    # –î–æ split_row
    prev = 1
    for r in [x for x in rows_sorted if x < split_row]:
        if r > prev:
            push_plain(table_rows, prev, r-1)
        table_rows.append((str(r), "; ".join(clean_notes(merged[r])),
                           segment_label(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
        prev = r + 1
    if prev <= split_row - 1:
        push_plain(table_rows, prev, split_row-1)

    # split_row
    split_notes = [n for n in merged[split_row] if "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n.lower()]
    table_rows.append((str(split_row), "; ".join(clean_notes(split_notes)),
                       segment_label(split_row, rows_to_armhole_end, neck_start_row, shoulder_start_row)))

    # –ø–æ–¥–ø–∏—Å—å —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    # –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ = st_shldr + (neck_rest/2) (–ø–æ–∫–∞–∂–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–∑–∂–µ –≤ –±–ª–æ–∫–µ —Å–≤–æ–¥–∫–∏ ‚Äî –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    table_rows.append(("‚Äî –õ–ï–í–û–ï –ü–õ–ï–ß–û ‚Äî", "", ""))

    # –ª–µ–≤–æ–µ –ø–ª–µ—á–æ: –Ω–æ—Ç—ã —Å [L] + ¬´–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ¬ª (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ç–µ–∫—Å—Ç)
    left_prev = split_row + 1
    left_rows = []
    for r in [x for x in rows_sorted if x > split_row]:
        sel = []
        for n in merged[r]:
            ln = n.lower()
            if "[l]" in ln or "–ª–µ–≤–æ–µ –ø–ª–µ—á–æ" in ln:
                sel.append(n)
            # –≥–æ—Ä–ª–æ–≤–∏–Ω–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –ª–µ–≤–æ–≥–æ –ø–æ–º–µ—á–µ–Ω—ã [L], —É–∂–µ –ø–æ–ø–∞–¥–∞—é—Ç
        if sel:
            left_rows.append((r, sel))
    for r, notes in left_rows:
        if r > left_prev:
            push_plain(table_rows, left_prev, r-1)
        table_rows.append((str(r), "; ".join(clean_notes(notes)),
                           segment_label(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
        left_prev = r + 1
    if left_prev <= rows_count:
        push_plain(table_rows, left_prev, rows_count)

    # –ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ
    table_rows.append((f"‚Äî –ü–†–ê–í–û–ï –ü–õ–ï–ß–û ‚Äî (–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ä—è–¥—É {split_row})", "", ""))

    right_prev = split_row
    right_rows = []
    cand = [split_row] + [x for x in rows_sorted if x > split_row]
    for r in cand:
        sel = []
        for n in merged.get(r, []):
            ln = n.lower()
            if "[r]" in ln or "–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ" in ln:
                sel.append(n)
            # –≥–æ—Ä–ª–æ–≤–∏–Ω–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –ø–æ–º–µ—á–µ–Ω—ã [R]
        if r == split_row and any("—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" in n.lower() for n in merged[r]):
            sel.append("‚Ü≥ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∞–≤–æ–º—É –ø–ª–µ—á—É")
        if sel:
            right_rows.append((r, sel))
    for r, notes in right_rows:
        if r > right_prev:
            push_plain(table_rows, right_prev, r-1)
        table_rows.append((str(r), "; ".join(clean_notes(notes)),
                           segment_label(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
        right_prev = r + 1
    if right_prev <= rows_count:
        push_plain(table_rows, right_prev, rows_count)

    df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)
    if key: st.session_state[key] = table_rows

# -----------------------------
# –¢–∞–±–ª–∏—Ü–∞ ¬´—Å–ø–∏–Ω–∫–∞¬ª —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
# -----------------------------
def make_table_back_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
    make_table_front_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=key)

# -----------------------------
# –û–±—ã—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è)
# -----------------------------
def make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    merged = defaultdict(list)
    for row, note in actions:
        if isinstance(row, int) and 1 <= row <= rows_count:
            merged[row].append(note)
    rows_sorted = sorted(merged.keys())
    table_rows = []
    prev = 1
    if not rows_sorted:
        table_rows.append((f"1-{rows_count}", "–ü—Ä—è–º–æ",
                           segment_label(1, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
    else:
        for r in rows_sorted:
            if r > prev:
                seg = segment_label(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
                table_rows.append((str(prev) if prev==r-1 else f"{prev}-{r-1}", "–ü—Ä—è–º–æ", seg))
            table_rows.append((str(r), "; ".join(merged[r]),
                               segment_label(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
            prev = r + 1
        if prev <= rows_count:
            seg = segment_label(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
            table_rows.append((str(prev) if prev==rows_count else f"{prev}-{rows_count}", "–ü—Ä—è–º–æ", seg))
    df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)
    if key: st.session_state[key] = table_rows

# -----------------------------
# –í–≤–æ–¥
# -----------------------------
st.header("–ü–µ—Ä–µ–¥ / –°–ø–∏–Ω–∫–∞")

density_st_str   = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")
density_row_str  = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")

hip_cm_str       = st.text_input("–®–∏—Ä–∏–Ω–∞ –Ω–∏–∑–∞ –¥–µ—Ç–∞–ª–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
chest_cm_str     = st.text_input("–®–∏—Ä–∏–Ω–∞ –¥–µ—Ç–∞–ª–∏ –ø–æ –≥—Ä—É–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
length_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")

armhole_depth_cm_str   = st.text_input("–î–ª–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")

neck_width_cm_str      = st.text_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
neck_depth_cm_str      = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–µ—Ä–µ–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")
neck_depth_back_cm_str = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–∏–Ω–∫–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")

shoulder_len_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")
shoulder_slope_cm_str  = st.text_input("–°–∫–æ—Å –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É")

method = st.selectbox(
    "–ú–µ—Ç–æ–¥ —É–±–∞–≤–æ–∫",
    ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)", "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ (–ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ —Ä—è–¥—ã)"],
    index=0
)

def parse_inputs():
    return (
        float(density_st_str.replace(",", ".")),
        float(density_row_str.replace(",", ".")),
        float(hip_cm_str.replace(",", ".")),
        float(chest_cm_str.replace(",", ".")),
        float(length_cm_str.replace(",", ".")),
        float(armhole_depth_cm_str.replace(",", ".")),
        float(neck_width_cm_str.replace(",", ".")),
        float(neck_depth_cm_str.replace(",", ".")),
        float(neck_depth_back_cm_str.replace(",", ".")),
        float(shoulder_len_cm_str.replace(",", ".")),
        float(shoulder_slope_cm_str.replace(",", "."))
    )

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª
# -----------------------------
if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    fields = [density_st_str, density_row_str, hip_cm_str, chest_cm_str, length_cm_str,
              armhole_depth_cm_str, neck_width_cm_str, neck_depth_cm_str, neck_depth_back_cm_str,
              shoulder_len_cm_str, shoulder_slope_cm_str]
    if not all(fields):
        st.error("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è.")
        st.stop()
    try:
        (density_st, density_row, hip_cm, chest_cm, length_cm,
         armhole_depth_cm, neck_width_cm, neck_depth_cm, neck_depth_back_cm,
         shoulder_len_cm, shoulder_slope_cm) = parse_inputs()
    except:
        st.error("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞ (—Ç–æ—á–∫–∞/–∑–∞–ø—è—Ç–∞—è).")
        st.stop()

    # –ü–µ—Ä–µ—Å—á—ë—Ç
    st_hip     = cm_to_st(hip_cm, density_st)
    if st_hip % 2: st_hip += 1  # –ø—Ä–∞–≤–∏–ª–æ 1
    st_chest   = cm_to_st(chest_cm, density_st)

    rows_total = cm_to_rows(length_cm, density_row)
    rows_armh  = cm_to_rows(armhole_depth_cm, density_row)

    neck_st          = cm_to_st(neck_width_cm, density_st)
    neck_rows_front  = cm_to_rows(neck_depth_cm, density_row)
    neck_rows_back   = cm_to_rows(neck_depth_back_cm, density_row)

    st_shldr   = cm_to_st(shoulder_len_cm, density_st)  # —É–±–∞–≤–æ–∫ –ø–æ –ø–ª–µ—á—É –Ω–∞ –ö–ê–ñ–î–û–ú –ø–ª–µ—á–µ
    rows_slope = cm_to_rows(shoulder_slope_cm, density_row)

    st_shoulders = 2*st_shldr + neck_st
    rows_bottom  = rows_total - rows_armh - rows_slope
    armhole_start_row  = rows_bottom + 1
    shoulder_start_row = rows_total - rows_slope + 1
    armhole_end_row    = shoulder_start_row - 1

    neck_start_row_front = rows_total - neck_rows_front + 1
    neck_start_row_back  = rows_total - neck_rows_back + 1

    # –°–≤–æ–¥–∫–∞
    st.subheader("üìä –°–≤–æ–¥–∫–∞")
    st.write(f"- –ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å: **{st_hip}** (–ø—Ä–∏–≤–µ–¥–µ–Ω–æ –∫ —á—ë—Ç–Ω–æ–º—É)")
    st.write(f"- –í—Å–µ–≥–æ —Ä—è–¥–æ–≤: **{rows_total}**")

    # -------- –ü–ï–†–ï–î --------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞")
    actions = []

    # –ù–∏–∑: —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –æ—Ç –Ω–∏–∑–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–º—ã
    delta_bottom = st_chest - st_hip
    if delta_bottom > 0:
        actions += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")  # —Å 6 —Ä—è–¥–∞
    elif delta_bottom < 0:
        actions += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
    

    # –ü—Ä–æ–π–º–∞ (–¥–æ –ø–ª–µ—á)
    actions += calc_round_armhole(st_chest, st_shoulders, armhole_start_row, shoulder_start_row, rows_total)

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–∏ (–µ–¥–∏–Ω—ã–π –ø–ª–∞–Ω, –ù–ï–¢ –ø–ª–µ—á–∞ –≤ split_row)
    actions += plan_front_or_back(
        neck_st=neck_st,
        neck_rows=neck_rows_front,
        neck_start_row=neck_start_row_front,
        st_shldr=st_shldr,
        rows_slope=rows_slope,
        rows_total=rows_total,
        forbid_first_row_shoulder=True,
        straight_percent=0.20
    )

    # –°–ª–∏—è–Ω–∏–µ + —Å—Ç–æ—Ä–æ–Ω–∞ –∫–∞—Ä–µ—Ç–∫–∏
    actions = merge_actions(actions, rows_total)
    actions = fix_carriage_side(actions, method)

    # –¢–∞–±–ª–∏—Ü–∞ (—Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º)
    make_table_front_split(actions, rows_total, rows_bottom, neck_start_row_front, shoulder_start_row, key="table_front")

    # -------- –°–ü–ò–ù–ö–ê --------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏")
    actions_back = []
# -------- –ù–∏–∑ --------
    if delta_bottom > 0:
    actions_back += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
elif delta_bottom < 0:
    actions_back += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")

    # –ü—Ä–æ–π–º–∞
    delta_armh = st_shoulders - st_chest
    if delta_armh > 0:
        actions_back += sym_increases(delta_armh, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")
    elif delta_armh < 0:
        actions_back += sym_decreases(-delta_armh, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ —Å–ø–∏–Ω–∫–∏ + –ø–ª–µ—á–∏ (—Ç–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞)
    actions_back += plan_front_or_back(
        neck_st=neck_st,
        neck_rows=neck_rows_back,
        neck_start_row=neck_start_row_back,
        st_shldr=st_shldr,
        rows_slope=rows_slope,
        rows_total=rows_total,
        forbid_first_row_shoulder=True,
        straight_percent=0.20
    )

    actions_back = merge_actions(actions_back, rows_total)
    actions_back = fix_carriage_side(actions_back, method)
    make_table_back_split(actions_back, rows_total, rows_bottom, neck_start_row_back, shoulder_start_row, key="table_back")

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è PDF
    st.session_state.actions = actions
    st.session_state.actions_back = actions_back
    st.session_state.st_hip = st_hip
    st.session_state.rows_total = rows_total
    st.session_state.rows_bottom = rows_bottom

# -----------------------------
# PDF
# -----------------------------
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import io

pdfmetrics.registerFont(TTFont("DejaVuSans", "DejaVuSans.ttf"))

if st.session_state.actions and st.session_state.actions_back:
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()
    styles["Normal"].fontName = "DejaVuSans"
    styles["Heading1"].fontName = "DejaVuSans"
    styles["Heading2"].fontName = "DejaVuSans"

    elements.append(Paragraph("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", styles['Heading1']))
    elements.append(Spacer(1, 12))

    summary_data = [
        ["–ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å (—á—ë—Ç–Ω–æ)", str(st.session_state.st_hip)],
        ["–í—Å–µ–≥–æ —Ä—è–¥–æ–≤", str(st.session_state.rows_total)],
        ["–ù–∏–∑ (–¥–æ –ø—Ä–æ–π–º—ã)", str(st.session_state.rows_bottom)]
    ]
    tbl = Table(summary_data, hAlign="LEFT")
    tbl.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl)
    elements.append(Spacer(1, 12))

    elements.append(Paragraph("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞", styles['Heading2']))
    front = st.session_state.get("table_front", [["‚Äî","–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö","‚Äî"]])
    tbl_front = Table(front, hAlign="LEFT")
    tbl_front.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl_front)
    elements.append(Spacer(1, 12))

    elements.append(Paragraph("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏", styles['Heading2']))
    back = st.session_state.get("table_back", [["‚Äî","–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö","‚Äî"]])
    tbl_back = Table(back, hAlign="LEFT")
    tbl_back.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl_back)

    doc.build(elements)
    buffer.seek(0)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å PDF", buffer, file_name="vyazanie_instructions.pdf", mime="application/pdf")
else:
    st.info("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ¬´üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª.")


# -----------------------------
# –°–µ—Å—Å–∏—è
# -----------------------------
if "actions" not in st.session_state:
    st.session_state.actions = []
    st.session_state.actions_back = []
    st.session_state.st_hip = 0
    st.session_state.rows_total = 0
    st.session_state.rows_bottom = 0
    st.session_state.table_front = []
    st.session_state.table_back = []

# -----------------------------
# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
# -----------------------------
def cm_to_st(cm, dens_st):
    return int(round((cm/10.0)*dens_st))

def cm_to_rows(cm, dens_row):
    return int(round((cm/10.0)*dens_row))

# -----------------------------
# –†—è–¥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
# -----------------------------
def allowed_rows_any(start_row: int, end_row: int, rows_total: int, forbid_last_two=True):
    """–õ—é–±—ã–µ —Ä—è–¥—ã. –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ —Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ä—è–¥–∞."""
    if end_row is None:
        end_row = rows_total
    hi = end_row if not forbid_last_two else min(end_row, rows_total-2)
    lo = max(1, start_row)
    if lo > hi:
        return []
    return list(range(lo, hi+1))

def allowed_rows_parity(start_row: int, end_row: int, rows_total: int, want_even=True, forbid_last_two=True):
    rows = allowed_rows_any(start_row, end_row, rows_total, forbid_last_two=forbid_last_two)
    if want_even:
        return [r for r in rows if r % 2 == 0]
    else:
        return [r for r in rows if r % 2 == 1]

def split_total_into_steps(total: int, steps: int):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å total –Ω–∞ steps –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Å–ª–∞–≥–∞–µ–º—ã—Ö (>=1), –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–æ–≤–Ω–µ–µ."""
    if total <= 0 or steps <= 0:
        return []
    base = total // steps
    rem  = total % steps
    out = [base]*(steps)
    for i in range(rem):
        out[i] += 1
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å >=1
    out = [max(1, x) for x in out]
    return out

# -----------------------------
# –°–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ –ø—Ä–∏–±–∞–≤–∫–∏/—É–±–∞–≤–∫–∏ (–≤ –æ–¥–Ω–æ–º —Ä—è–¥—É)
# -----------------------------
def sym_increases(total_add, start_row, end_row, rows_total, label):
    """–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ: –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É."""
    if total_add <= 0: return []
    if total_add % 2 == 1: total_add += 1
    per_side = total_add // 2

    # –º–æ–∂–Ω–æ –≤ –ª—é–±—ã–µ —Ä—è–¥—ã (–¥–∞–ª—å—à–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∫–∞—Ä–µ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–µ–π fix_carriage_side)
    rows = allowed_rows_any(start_row, end_row, rows_total, forbid_last_two=True)
    if not rows: return []

    steps = min(len(rows), per_side)  # –ø–æ —à–∞–≥–∞–º (—Ä—è–¥–æ–≤) –Ω–µ –±–æ–ª—å—à–µ, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è
    # —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —à–∞–≥–∞–º
    parts = split_total_into_steps(per_side, steps)
    # —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Ä—è–¥–æ–≤
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]

    out = []
    for r, v in zip(chosen, parts):
        out.append((r, f"+{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"+{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

def sym_decreases(total_sub, start_row, end_row, rows_total, label):
    """–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ: –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É."""
    if total_sub <= 0: return []
    if total_sub % 2 == 1: total_sub += 1
    per_side = total_sub // 2

    rows = allowed_rows_any(start_row, end_row, rows_total, forbid_last_two=True)
    if not rows: return []

    steps = min(len(rows), per_side)
    parts = split_total_into_steps(per_side, steps)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]

    out = []
    for r, v in zip(chosen, parts):
        out.append((r, f"-{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"-{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

# -----------------------------
# –ü—Ä–æ–π–º–∞ (–∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è)
# -----------------------------
def calc_round_armhole(st_chest, st_shoulders, start_row, shoulder_start_row, rows_total,
                       depth_percent=0.05, hold_percent=0.10):
    """–£–±–∞–≤–∫–∏ –≤–Ω—É—Ç—Ä—å (—Å–ª–µ–≥–∫–∞), –∑–∞—Ç–µ–º –ø—Ä—è–º–æ, –∑–∞—Ç–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫ –ø–ª–µ—á–∞–º (–æ–≤–µ—Ä)."""
    if shoulder_start_row <= start_row:
        return []

    end_row = shoulder_start_row - 1
    total_rows = end_row - start_row + 1
    if total_rows <= 0:
        return []

    depth_armhole_st = int(round(st_chest * depth_percent))
    st_mid = st_chest - depth_armhole_st

    rows_smooth = int(total_rows * 0.4)
    rows_hold   = int(total_rows * hold_percent)

    actions = []
    # –≤–Ω—É—Ç—Ä—å
    delta1 = st_mid - st_chest
    if delta1 < 0:
        actions += sym_decreases(-delta1, start_row, start_row+rows_smooth, rows_total, "–ø—Ä–æ–π–º–∞")
    # –ø—Ä—è–º–æ
    # –Ω–∞—Ä—É–∂—É
    delta2 = st_shoulders - st_mid
    if delta2 > 0:
        actions += sym_increases(delta2, start_row+rows_smooth+rows_hold, end_row, rows_total, "–ø—Ä–æ–π–º–∞")

    return actions

# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞: 60% + –≤–µ—Ä—Ö–Ω–∏–µ 20% –ø—Ä—è–º–æ
# -----------------------------
def neckline_plan(total_stitches, total_rows, start_row, rows_total, straight_percent=0.20):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - split_row: —Ä—è–¥ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–∞!)
    - split_dec: –≤–µ–ª–∏—á–∏–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è (60%, —á—ë—Ç–Ω–æ–µ)
    - left_seq:  —Å–ø–∏—Å–æ–∫ (row, dec) –¥–ª—è –ª–µ–≤–æ–≥–æ –ø–ª–µ—á–∞ (–≥–æ—Ä–ª–æ–≤–∏–Ω–∞)
    - right_seq: —Å–ø–∏—Å–æ–∫ (row, dec) –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –ø–ª–µ—á–∞ (–≥–æ—Ä–ª–æ–≤–∏–Ω–∞)
    –ü—Ä–∞–≤–∏–ª–∞:
    - –≤–µ—Ä—Ö–Ω–∏–µ straight_percent –≥–ª—É–±–∏–Ω—ã –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî –±–µ–∑ —É–±–∞–≤–æ–∫ –ø–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–µ;
    - –ª–µ–≤–æ–µ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –Ω–∞ –ß–Å–¢–ù–´–•; –ø—Ä–∞–≤–æ–µ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –Ω–∞ –ù–ï–ß–Å–¢–ù–´–•.
    - –µ—Å–ª–∏ —Ä—è–¥–æ–≤ –º–∞–ª–æ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞ (–¥–æ 2,3...), —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è.
    """
    if total_stitches <= 0 or total_rows <= 0:
        return None, 0, [], []

    # 60% (—á—ë—Ç–Ω–æ)
    first_dec = int(round(total_stitches * 0.60))
    if first_dec % 2 == 1:
        first_dec += 1
    if first_dec > total_stitches:
        first_dec = total_stitches if total_stitches % 2 == 0 else total_stitches - 1
    rest = max(0, total_stitches - first_dec)

    # –≤–µ—Ä—Ö–Ω–∏–µ 20% –≥–ª—É–±–∏–Ω—ã ‚Äî –±–µ–∑ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    straight_rows = max(1, int(np.ceil(total_rows * max(0.20, straight_percent))))
    neck_end_by_depth = start_row + total_rows - 1 - straight_rows
    if neck_end_by_depth < start_row:
        neck_end_by_depth = start_row
    effective_end = min(neck_end_by_depth, rows_total-2)

    # split row ‚Äî –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä—è–¥ (–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
    split_row = max(1, min(start_row, rows_total-2))
    # –ø–æ—Å—Ç-—à–∞–≥–∏ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî –æ—Ç split_row+1 –¥–æ effective_end
    left_rows  = allowed_rows_parity(split_row+1, effective_end, rows_total, want_even=True,  forbid_last_two=True)  # —á—ë—Ç–Ω—ã–µ
    right_rows = allowed_rows_parity(split_row+1, effective_end, rows_total, want_even=False, forbid_last_two=True)  # –Ω–µ—á—ë—Ç–Ω—ã–µ

    # –¥–µ–ª–∏–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Ä–æ–≤–Ω—É –Ω–∞ –ø–ª–µ—á–∏
    left_need  = rest // 2
    right_need = rest - left_need

    def spread_need(need, rows):
        if need <= 0 or not rows:
            return []
        steps = min(len(rows), need)  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø–æ 1
        parts = split_total_into_steps(need, steps)
        idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
        chosen= [rows[i] for i in idxs]
        return list(zip(chosen, parts))

    left_seq  = spread_need(left_need,  left_rows)
    right_seq = spread_need(right_need, right_rows)

    # –µ—Å–ª–∏ —Ä—è–¥–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ –ø–æ 1 ‚Äî parts —É–∂–µ —Ä–∞–∑–¥—É—Ç—ã (>1) –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ–π–¥—ë—Ç—Å—è –ø–æ —Å—É–º–º–µ
    return split_row, first_dec, left_seq, right_seq

# -----------------------------
# –°–∫–æ—Å –ø–ª–µ—á–∞: –ª–µ–≤–æ–µ ‚Äî –Ω–µ—á—ë—Ç–Ω—ã–µ, –ø—Ä–∞–≤–æ–µ ‚Äî —á—ë—Ç–Ω—ã–µ
# -----------------------------
def shoulders_plan(st_shldr, shoulder_start_row, rows_total):
    """
    –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –£–ë–ê–í–ö–ò –ü–û –ü–õ–ï–ß–£:
    - –ª–µ–≤–æ–µ –ø–ª–µ—á–æ: —Ç–æ–ª—å–∫–æ –ù–ï–ß–Å–¢–ù–´–ï;
    - –ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ: —Ç–æ–ª—å–∫–æ –ß–Å–¢–ù–´–ï;
    —Å—É–º–º–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–ª–µ—á—É = st_shldr (—á—Ç–æ–±—ã —É–π—Ç–∏ –≤ 0 –∫ –∫–æ–Ω—Ü—É).
    """
    if st_shldr <= 0:
        return [], []

    left_rows  = allowed_rows_parity(shoulder_start_row, rows_total-1, rows_total, want_even=False, forbid_last_two=True)
    right_rows = allowed_rows_parity(shoulder_start_row, rows_total-1, rows_total, want_even=True,  forbid_last_two=True)

    def spread(total, rows):
        if total <= 0 or not rows:
            return []
        steps = min(len(rows), total)  # –º–∏–Ω–∏–º—É–º –ø–æ 1 –∑–∞ —à–∞–≥
        parts = split_total_into_steps(total, steps)
        idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
        chosen = [rows[i] for i in idxs]
        return list(zip(chosen, parts))

    left_seq  = spread(st_shldr, left_rows)
    right_seq = spread(st_shldr, right_rows)
    return left_seq, right_seq

# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–∏ (–µ–¥–∏–Ω—ã–π –ø–ª–∞–Ω, –±–µ–∑ –ø–ª–µ—á–∞ –≤ split_row)
# -----------------------------
def plan_front_or_back(neck_st, neck_rows, neck_start_row,
                       st_shldr, rows_slope, rows_total,
                       forbid_first_row_shoulder=True, straight_percent=0.20):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:
    - split_row —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º (—Ç–æ–ª—å–∫–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–∞);
    - –ª–µ–≤–æ–µ –ø–ª–µ—á–æ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞(—á—ë—Ç–Ω—ã–µ) + –ø–ª–µ—á–æ(–Ω–µ—á—ë—Ç–Ω—ã–µ);
    - –ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞(–Ω–µ—á—ë—Ç–Ω—ã–µ) + –ø–ª–µ—á–æ(—á—ë—Ç–Ω—ã–µ);
    - –ø–ª–µ—á–µ–≤—ã–µ —É–±–∞–≤–∫–∏ —Å—É–º–º–∞—Ä–Ω–æ = st_shldr, –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ ‚Äî –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç neck_st –ø–æ—Å–ª–µ 60%;
    """
    actions = []

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞
    split_row, split_dec, left_neck, right_neck = neckline_plan(
        neck_st, neck_rows, neck_start_row, rows_total, straight_percent
    )
    if split_row is None:
        return actions

    # 1) split row: –¢–û–õ–¨–ö–û –≥–æ—Ä–ª–æ–≤–∏–Ω–∞
    actions.append((split_row, f"-{split_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))

    # 2) –ü–ª–µ—á–æ ‚Äî —Ä—è–¥—ã –∏ –æ–±—ä—ë–º—ã
    shoulder_start_row = rows_total - rows_slope + 1
    left_sh, right_sh = shoulders_plan(st_shldr, shoulder_start_row, rows_total)  # –¥–æ rows_total-1

    # –ï—Å–ª–∏ –ø–ª–µ—á–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ split_row ‚Äî –≤—ã–∫–∏–¥—ã–≤–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥ (–ø—Ä–∞–≤–∏–ª–æ: –≤ split_row —Ç–æ–ª—å–∫–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–∞)
    if forbid_first_row_shoulder:
        left_sh  = [(r,v) for (r,v) in left_sh  if r != split_row]
        right_sh = [(r,v) for (r,v) in right_sh if r != split_row]

    # 3) –õ–µ–≤–æ–µ –ø–ª–µ—á–æ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—á—ë—Ç–Ω—ã–µ), –ø–ª–µ—á–æ (–Ω–µ—á—ë—Ç–Ω—ã–µ)
    for r, v in left_neck:
        actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ [L]"))
    for r, v in left_sh:
        actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ [L]"))

    # 4) –ü—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–Ω–µ—á—ë—Ç–Ω—ã–µ), –ø–ª–µ—á–æ (—á—ë—Ç–Ω—ã–µ)
    for r, v in right_neck:
        actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ [R]"))
    for r, v in right_sh:
        actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ [R]"))

    return actions

# -----------------------------
# –°–ª–∏—è–Ω–∏–µ –∏ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
# -----------------------------
def merge_actions(actions, rows_total):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ —Ä—è–¥–∞–º (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫), —É–±–∏—Ä–∞–µ–º –¥—É–±–ª—å-—Å—Ç—Ä–æ–∫–∏.
    –ï—Å–ª–∏ –≤ split_row –µ—Å—Ç—å –ø–ª–µ—á–æ ‚Äî –≤—ã–Ω–æ—Å–∏–º –µ–≥–æ –∏–∑ split_row (–ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞).
    """
    merged = defaultdict(list)
    for row, note in actions:
        if isinstance(row, int) and 1 <= row <= rows_total:
            merged[row].append(note)

    # –Ω–∞–π—Ç–∏ split_row
    split_row = None
    for r in sorted(merged.keys()):
        if any("—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏" in n.lower() or "—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" in n.lower() for n in merged[r]):
            split_row = r
            break

    final_map = defaultdict(list)
    used = set()

    for r in sorted(merged.keys()):
        # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
        seen = set()
        cleaned = []
        for n in merged[r]:
            if n not in seen:
                cleaned.append(n)
                seen.add(n)

        # –µ—Å–ª–∏ —ç—Ç–æ split_row ‚Äî —É–¥–∞–ª–∏–º –≤—Å—ë –ø–ª–µ—á–µ–≤–æ–µ
        if r == split_row:
            shoulder_notes = [n for n in cleaned if "—Å–∫–æ—Å –ø–ª–µ—á–∞" in n.lower()]
            non_shoulder   = [n for n in cleaned if n not in shoulder_notes]
            final_map[r].extend(non_shoulder)
            used.add(r)
            # –ø–ª–µ—á–∏ –ø–µ—Ä–µ–∫–∏–Ω–µ–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä—è–¥—ã (—Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –ø–∞—Ä–Ω–æ—Å—Ç—å; –Ω–æ
            # —É –Ω–∞—Å —É–∂–µ –ø–ª–µ—á–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –≤–Ω–µ split_row –≤ plan_front_or_back)
        else:
            final_map[r].extend(cleaned)
            used.add(r)

    # –≤–µ—Ä–Ω—É—Ç—å –ø–ª–æ—Å–∫–∏–º —Å–ø–∏—Å–∫–æ–º
    out = []
    for r in sorted(final_map.keys()):
        out.append((r, "; ".join(final_map[r])))
    return out

# -----------------------------
# –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏
# -----------------------------
def fix_carriage_side(actions, method=None):
    """
    –ù–µ—á—ë—Ç–Ω—ã–π —Ä—è–¥ ‚Äî –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞; —á—ë—Ç–Ω—ã–π ‚Äî —Å–ª–µ–≤–∞.
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ: —É–±–∞–≤–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏; –ß–∞—Å—Ç–∏—á–Ω—ã–µ: —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π.
    –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–π —Ä—è–¥, –µ—Å–ª–∏ –≤ –ø–æ–º–µ—Ç–µ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω ¬´—Å–ø—Ä–∞–≤–∞/—Å–ª–µ–≤–∞¬ª –∏ —ç—Ç–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.
    """
    if method is None:
        method = st.session_state.get("method", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)")
    use_std = method.startswith("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
    fixed = []

    for r, note in actions:
        note_lower = note.lower()
        if r % 2 == 1:  # –Ω–µ—á—ë—Ç ‚Äî –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞
            correct_side = "—Å–ø—Ä–∞–≤–∞" if use_std else "—Å–ª–µ–≤–∞"
        else:           # —á—ë—Ç ‚Äî –∫–∞—Ä–µ—Ç–∫–∞ —Å–ª–µ–≤–∞
            correct_side = "—Å–ª–µ–≤–∞" if use_std else "—Å–ø—Ä–∞–≤–∞"

        if (("—Å–ø—Ä–∞–≤–∞" in note_lower) or ("—Å–ª–µ–≤–∞" in note_lower)) and (correct_side not in note_lower):
            new_r = r - 1 if r > 1 else r + 1
            if new_r <= 0: new_r = 1
            fixed.append((new_r, note))
        else:
            fixed.append((r, note))
    return fixed

# -----------------------------
# –°–µ–≥–º–µ–Ω—Ç—ã/–ø–æ–¥–ø–∏—Å–∏
# -----------------------------
def segment_label(row, rows_to_armhole_end, neck_start_row, shoulder_start_row):
    tags = []
    if row <= rows_to_armhole_end:
        tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
    if rows_to_armhole_end < row < shoulder_start_row:
        tags.append("–ü—Ä–æ–π–º–∞")
    if neck_start_row and row >= neck_start_row:
        tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if shoulder_start_row and row >= shoulder_start_row:
        tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return " + ".join(tags) if tags else "‚Äî"

# -----------------------------
# –¢–∞–±–ª–∏—Ü–∞ ¬´–ø–µ—Ä–µ–¥¬ª —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
# -----------------------------
def make_table_front_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    # —Å–æ–±—Ä–∞—Ç—å
    merged = defaultdict(list)
    for row, note in actions:
        if isinstance(row, int) and 1 <= row <= rows_count:
            merged[row].append(note)

    if not merged:
        df = pd.DataFrame([["1-"+str(rows_count), "–ü—Ä—è–º–æ", segment_label(1, rows_to_armhole_end, neck_start_row, shoulder_start_row)]],
                          columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
        st.dataframe(df, use_container_width=True, hide_index=True)
        if key: st.session_state[key] = df.values.tolist()
        return

    # –Ω–∞–π—Ç–∏ split_row
    split_row = None
    for r in sorted(merged.keys()):
        if any("—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" in n.lower() for n in merged[r]):
            split_row = r
            break

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è ‚Äî –æ–±—ã—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if split_row is None:
        make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=key)
        return

    def push_plain(table, a, b):
        if a > b: return
        seg = segment_label(a, rows_to_armhole_end, neck_start_row, shoulder_start_row)
        table.append((str(a) if a==b else f"{a}-{b}", "–ü—Ä—è–º–æ", seg))

    def clean_notes(notes):
        cleaned = []
        for n in notes:
            cleaned.append(n.replace("[L]","").replace("[R]","").strip())
        return cleaned

    rows_sorted = sorted(merged.keys())
    table_rows = []

    # –î–æ split_row
    prev = 1
    for r in [x for x in rows_sorted if x < split_row]:
        if r > prev:
            push_plain(table_rows, prev, r-1)
        table_rows.append((str(r), "; ".join(clean_notes(merged[r])),
                           segment_label(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
        prev = r + 1
    if prev <= split_row - 1:
        push_plain(table_rows, prev, split_row-1)

    # split_row
    split_notes = [n for n in merged[split_row] if "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n.lower()]
    table_rows.append((str(split_row), "; ".join(clean_notes(split_notes)),
                       segment_label(split_row, rows_to_armhole_end, neck_start_row, shoulder_start_row)))

    # –ø–æ–¥–ø–∏—Å—å —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    # –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ = st_shldr + (neck_rest/2) (–ø–æ–∫–∞–∂–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–∑–∂–µ –≤ –±–ª–æ–∫–µ —Å–≤–æ–¥–∫–∏ ‚Äî –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    table_rows.append(("‚Äî –õ–ï–í–û–ï –ü–õ–ï–ß–û ‚Äî", "", ""))

    # –ª–µ–≤–æ–µ –ø–ª–µ—á–æ: –Ω–æ—Ç—ã —Å [L] + ¬´–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ¬ª (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ç–µ–∫—Å—Ç)
    left_prev = split_row + 1
    left_rows = []
    for r in [x for x in rows_sorted if x > split_row]:
        sel = []
        for n in merged[r]:
            ln = n.lower()
            if "[l]" in ln or "–ª–µ–≤–æ–µ –ø–ª–µ—á–æ" in ln:
                sel.append(n)
            # –≥–æ—Ä–ª–æ–≤–∏–Ω–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –ª–µ–≤–æ–≥–æ –ø–æ–º–µ—á–µ–Ω—ã [L], —É–∂–µ –ø–æ–ø–∞–¥–∞—é—Ç
        if sel:
            left_rows.append((r, sel))
    for r, notes in left_rows:
        if r > left_prev:
            push_plain(table_rows, left_prev, r-1)
        table_rows.append((str(r), "; ".join(clean_notes(notes)),
                           segment_label(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
        left_prev = r + 1
    if left_prev <= rows_count:
        push_plain(table_rows, left_prev, rows_count)

    # –ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ
    table_rows.append((f"‚Äî –ü–†–ê–í–û–ï –ü–õ–ï–ß–û ‚Äî (–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ä—è–¥—É {split_row})", "", ""))

    right_prev = split_row
    right_rows = []
    cand = [split_row] + [x for x in rows_sorted if x > split_row]
    for r in cand:
        sel = []
        for n in merged.get(r, []):
            ln = n.lower()
            if "[r]" in ln or "–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ" in ln:
                sel.append(n)
            # –≥–æ—Ä–ª–æ–≤–∏–Ω–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –ø–æ–º–µ—á–µ–Ω—ã [R]
        if r == split_row and any("—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" in n.lower() for n in merged[r]):
            sel.append("‚Ü≥ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∞–≤–æ–º—É –ø–ª–µ—á—É")
        if sel:
            right_rows.append((r, sel))
    for r, notes in right_rows:
        if r > right_prev:
            push_plain(table_rows, right_prev, r-1)
        table_rows.append((str(r), "; ".join(clean_notes(notes)),
                           segment_label(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
        right_prev = r + 1
    if right_prev <= rows_count:
        push_plain(table_rows, right_prev, rows_count)

    df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)
    if key: st.session_state[key] = table_rows

# -----------------------------
# –¢–∞–±–ª–∏—Ü–∞ ¬´—Å–ø–∏–Ω–∫–∞¬ª —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
# -----------------------------
def make_table_back_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
    make_table_front_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=key)

# -----------------------------
# –û–±—ã—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è)
# -----------------------------
def make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    merged = defaultdict(list)
    for row, note in actions:
        if isinstance(row, int) and 1 <= row <= rows_count:
            merged[row].append(note)
    rows_sorted = sorted(merged.keys())
    table_rows = []
    prev = 1
    if not rows_sorted:
        table_rows.append((f"1-{rows_count}", "–ü—Ä—è–º–æ",
                           segment_label(1, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
    else:
        for r in rows_sorted:
            if r > prev:
                seg = segment_label(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
                table_rows.append((str(prev) if prev==r-1 else f"{prev}-{r-1}", "–ü—Ä—è–º–æ", seg))
            table_rows.append((str(r), "; ".join(merged[r]),
                               segment_label(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
            prev = r + 1
        if prev <= rows_count:
            seg = segment_label(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
            table_rows.append((str(prev) if prev==rows_count else f"{prev}-{rows_count}", "–ü—Ä—è–º–æ", seg))
    df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)
    if key: st.session_state[key] = table_rows

# -----------------------------
# –í–≤–æ–¥
# -----------------------------
st.header("–ü–µ—Ä–µ–¥ / –°–ø–∏–Ω–∫–∞")

density_st_str   = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")
density_row_str  = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")

hip_cm_str       = st.text_input("–®–∏—Ä–∏–Ω–∞ –Ω–∏–∑–∞ –¥–µ—Ç–∞–ª–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
chest_cm_str     = st.text_input("–®–∏—Ä–∏–Ω–∞ –¥–µ—Ç–∞–ª–∏ –ø–æ –≥—Ä—É–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
length_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")

armhole_depth_cm_str   = st.text_input("–î–ª–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")

neck_width_cm_str      = st.text_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
neck_depth_cm_str      = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–µ—Ä–µ–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")
neck_depth_back_cm_str = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–∏–Ω–∫–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")

shoulder_len_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")
shoulder_slope_cm_str  = st.text_input("–°–∫–æ—Å –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É")

method = st.selectbox(
    "–ú–µ—Ç–æ–¥ —É–±–∞–≤–æ–∫",
    ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)", "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ (–ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ —Ä—è–¥—ã)"],
    index=0
)

def parse_inputs():
    return (
        float(density_st_str.replace(",", ".")),
        float(density_row_str.replace(",", ".")),
        float(hip_cm_str.replace(",", ".")),
        float(chest_cm_str.replace(",", ".")),
        float(length_cm_str.replace(",", ".")),
        float(armhole_depth_cm_str.replace(",", ".")),
        float(neck_width_cm_str.replace(",", ".")),
        float(neck_depth_cm_str.replace(",", ".")),
        float(neck_depth_back_cm_str.replace(",", ".")),
        float(shoulder_len_cm_str.replace(",", ".")),
        float(shoulder_slope_cm_str.replace(",", "."))
    )

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª
# -----------------------------
if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    fields = [density_st_str, density_row_str, hip_cm_str, chest_cm_str, length_cm_str,
              armhole_depth_cm_str, neck_width_cm_str, neck_depth_cm_str, neck_depth_back_cm_str,
              shoulder_len_cm_str, shoulder_slope_cm_str]
    if not all(fields):
        st.error("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è.")
        st.stop()
    try:
        (density_st, density_row, hip_cm, chest_cm, length_cm,
         armhole_depth_cm, neck_width_cm, neck_depth_cm, neck_depth_back_cm,
         shoulder_len_cm, shoulder_slope_cm) = parse_inputs()
    except:
        st.error("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞ (—Ç–æ—á–∫–∞/–∑–∞–ø—è—Ç–∞—è).")
        st.stop()

    # –ü–µ—Ä–µ—Å—á—ë—Ç
    st_hip     = cm_to_st(hip_cm, density_st)
    if st_hip % 2: st_hip += 1  # –ø—Ä–∞–≤–∏–ª–æ 1
    st_chest   = cm_to_st(chest_cm, density_st)

    rows_total = cm_to_rows(length_cm, density_row)
    rows_armh  = cm_to_rows(armhole_depth_cm, density_row)

    neck_st          = cm_to_st(neck_width_cm, density_st)
    neck_rows_front  = cm_to_rows(neck_depth_cm, density_row)
    neck_rows_back   = cm_to_rows(neck_depth_back_cm, density_row)

    st_shldr   = cm_to_st(shoulder_len_cm, density_st)  # —É–±–∞–≤–æ–∫ –ø–æ –ø–ª–µ—á—É –Ω–∞ –ö–ê–ñ–î–û–ú –ø–ª–µ—á–µ
    rows_slope = cm_to_rows(shoulder_slope_cm, density_row)

    st_shoulders = 2*st_shldr + neck_st
    rows_bottom  = rows_total - rows_armh - rows_slope
    armhole_start_row  = rows_bottom + 1
    shoulder_start_row = rows_total - rows_slope + 1
    armhole_end_row    = shoulder_start_row - 1

    neck_start_row_front = rows_total - neck_rows_front + 1
    neck_start_row_back  = rows_total - neck_rows_back + 1

    # –°–≤–æ–¥–∫–∞
    st.subheader("üìä –°–≤–æ–¥–∫–∞")
    st.write(f"- –ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å: **{st_hip}** (–ø—Ä–∏–≤–µ–¥–µ–Ω–æ –∫ —á—ë—Ç–Ω–æ–º—É)")
    st.write(f"- –í—Å–µ–≥–æ —Ä—è–¥–æ–≤: **{rows_total}**")

    # -------- –ü–ï–†–ï–î --------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞")
    actions = []

    # –ù–∏–∑: —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –æ—Ç –Ω–∏–∑–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–º—ã
    delta_bottom = st_chest - st_hip
    if delta_bottom > 0:
        actions += sym_increases(delta_bottom, 1, rows_bottom, rows_total, "–±–æ–∫")
    elif delta_bottom < 0:
        actions += sym_decreases(-delta_bottom, 1, rows_bottom, rows_total, "–±–æ–∫")

    # –ü—Ä–æ–π–º–∞ (–¥–æ –ø–ª–µ—á)
    actions += calc_round_armhole(st_chest, st_shoulders, armhole_start_row, shoulder_start_row, rows_total)

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–∏ (–µ–¥–∏–Ω—ã–π –ø–ª–∞–Ω, –ù–ï–¢ –ø–ª–µ—á–∞ –≤ split_row)
    actions += plan_front_or_back(
        neck_st=neck_st,
        neck_rows=neck_rows_front,
        neck_start_row=neck_start_row_front,
        st_shldr=st_shldr,
        rows_slope=rows_slope,
        rows_total=rows_total,
        forbid_first_row_shoulder=True,
        straight_percent=0.20
    )

    # –°–ª–∏—è–Ω–∏–µ + —Å—Ç–æ—Ä–æ–Ω–∞ –∫–∞—Ä–µ—Ç–∫–∏
    actions = merge_actions(actions, rows_total)
    actions = fix_carriage_side(actions, method)

    # –¢–∞–±–ª–∏—Ü–∞ (—Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º)
    make_table_front_split(actions, rows_total, rows_bottom, neck_start_row_front, shoulder_start_row, key="table_front")

    # -------- –°–ü–ò–ù–ö–ê --------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏")
    actions_back = []

    # –ù–∏–∑
    delta_bottom = st_chest - st_hip
    if delta_bottom > 0:
        actions_back += sym_increases(delta_bottom, 1, rows_bottom, rows_total, "–±–æ–∫")
    elif delta_bottom < 0:
        actions_back += sym_decreases(-delta_bottom, 1, rows_bottom, rows_total, "–±–æ–∫")

    # –ü—Ä–æ–π–º–∞
    delta_armh = st_shoulders - st_chest
    if delta_armh > 0:
        actions_back += sym_increases(delta_armh, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")
    elif delta_armh < 0:
        actions_back += sym_decreases(-delta_armh, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ —Å–ø–∏–Ω–∫–∏ + –ø–ª–µ—á–∏ (—Ç–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞)
    actions_back += plan_front_or_back(
        neck_st=neck_st,
        neck_rows=neck_rows_back,
        neck_start_row=neck_start_row_back,
        st_shldr=st_shldr,
        rows_slope=rows_slope,
        rows_total=rows_total,
        forbid_first_row_shoulder=True,
        straight_percent=0.20
    )

    actions_back = merge_actions(actions_back, rows_total)
    actions_back = fix_carriage_side(actions_back, method)
    make_table_back_split(actions_back, rows_total, rows_bottom, neck_start_row_back, shoulder_start_row, key="table_back")

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è PDF
    st.session_state.actions = actions
    st.session_state.actions_back = actions_back
    st.session_state.st_hip = st_hip
    st.session_state.rows_total = rows_total
    st.session_state.rows_bottom = rows_bottom

# -----------------------------
# PDF
# -----------------------------
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import io

pdfmetrics.registerFont(TTFont("DejaVuSans", "DejaVuSans.ttf"))

if st.session_state.actions and st.session_state.actions_back:
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()
    styles["Normal"].fontName = "DejaVuSans"
    styles["Heading1"].fontName = "DejaVuSans"
    styles["Heading2"].fontName = "DejaVuSans"

    elements.append(Paragraph("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", styles['Heading1']))
    elements.append(Spacer(1, 12))

    summary_data = [
        ["–ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å (—á—ë—Ç–Ω–æ)", str(st.session_state.st_hip)],
        ["–í—Å–µ–≥–æ —Ä—è–¥–æ–≤", str(st.session_state.rows_total)],
        ["–ù–∏–∑ (–¥–æ –ø—Ä–æ–π–º—ã)", str(st.session_state.rows_bottom)]
    ]
    tbl = Table(summary_data, hAlign="LEFT")
    tbl.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl)
    elements.append(Spacer(1, 12))

    elements.append(Paragraph("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞", styles['Heading2']))
    front = st.session_state.get("table_front", [["‚Äî","–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö","‚Äî"]])
    tbl_front = Table(front, hAlign="LEFT")
    tbl_front.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl_front)
    elements.append(Spacer(1, 12))

    elements.append(Paragraph("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏", styles['Heading2']))
    back = st.session_state.get("table_back", [["‚Äî","–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö","‚Äî"]])
    tbl_back = Table(back, hAlign="LEFT")
    tbl_back.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl_back)

    doc.build(elements)
    buffer.seek(0)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å PDF", buffer, file_name="vyazanie_instructions.pdf", mime="application/pdf")
else:
    st.info("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ¬´üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª.")
