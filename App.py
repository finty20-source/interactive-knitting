import streamlit as st
import numpy as np
import pandas as pd
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî —Ä–∞—Å—á—ë—Ç —Ä—É–∫–∞–≤–∞ (–æ–≤–µ—Ä—Å–∞–π–∑, –ø—Ä—è–º–æ–π –æ–∫–∞—Ç)")

# -----------------------------
# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# -----------------------------
st.header("–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

density_st = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–ø–µ—Ç–ª–∏ –≤ 10 —Å–º)", min_value=1, value=23)
density_row = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (—Ä—è–¥—ã –≤ 10 —Å–º)", min_value=1, value=40)

length_cm   = st.number_input("–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ (—Å–º)", min_value=20, value=60)
wrist_cm    = st.number_input("–®–∏—Ä–∏–Ω–∞ –º–∞–Ω–∂–µ—Ç—ã (—Å–º)", min_value=10, value=18)
top_cm      = st.number_input("–®–∏—Ä–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ –≤–≤–µ—Ä—Ö—É (—Å–º)", min_value=20, value=36)

st.write("---")

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏
# -----------------------------
def cm_to_st(cm, dens_st):   
    return int(round((cm/10.0)*dens_st))

def cm_to_rows(cm, dens_row):
    return int(round((cm/10.0)*dens_row))

def spread_rows(start_row: int, end_row: int, count: int):
    """–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä—è–¥–∞–º (–Ω–µ —Ä–∞–Ω—å—à–µ 5-–≥–æ —Ä—è–¥–∞)."""
    if count <= 0 or end_row < start_row:
        return []
    start_row = max(5, start_row)  # –ø—Ä–∞–≤–∏–ª–æ: –Ω–µ —Ä–∞–Ω—å—à–µ 5-–≥–æ —Ä—è–¥–∞
    if start_row == end_row:
        return [start_row]*count
    xs = np.linspace(start_row, end_row, num=count, endpoint=True)
    rows = sorted(set(int(round(x)) for x in xs))
    while len(rows) < count and rows[-1] < end_row:
        rows.append(rows[-1]+1)
    return rows[:count]

def distribute_side_increases(start_row, end_row, total_delta, label):
    """–ü—Ä–∏–±–∞–≤–∫–∏ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ ‚Üí –ø–∞—Ä–∞ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É."""
    if total_delta <= 0 or end_row < start_row:
        return []
    if total_delta % 2 == 1:
        total_delta += 1  # –≤—Å–µ–≥–¥–∞ —á—ë—Ç–Ω–æ–µ
    pairs = total_delta // 2
    rows = spread_rows(start_row, end_row, pairs)
    return [(r, f"+1 –ø. {label} —Å–ª–µ–≤–∞ –∏ +1 –ø. {label} —Å–ø—Ä–∞–≤–∞") for r in rows]

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
# -----------------------------
if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä—É–∫–∞–≤"):
    # –ü–µ—Ä–µ—Å—á—ë—Ç —Å–º ‚Üí –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
    stitches_wrist = cm_to_st(wrist_cm, density_st)
    stitches_top   = cm_to_st(top_cm, density_st)
    rows_total     = cm_to_rows(length_cm, density_row)

    delta = stitches_top - stitches_wrist
    if delta % 2 == 1:
        delta += 1

    # -----------------------------
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    # -----------------------------
    actions = []

    # –ü—Ä–∏–±–∞–≤–∫–∏ –æ—Ç –º–∞–Ω–∂–µ—Ç—ã –∫ –≤–µ—Ä—Ö—É
    actions += distribute_side_increases(5, rows_total - 1, delta, "—Ä—É–∫–∞–≤")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–∞—Ç–∞ (–ø—Ä—è–º–æ–µ)
    actions.append((rows_total, "–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–µ—Ç–ª–∏ (–ø—Ä—è–º–æ–π –æ–∫–∞—Ç)"))

    # -----------------------------
    # –°—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ
    # -----------------------------
    merged = defaultdict(list)
    for row, note in actions:
        merged[row].append(note)

    # -----------------------------
    # –¢–∞–±–ª–∏—Ü–∞
    # -----------------------------
    st.header("–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è —Ä—É–∫–∞–≤–∞")

    if not merged:
        st.info("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
    else:
        rows_sorted = sorted(merged.keys())
        data = {
            "–†—è–¥": rows_sorted,
            "–î–µ–π—Å—Ç–≤–∏—è": [", ".join(merged[r]) for r in rows_sorted],
            "–°–µ–≥–º–µ–Ω—Ç": ["–†—É–∫–∞–≤" if r < rows_total else "–û–∫–∞—Ç (–ø—Ä—è–º–æ–π)" for r in rows_sorted]
        }
        df = pd.DataFrame(data)
        st.dataframe(df, use_container_width=True, hide_index=True)

    st.write("---")
    st.success(
        f"–ò—Ç–æ–≥–æ —Ä—è–¥–æ–≤: {rows_total}. "
        f"–û—Ç –º–∞–Ω–∂–µ—Ç—ã ({stitches_wrist} –ø.) –¥–æ –≤–µ—Ä—Ö–∞ ({stitches_top} –ø.)."
    )
