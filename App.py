import streamlit as st
import numpy as np
import pandas as pd
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á—ë—Ç –º–æ–¥–µ–ª–∏")

# -----------------------------
# –°–µ—Å—Å–∏—è
# -----------------------------
if "actions" not in st.session_state:
    st.session_state.actions = []
    st.session_state.actions_back = []
    st.session_state.st_hip = 0
    st.session_state.rows_total = 0
    st.session_state.rows_bottom = 0

# -----------------------------
# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
# -----------------------------
def cm_to_st(cm, dens_st):
    return int(round((cm/10.0)*dens_st))

def cm_to_rows(cm, dens_row):
    return int(round((cm/10.0)*dens_row))

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# -----------------------------
def allowed_even_rows(start_row: int, end_row: int, rows_total: int, force_last=False):
    """–ß—ë—Ç–Ω—ã–µ —Ä—è–¥—ã: –æ—Ç ‚â•6 –¥–æ min(end_row, rows_total-2), –ª–∏–±–æ end_row (–µ—Å–ª–∏ force_last)."""
    if end_row is None: end_row = rows_total
    high = end_row if force_last else min(end_row, rows_total - 2)
    if high < 6: return []
    start = max(6, start_row)
    if start % 2 == 1: start += 1
    if high  % 2 == 1: high  -= 1
    return list(range(start, high + 1, 2)) if start <= high else []

def allowed_all_rows(start_row: int, end_row: int, rows_total: int):
    """–õ—é–±—ã–µ —Ä—è–¥—ã (–¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤—è–∑–∞–Ω–∏—è): –æ—Ç ‚â•6 –¥–æ rows_total-2."""
    if end_row is None: end_row = rows_total
    high = min(end_row, rows_total - 2)
    if high < 6: return []
    start = max(6, start_row)
    return list(range(start, high + 1)) if start <= high else []

def split_total_into_steps(total: int, steps: int):
    """–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å total –ø–æ steps —à–∞–≥–∞–º: [a,a,...,a+1,...]."""
    if total <= 0 or steps <= 0: return []
    steps = min(steps, total)  # –Ω–µ —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã—Ö —à–∞–≥–æ–≤
    base = total // steps
    rem  = total % steps
    return [base + (1 if i < rem else 0) for i in range(steps)]

def sym_increases(total_add, start_row, end_row, rows_total, label):
    if total_add <= 0: return []
    if total_add % 2 == 1: total_add += 1
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows: return []
    per_side = total_add // 2
    steps = min(len(rows), per_side)
    parts = split_total_into_steps(per_side, steps)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]
    out = []
    for r, v in zip(chosen, parts):
        out.append((r, f"+{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"+{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

def sym_decreases(total_sub, start_row, end_row, rows_total, label):
    if total_sub <= 0: return []
    if total_sub % 2 == 1: total_sub += 1
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows: return []
    per_side = total_sub // 2
    steps = min(len(rows), per_side)
    parts = split_total_into_steps(per_side, steps)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]
    out = []
    for r, v in zip(chosen, parts):
        out.append((r, f"-{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"-{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

# -----------------------------
# –ü—Ä–æ–π–º–∞ (–∫—Ä—É–≥–ª–∞—è, –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å –ø–ª–µ—á–æ–º)
# -----------------------------
def calc_round_armhole(st_chest, st_shoulders, start_row, shoulder_start_row, rows_total,
                       depth_percent=0.05, hold_percent=0.10):
    """–°–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è –ø—Ä–æ–π–º–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –î–û –Ω–∞—á–∞–ª–∞ –ø–ª–µ—á–∞."""
    if shoulder_start_row <= start_row: return []
    end_row = shoulder_start_row - 1
    total_rows = end_row - start_row + 1
    if total_rows <= 0: return []

    depth_armhole_st = int(round(st_chest * depth_percent))
    st_mid = st_chest - depth_armhole_st

    rows_smooth = max(0, int(total_rows * 0.4))
    rows_hold   = max(0, int(total_rows * hold_percent))
    # rows_rest = total_rows - rows_smooth - rows_hold  # (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —è–≤–Ω–æ)

    actions = []
    # –≠—Ç–∞–ø 1: –≤–Ω—É—Ç—Ä—å
    delta1 = st_mid - st_chest
    if delta1 < 0:
        actions += sym_decreases(-delta1, start_row, start_row+rows_smooth, rows_total, "–ø—Ä–æ–π–º–∞")
    # –≠—Ç–∞–ø 2: –ø—Ä—è–º–æ (rows_hold)
    # –≠—Ç–∞–ø 3: –Ω–∞—Ä—É–∂—É –∫ –ø–ª–µ—á–∞–º
    delta2 = st_shoulders - st_mid
    if delta2 > 0:
        actions += sym_increases(delta2, start_row+rows_smooth+rows_hold, end_row, rows_total, "–ø—Ä–æ–π–º–∞")
    return actions

# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–æ (–µ–¥–∏–Ω—ã–π –ø–ª–∞–Ω)
# -----------------------------
def schedule_shoulder_to_zero(need_left, need_right, start_row, end_row, rows_total,
                              forbid_rows=None, allow_overlap_row=None):
    """
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (—á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã) —Ç–∞–∫, —á—Ç–æ–±—ã:
    - –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å –≤ forbid_rows (—Ä—è–¥—ã –≥–æ—Ä–ª–æ–≤–∏–Ω—ã),
    - —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ allow_overlap_row (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ),
    - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞–∑–ª–æ–∂–∏—Ç—å –ø–æ –æ—Å—Ç–∞–≤—à–∏–º—Å—è —á—ë—Ç–Ω—ã–º —Ä—è–¥–∞–º,
    - –µ—Å–ª–∏ —Ä—è–¥–æ–≤ –º–∞–ª–æ ‚Äî –¥–∞—ë–º >1 –ø–µ—Ç–ª–∏ –≤ —Ä—è–¥ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ).
    """
    actions = []
    even_rows = allowed_even_rows(start_row, end_row, rows_total)
    if not even_rows: return actions

    forb = set(forbid_rows or [])

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —á—ë—Ç–Ω—ã–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º allow_overlap_row (–µ—Å–ª–∏ —ç—Ç–æ —á—ë—Ç–Ω—ã–π –∏ –ø–æ–ø–∞–ª –≤ forbid)
    even_rows_clean = []
    for r in even_rows:
        if r in forb and r != allow_overlap_row:
            continue
        even_rows_clean.append(r)

    # –ª–µ–≤–æ–µ –ø–ª–µ—á–æ ‚Äî —á—ë—Ç–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
    if even_rows_clean:
        parts_left = split_total_into_steps(need_left, len(even_rows_clean))
        for r, v in zip(even_rows_clean, parts_left):
            if v > 0:
                actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ (–ª–µ–≤–æ–µ –ø–ª–µ—á–æ)"))

    # –ø—Ä–∞–≤–æ–µ ‚Äî —Å–º–µ—â–µ–Ω–∏–µ +1, –∏–∑–±–µ–≥–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä—è–¥–æ–≤ –∏ forbid
    right_rows = []
    for r in even_rows_clean:
        rr = r + 1
        if rr <= rows_total - 2 and (rr not in forb or rr == allow_overlap_row):
            right_rows.append(rr)

    if right_rows:
        parts_right = split_total_into_steps(need_right, len(right_rows))
        for r, v in zip(right_rows, parts_right):
            if v > 0:
                actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ (–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ)"))

    return actions

def plan_neck_and_shoulder(
    neck_st: int,
    neck_rows: int,
    neck_start_row: int,
    st_shldr: int,        # —à–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ—á–∞ –≤ –ø–µ—Ç–ª—è—Ö
    rows_slope: int,      # –≤—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ –≤ —Ä—è–¥–∞—Ö
    rows_total: int,
    straight_percent: float = 0.10,
    allow_first_overlap: bool = True  # –º–æ–∂–Ω–æ –ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏—Ç—å –¢–û–õ–¨–ö–û –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã –∏ –ø–ª–µ—á–∞
):
    """
    1) –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã = 60% (—á—ë—Ç–Ω–æ–µ).
    2) –û—Å—Ç–∞—Ç–æ–∫ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ (–≤ –∫–∞–∂–¥—ã–π —Ä—è–¥), –Ω–æ –≤–µ—Ä—Ö straight_percent ‚Äî –ø—Ä—è–º—ã–µ —Ä—è–¥—ã.
    3) –°–∫–æ—Å –ø–ª–µ—á–∞ –¥–æ–±–∏—Ä–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ç–µ–ª—å –¥–æ 0, –ø–æ —á—ë—Ç–Ω—ã–º —Ä—è–¥–∞–º; –∏–∑–±–µ–≥–∞–µ—Ç —Ä—è–¥–æ–≤ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã,
       –∫—Ä–æ–º–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä—è–¥–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã.
    """
    actions = []
    if neck_st <= 0 or neck_rows <= 0 or st_shldr <= 0:
        return actions

    # --- 1. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (60%), –¥–æ–≤–æ–¥–∏–º –¥–æ —á—ë—Ç–Ω–æ–≥–æ ---
    first_dec = int(round(neck_st * 0.60))
    if first_dec % 2 == 1: first_dec += 1
    if first_dec > neck_st: first_dec = neck_st if neck_st % 2 == 0 else neck_st - 1
    rest = max(0, neck_st - first_dec)

    central_row = max(6, min(neck_start_row, rows_total - 2))
    actions.append((central_row, f"-{first_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Ü–µ–Ω—Ç—Ä, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))

    # --- 2. –£–±–∞–≤–∫–∏ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—á–∞—Å—Ç–∏—á–Ω–æ–µ), –≤–µ—Ä—Ö straight_percent ‚Äî –ø—Ä—è–º–æ ---
    straight_rows = max(2, int(round(neck_rows * straight_percent)))
    last_neck_dec_row = min(neck_start_row + neck_rows - 1 - straight_rows, rows_total - 2)

    neck_dec_rows = [central_row]
    left_used = right_used = 0
    if rest > 0 and last_neck_dec_row >= central_row + 1:
        all_rows = allowed_all_rows(central_row + 1, last_neck_dec_row, rows_total)
        if all_rows:
            steps = min(len(all_rows), rest)  # –ø–æ 1 –ø. –Ω–∞ —Ä—è–¥
            idxs  = np.linspace(0, len(all_rows)-1, num=steps, dtype=int)
            chosen = [all_rows[i] for i in idxs]
            for k, r in enumerate(chosen):
                if k % 2 == 0:
                    actions.append((r, "-1 –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–ª–µ–≤–æ–µ –ø–ª–µ—á–æ)"))
                    left_used += 1
                else:
                    actions.append((r, "-1 –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ)"))
                    right_used += 1
            neck_dec_rows += chosen

    # --- 3. –°–∫–æ—Å –ø–ª–µ—á–∞ (–¥–æ –Ω—É–ª—è), –∏–∑–±–µ–≥–∞—è neck_dec_rows ---
    need_left  = max(0, st_shldr - left_used)
    need_right = max(0, st_shldr - right_used)

    shoulder_start_row = rows_total - rows_slope + 1
    if not allow_first_overlap:
        allow_overlap_row = None
    else:
        # —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–≤–ø–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º —Ä—è–¥–æ–º
        allow_overlap_row = central_row

    actions += schedule_shoulder_to_zero(
        need_left, need_right,
        start_row=shoulder_start_row,
        end_row=rows_total,
        rows_total=rows_total,
        forbid_rows=set(neck_dec_rows),
        allow_overlap_row=allow_overlap_row
    )

    return actions

# -----------------------------
# –°–ª–∏—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
# -----------------------------
def merge_actions(actions, rows_total):
    """–ù–∞ –≤—Å—è–∫–∏–π: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞+—Å–∫–æ—Å –Ω–µ —Å–æ–≤–º–µ—â–∞—é—Ç—Å—è, –ö–†–û–ú–ï –ø–µ—Ä–≤–æ–≥–æ —Ä—è–¥–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã."""
    merged = defaultdict(list)
    for row, note in actions:
        merged[row].append(note)

    fixed = []
    used = set()

    # –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    neck_rows_sorted = sorted([r for r, notes in merged.items() if any("–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n for n in notes)])
    first_neck_row = neck_rows_sorted[0] if neck_rows_sorted else None

    for row in sorted(merged.keys()):
        notes = merged[row]
        both = ("–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in " ".join(notes)) and ("—Å–∫–æ—Å –ø–ª–µ—á–∞" in " ".join(notes))

        if both and (first_neck_row is not None) and row != first_neck_row:
            # –æ—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ä–ª–æ–≤–∏–Ω—É –≤ —ç—Ç–æ–º —Ä—è–¥—É, —Å–∫–æ—Å –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∏–∂–µ
            neck_notes = [n for n in notes if "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n]
            sh_notes   = [n for n in notes if "—Å–∫–æ—Å –ø–ª–µ—á–∞" in n]
            fixed.append((row, "; ".join(neck_notes)))
            used.add(row)

            new_r = row + 1
            while (new_r in used) and (new_r < rows_total - 2):
                new_r += 1
            for n in sh_notes:
                fixed.append((new_r, n))
                used.add(new_r)
        else:
            fixed.append((row, "; ".join(notes)))
            used.add(row)

    return sorted(fixed, key=lambda x: int(str(x[0]).split('-')[0]))

# -----------------------------
# –£—á—ë—Ç —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏
# -----------------------------
def fix_carriage_side(actions, method=None):
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ: —É–±–∞–≤–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏.
    –ß–∞—Å—Ç–∏—á–Ω–æ–µ:   —É–±–∞–≤–∫–∏ —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.
    –ù–µ—á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã ‚Üí –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞; —á—ë—Ç–Ω—ã–µ ‚Üí –∫–∞—Ä–µ—Ç–∫–∞ —Å–ª–µ–≤–∞.
    –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¢–û–õ–¨–ö–û –¥–µ–π—Å—Ç–≤–∏—è, –≥–¥–µ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ '(—Å–ª–µ–≤–∞)/(—Å–ø—Ä–∞–≤–∞)'.
    """
    if method is None:
        method = st.session_state.get("method", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)")

    use_std = method.startswith("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
    fixed = []

    for r, note in actions:
        low = note.lower()
        if "—Å–ª–µ–≤–∞" in low or "—Å–ø—Ä–∞–≤–∞" in low:
            if r % 2 == 1:  # –Ω–µ—á—ë—Ç–Ω—ã–π: –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞
                correct = "—Å–ø—Ä–∞–≤–∞" if use_std else "—Å–ª–µ–≤–∞"
            else:           # —á—ë—Ç–Ω—ã–π: –∫–∞—Ä–µ—Ç–∫–∞ —Å–ª–µ–≤–∞
                correct = "—Å–ª–µ–≤–∞" if use_std else "—Å–ø—Ä–∞–≤–∞"
            if correct not in low:
                # –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–π —Ä—è–¥ (–Ω–æ –Ω–µ –Ω–∞ rows_total/rows_total-1)
                new_r = r - 1 if r > 2 else r + 1
                if new_r >= rows_total - 1: new_r = r - 1
                fixed.append((new_r, note))
                continue
        fixed.append((r, note))
    return fixed

# -----------------------------
# –°–µ–≥–º–µ–Ω—Ç—ã + —Ç–∞–±–ª–∏—Ü–∞
# -----------------------------
def section_tags(row, rows_to_armhole_end, neck_start_row, shoulder_start_row):
    tags = []
    if row <= rows_to_armhole_end: tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
    if rows_to_armhole_end < row < shoulder_start_row: tags.append("–ü—Ä–æ–π–º–∞")
    if neck_start_row and row >= neck_start_row: tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if shoulder_start_row and row >= shoulder_start_row: tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return " + ".join(tags) if tags else "‚Äî"

def make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    merged = defaultdict(list)
    for row, note in actions:
        if 1 <= row <= rows_count:
            merged[row].append(note)

    rows_sorted = sorted(merged.keys())
    table_rows = []
    prev = 1

    if not rows_sorted:
        seg = section_tags(1, rows_to_armhole_end, neck_start_row, shoulder_start_row)
        table_rows.append((f"1-{rows_count}", "–ü—Ä—è–º–æ", seg))
    else:
        for r in rows_sorted:
            if r > prev:
                seg = section_tags(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
                if prev == r-1:
                    table_rows.append((str(prev), "–ü—Ä—è–º–æ", seg))
                else:
                    table_rows.append((f"{prev}-{r-1}", "–ü—Ä—è–º–æ", seg))
            table_rows.append((str(r), "; ".join(merged[r]),
                               section_tags(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
            prev = r + 1

        if prev <= rows_count:
            seg = section_tags(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
            if prev == rows_count:
                table_rows.append((str(prev), "–ü—Ä—è–º–æ", seg))
            else:
                table_rows.append((f"{prev}-{rows_count}", "–ü—Ä—è–º–æ", seg))

    df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)

    if key:
        st.session_state[key] = table_rows

# -----------------------------
# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏)
# -----------------------------
st.header("–ü–µ—Ä–µ–¥ / –°–ø–∏–Ω–∫–∞")

density_st_str   = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 23")
density_row_str  = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 32")

hip_cm_str       = st.text_input("–®–∏—Ä–∏–Ω–∞ –Ω–∏–∑–∞ –¥–µ—Ç–∞–ª–∏ (—Å–º)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 48")
chest_cm_str     = st.text_input("–®–∏—Ä–∏–Ω–∞ –¥–µ—Ç–∞–ª–∏ –ø–æ –≥—Ä—É–¥–∏ (—Å–º)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 54")
length_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 60")

armhole_depth_cm_str   = st.text_input("–î–ª–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 20")

neck_width_cm_str      = st.text_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 18")
neck_depth_cm_str      = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–µ—Ä–µ–¥–∏ (—Å–º)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 12")
neck_depth_back_cm_str = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–∏–Ω–∫–∏ (—Å–º)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 3")

shoulder_len_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –ø–ª–µ—á–∞ (—Å–º)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 25")
shoulder_slope_cm_str  = st.text_input("–°–∫–æ—Å –ø–ª–µ—á–∞ (—Å–º)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä 6")

method = st.selectbox(
    "–ú–µ—Ç–æ–¥ —É–±–∞–≤–æ–∫",
    ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)", "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ (–ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ —Ä—è–¥—ã)"],
    index=0
)

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞
# -----------------------------
if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    inputs = [
        density_st_str, density_row_str,
        hip_cm_str, chest_cm_str, length_cm_str,
        armhole_depth_cm_str,
        neck_width_cm_str, neck_depth_cm_str, neck_depth_back_cm_str,
        shoulder_len_cm_str, shoulder_slope_cm_str
    ]
    if not all(inputs):
        st.error("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"); st.stop()
    try:
        density_st = float(density_st_str.replace(",", "."))
        density_row= float(density_row_str.replace(",", "."))
        hip_cm     = float(hip_cm_str.replace(",", "."))
        chest_cm   = float(chest_cm_str.replace(",", "."))
        length_cm  = float(length_cm_str.replace(",", "."))
        armhole_depth_cm = float(armhole_depth_cm_str.replace(",", "."))
        neck_width_cm    = float(neck_width_cm_str.replace(",", "."))
        neck_depth_cm    = float(neck_depth_cm_str.replace(",", "."))
        neck_depth_back_cm= float(neck_depth_back_cm_str.replace(",", "."))
        shoulder_len_cm  = float(shoulder_len_cm_str.replace(",", "."))
        shoulder_slope_cm= float(shoulder_slope_cm_str.replace(",", "."))
    except:
        st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ (–º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π)"); st.stop()

    # –ü–µ—Ä–µ—Å—á—ë—Ç –≤ –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
    st_hip     = cm_to_st(hip_cm, density_st)
    st_chest   = cm_to_st(chest_cm, density_st)
    rows_total = cm_to_rows(length_cm, density_row)
    rows_armh  = cm_to_rows(armhole_depth_cm, density_row)

    neck_st    = cm_to_st(neck_width_cm, density_st)
    neck_rows_front  = cm_to_rows(neck_depth_cm, density_row)
    neck_rows_back   = cm_to_rows(neck_depth_back_cm, density_row)

    st_shldr   = cm_to_st(shoulder_len_cm, density_st)
    rows_slope = cm_to_rows(shoulder_slope_cm, density_row)

    st_shoulders = 2 * st_shldr + neck_st
    rows_bottom  = rows_total - rows_armh - rows_slope

    armhole_start_row   = rows_bottom + 1
    shoulder_start_row  = rows_total - rows_slope + 1
    rows_to_armhole_end = rows_bottom

    neck_start_row_front = rows_total - neck_rows_front + 1
    neck_start_row_back  = rows_total - neck_rows_back + 1

    # üìä –°–≤–æ–¥–∫–∞
    st.subheader("üìä –°–≤–æ–¥–∫–∞")
    st.write(f"- –ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å: **{st_hip}**")
    st.write(f"- –í—Å–µ–≥–æ —Ä—è–¥–æ–≤: **{rows_total}**")

    # -----------------------------
    # üìã –ü–ï–†–ï–î
    # -----------------------------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞")
    actions = []

    # –ù–∏–∑
    delta_bottom = (2*st_shldr + neck_st) - st_hip
    if delta_bottom > 0:
        actions += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
    elif delta_bottom < 0:
        actions += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")

    # –ü—Ä–æ–π–º–∞
    actions += calc_round_armhole(
        st_chest,
        st_shoulders,
        armhole_start_row,
        shoulder_start_row,
        rows_total
    )

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ü–ª–µ—á–æ
    actions += plan_neck_and_shoulder(
        neck_st=neck_st,
        neck_rows=neck_rows_front,
        neck_start_row=neck_start_row_front,
        st_shldr=st_shldr,
        rows_slope=rows_slope,
        rows_total=rows_total,
        straight_percent=0.10,
        allow_first_overlap=True  # —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—è–¥ –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞—Å—Ç—å —Å–æ —Å–∫–æ—Å–æ–º
    )

    actions = merge_actions(actions, rows_total)
    actions = fix_carriage_side(actions, method)
    make_table_full(actions, rows_total, rows_bottom, neck_start_row_front, shoulder_start_row, key="table_front")

    # -----------------------------
    # üìã –°–ü–ò–ù–ö–ê
    # -----------------------------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏")
    actions_back = []

    # –ù–∏–∑
    delta_bottom = (2*st_shldr + neck_st) - st_hip
    if delta_bottom > 0:
        actions_back += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
    elif delta_bottom < 0:
        actions_back += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")

    # –ü—Ä–æ–π–º–∞
    actions_back += calc_round_armhole(
        st_chest,
        st_shoulders,
        armhole_start_row,
        shoulder_start_row,
        rows_total
    )

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ü–ª–µ—á–æ (—Å–ø–∏–Ω–∫–∞)
    actions_back += plan_neck_and_shoulder(
        neck_st=neck_st,
        neck_rows=neck_rows_back,
        neck_start_row=neck_start_row_back,
        st_shldr=st_shldr,
        rows_slope=rows_slope,
        rows_total=rows_total,
        straight_percent=0.10,
        allow_first_overlap=True
    )

    actions_back = merge_actions(actions_back, rows_total)
    actions_back = fix_carriage_side(actions_back, method)
    make_table_full(actions_back, rows_total, rows_bottom, neck_start_row_back, shoulder_start_row, key="table_back")

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è PDF
    st.session_state.actions = actions
    st.session_state.actions_back = actions_back
    st.session_state.st_hip = st_hip
    st.session_state.rows_total = rows_total
    st.session_state.rows_bottom = rows_bottom
