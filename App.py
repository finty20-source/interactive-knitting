import streamlit as st
import pandas as pd
import numpy as np
from collections import defaultdict

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def split_total_into_steps(total, steps):
    """–†–∞–∑–±–∏—Ç—å —á–∏—Å–ª–æ total –Ω–∞ steps —á–∞—Å—Ç–µ–π (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ ‚â§1)."""
    base = total // steps
    rem = total % steps
    parts = [base + (1 if i < rem else 0) for i in range(steps)]
    return parts

def allowed_even_rows(start_row, end_row, rows_total):
    """–í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —á—ë—Ç–Ω—ã—Ö —Ä—è–¥–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö (–Ω–µ —Ä–∞–Ω—å—à–µ 6-–≥–æ –∏ –Ω–µ –ø–æ–∑–∂–µ rows_total-2)."""
    rows = []
    for r in range(max(6, start_row), min(end_row, rows_total - 1) + 1):
        if r % 2 == 0:
            rows.append(r)
    return rows

# --- –ì–û–†–õ–û–í–ò–ù–ê ---
def calc_round_neckline(total_stitches: int, total_rows: int, start_row: int, rows_total: int, straight_percent: float = 0.05):
    """
    –ì–æ—Ä–ª–æ–≤–∏–Ω–∞:
    - –ø–µ—Ä–≤—ã–π —à–∞–≥: 60% –ø–µ—Ç–µ–ª—å,
    - –≤–µ—Ä—Ö–Ω–∏–µ straight_percent*–≥–ª—É–±–∏–Ω—ã (–Ω–æ ‚â•2 —Ä—è–¥–∞) ‚Äî –ø—Ä—è–º–æ,
    - –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ç–ª–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —á—ë—Ç–Ω—ã–º —Ä—è–¥–∞–º,
    - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —É–±–∞–≤–æ—á–Ω—ã—Ö —Ä—è–¥–∞ ‚â§1 –ø–µ—Ç–ª–∏,
    - –ª–∏—à–Ω–∏–µ –ø–µ—Ç–ª–∏ —Ä–∞—Å–∫–∏–¥—ã–≤–∞—é—Ç—Å—è –≤–Ω–∏–∑ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞).
    """
    if total_stitches <= 0 or total_rows <= 0:
        return []

    # –ø–µ—Ä–≤—ã–π —à–∞–≥ (60%)
    first_dec = int(round(total_stitches * 0.60))
    rest = total_stitches - first_dec

    # –≤–µ—Ä—Ö–Ω—è—è –ø—Ä—è–º–∞—è —á–∞—Å—Ç—å
    straight_rows = max(2, int(round(total_rows * straight_percent)))
    neck_end_by_depth = start_row + total_rows - 1 - straight_rows
    effective_end = min(neck_end_by_depth, rows_total - 2)

    # –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä—è–¥—ã
    rows = allowed_even_rows(start_row, effective_end, rows_total)
    if not rows:
        return []

    actions = []
    # –ø–µ—Ä–≤—ã–π —à–∞–≥
    actions.append((rows[0], f"-{first_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))

    # –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å
    if rest <= 0 or len(rows) == 1:
        return actions

    rest_rows = rows[1:]
    steps = min(len(rest_rows), rest)

    if steps == 2 and rest > 2 and len(rest_rows) >= 3:
        steps = 3

    idxs = np.linspace(0, len(rest_rows) - 1, num=steps, dtype=int)
    chosen = [rest_rows[i] for i in idxs]
    parts = split_total_into_steps(rest, steps)

    # —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö —à–∞–≥–æ–≤
    if steps >= 2:
        over = 0
        last_idxs = [steps - 2, steps - 1]
        for i in last_idxs:
            if parts[i] > 1:
                over += parts[i] - 1
                parts[i] = 1
        if over > 0:
            if steps > 2:
                k = steps - 2
                j = 0
                while over > 0:
                    parts[j % k] += 1
                    over -= 1
                    j += 1
            else:
                parts[-2] += over
                over = 0

    for r, v in zip(chosen, parts):
        actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ –æ—Ç–¥–µ–ª—å–Ω–æ)"))

    return actions

# --- –°–ö–û–° –ü–õ–ï–ß–ê ---
def slope_shoulder(total_stitches: int, start_row: int, end_row: int, rows_total: int):
    """–°–∫–æ—Å –ø–ª–µ—á–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —á—ë—Ç–Ω—ã–º —Ä—è–¥–∞–º, –æ—Å—Ç–∞—Ç–æ–∫ –≤ –Ω–∞—á–∞–ª–µ."""
    if total_stitches <= 0:
        return []

    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows:
        return []

    steps = len(rows)
    base = total_stitches // steps
    rem = total_stitches % steps

    actions = []
    for i, r in enumerate(rows):
        dec = base + (1 if i < rem else 0)
        actions.append((r, f"-{dec} –ø. –ø–ª–µ—á–æ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ)"))
    return actions

# --- –†–ï–ù–î–ï–† –í –¢–ê–ë–õ–ò–¶–£ ---
def render_table(rows_total, sections):
    data = []
    for label, actions in sections:
        if actions:
            # –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            data.append(("", f"--- {label} ---"))
            for r, note in actions:
                data.append((r, note))
    df = pd.DataFrame(data, columns=["–†—è–¥", "–î–µ–π—Å—Ç–≤–∏–µ"])
    st.table(df)

# --- STREAMLIT UI ---
st.title("üß∂ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—è–∑–∞–Ω–∏—è")

with st.form("inputs"):
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    rows_total = st.number_input("–í—ã—Å–æ—Ç–∞ –¥–µ—Ç–∞–ª–∏ (—Ä—è–¥—ã)", 10, 500, 120)
    neck_stitches = st.number_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (–ø–µ—Ç–ª–∏)", 0, 200, 30)
    neck_rows = st.number_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Ä—è–¥—ã)", 0, 200, 20)
    shoulder_stitches = st.number_input("–®–∏—Ä–∏–Ω–∞ –ø–ª–µ—á–∞ (–ø–µ—Ç–ª–∏)", 0, 200, 15)
    shoulder_rows = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (—Ä—è–¥—ã)", 0, 200, 10)
    submitted = st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")

if submitted:
    sections = []
    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞
    neck = calc_round_neckline(
        neck_stitches,
        neck_rows,
        rows_total - neck_rows + 1,
        rows_total
    )
    sections.append(("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞", neck))

    # –ü–ª–µ—á–æ
    shoulder = slope_shoulder(
        shoulder_stitches,
        rows_total - shoulder_rows + 1,
        rows_total,
        rows_total
    )
    sections.append(("–ü–ª–µ—á–æ", shoulder))

    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    render_table(rows_total, sections)
