import streamlit as st
import numpy as np
import pandas as pd
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á—ë—Ç –º–æ–¥–µ–ª–∏")

# -----------------------------
# –°–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# -----------------------------
if "actions" not in st.session_state:
    st.session_state.actions = []
    st.session_state.actions_back = []
    st.session_state.st_hip = 0
    st.session_state.rows_total = 0
    st.session_state.rows_bottom = 0
    st.session_state.table_front = []
    st.session_state.table_back = []

# -----------------------------
# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
# -----------------------------
def cm_to_st(cm, dens_st):
    return int(round((cm/10.0)*dens_st))

def cm_to_rows(cm, dens_row):
    return int(round((cm/10.0)*dens_row))
# -----------------------------
# –†—è–¥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (—Å –¥–æ—Ä–∞–±–æ—Ç–∫–æ–π)
# -----------------------------
def allowed_even_rows(start_row: int, end_row: int, rows_total: int, force_last=False):
    """–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã: ‚â•6 –∏ ‚â§ end_row.
       –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–µ–∑–∞–µ—Ç –ø–æ rows_total-2,
       –Ω–æ –µ—Å–ª–∏ force_last=True ‚Äî –∏–¥—ë—Ç –¥–æ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞ (end_row)."""
    if end_row is None:
        end_row = rows_total
    high = end_row if force_last else min(end_row, rows_total - 2)
    if high < 6:
        return []
    start = max(6, start_row)
    if start % 2 == 1: start += 1
    if high % 2 == 1: high -= 1
    return list(range(start, high + 1, 2)) if start <= high else []
def split_total_into_steps(total: int, steps: int):
    if total <= 0 or steps <= 0:
        return []
    steps = min(steps, total)
    base = total // steps
    rem  = total % steps
    return [base + (1 if i < rem else 0) for i in range(steps)]

def sym_increases(total_add, start_row, end_row, rows_total, label):
    if total_add <= 0: return []
    if total_add % 2 == 1: total_add += 1
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows: return []
    per_side = total_add // 2
    steps = min(len(rows), per_side)
    parts = split_total_into_steps(per_side, steps)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]
    out = []
    for r, v in zip(chosen, parts):
        out.append((r, f"+{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"+{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

def sym_decreases(total_sub, start_row, end_row, rows_total, label):
    if total_sub <= 0: return []
    if total_sub % 2 == 1: total_sub += 1
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows: return []
    per_side = total_sub // 2
    steps = min(len(rows), per_side)
    parts = split_total_into_steps(per_side, steps)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]
    out = []
    for r, v in zip(chosen, parts):
        out.append((r, f"-{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"-{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

# -----------------------------
# –ü—Ä–æ–π–º–∞ (–∫—Ä—É–≥–ª–∞—è)
# -----------------------------
def calc_round_armhole(st_chest, st_shoulders, start_row, shoulder_start_row, rows_total, depth_percent=0.05, hold_percent=0.1):
    """–°–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è –ø—Ä–æ–π–º–∞: —É–±–∞–≤–∫–∏ –≤–Ω—É—Ç—Ä—å, –ø–æ—Ç–æ–º –ø—Ä—è–º–æ, –ø–æ—Ç–æ–º –ø–ª–∞–≤–Ω—ã–π –≤—ã—Ö–æ–¥ –∫ –ø–ª–µ—á–∞–º.
       –ü—Ä–æ–π–º–∞ –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ –ø–ª–µ—á–∞."""
    if shoulder_start_row <= start_row:
        return []

    end_row = shoulder_start_row - 1
    total_rows = end_row - start_row + 1
    if total_rows <= 0:
        return []

    depth_armhole_st = int(round(st_chest * depth_percent))
    st_mid = st_chest - depth_armhole_st

    rows_smooth = int(total_rows * 0.4)       # –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å
    rows_hold   = int(total_rows * hold_percent)  # –ø—Ä—è–º–æ
    rows_rest   = total_rows - rows_smooth - rows_hold

    actions = []

    # –≠—Ç–∞–ø 1: —É–±–∞–≤–∫–∏ –≤–Ω—É—Ç—Ä—å (chest ‚Üí mid)
    delta1 = st_mid - st_chest
    if delta1 < 0:
        actions += sym_decreases(-delta1, start_row, start_row+rows_smooth, rows_total, "–ø—Ä–æ–π–º–∞")

    # –≠—Ç–∞–ø 2: –ø—Ä—è–º–æ (st_mid)

    # –≠—Ç–∞–ø 3: –ø—Ä–∏–±–∞–≤–∫–∏ –Ω–∞—Ä—É–∂—É (mid ‚Üí –ø–ª–µ—á–∏)
    delta2 = st_shoulders - st_mid
    if delta2 > 0:
        actions += sym_increases(delta2, start_row+rows_smooth+rows_hold, end_row, rows_total, "–ø—Ä–æ–π–º–∞")

    return actions

# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫—Ä—É–≥–ª–∞—è, —Å –ø—Ä—è–º—ã–º–∏ —Ä—è–¥–∞–º–∏ —Å–≤–µ—Ä—Ö—É)
# -----------------------------
def calc_round_neckline(total_stitches, total_rows, start_row, rows_total, straight_spec=0.20):
    if total_stitches <= 0 or total_rows <= 0:
        return []

    # –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî 60%
    first_dec = int(round(total_stitches * 0.60))
    if first_dec % 2 == 1:
        first_dec += 1
    rest = total_stitches - first_dec

    # –ø–æ—Å–ª–µ–¥–Ω–∏–µ straight_spec –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≥–ª—É–±–∏–Ω—ã ‚Äî –ø—Ä—è–º—ã–µ
    straight_rows = max(2, int(round(total_rows * straight_spec)))
    neck_end_by_depth = start_row + total_rows - 1 - straight_rows
    effective_end = min(neck_end_by_depth, rows_total - 2)

    rows = allowed_even_rows(start_row, effective_end, rows_total)
    if not rows:
        return []

    actions = [(rows[0], f"-{first_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)")]

    if rest <= 0 or len(rows) == 1:
        return actions

    rest_rows = rows[1:]
    steps = min(len(rest_rows), rest)
    idxs   = np.linspace(0, len(rest_rows)-1, num=steps, dtype=int)
    chosen = [rest_rows[i] for i in idxs]
    parts  = split_total_into_steps(rest, steps)

    for r, v in zip(chosen, parts):
        actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞"))

    return actions

# -----------------------------
# –°–∫–æ—Å –ø–ª–µ—á–∞
# -----------------------------
def slope_shoulders(total_stitches, start_row, end_row, rows_total):
    """
    –õ–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ: —É–±–∞–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –ß–Å–¢–ù–´–• —Ä—è–¥–∞—Ö.
    """
    if total_stitches <= 0:
        return [], []

    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows:
        return [], []

    steps = len(rows)
    base = total_stitches // steps
    rem  = total_stitches % steps

    left_actions, right_actions = [], []

    for i, r in enumerate(rows):
        dec = base + (1 if i < rem else 0)
        left_actions.append((r, f"-{dec} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ (–ª–µ–≤–æ–µ –ø–ª–µ—á–æ)"))
        right_actions.append((r, f"-{dec} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ (–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ)"))

    return left_actions, right_actions

# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + —Å–∫–æ—Å –ø–ª–µ—á–∞ (—Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –ª–µ–≤–æ–µ/–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ)
# -----------------------------
def plan_neck_and_shoulders_split(
    neck_st, neck_rows, neck_start_row,
    st_shoulders, shoulder_start_row, rows_total,
    straight_percent=0.20
):
    actions = []

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20% —Ä—è–¥–æ–≤ –ø—Ä—è–º—ã–º–∏)
    actions += calc_round_neckline(
        total_stitches=neck_st,
        total_rows=neck_rows,
        start_row=neck_start_row,
        rows_total=rows_total,
        straight_spec=straight_percent
    )

    # –°–∫–æ—Å –ø–ª–µ—á–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ)
    actions_left, actions_right = slope_shoulders(
        total_stitches=st_shoulders // 2,
        start_row=shoulder_start_row,
        end_row=rows_total,
        rows_total=rows_total
    )
    actions += actions_left + actions_right

    return actions

# -----------------------------
# –°–ª–∏—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (–≥–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–æ)
# -----------------------------
def merge_actions(actions, rows_total):
    """
    –ü—Ä–∞–≤–∏–ª–∞:
    - –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –∏ —Å–∫–æ—Å –ø–ª–µ—á–∞ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –°–ê–ú–û–ú –ü–ï–†–í–û–ú —Ä—è–¥—É –≥–æ—Ä–ª–æ–≤–∏–Ω—ã,
      –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –º—ã –∏—Ö —Ä–∞–∑–Ω–æ—Å–∏–º.
    - –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Å–≤–æ—ë–º —Ä—è–¥—É.
    - —Å–∫–æ—Å –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ +1 —Ä—è–¥ (–µ—Å–ª–∏ –∑–∞–Ω—è—Ç ‚Äî –∏—â–µ–º –¥–∞–ª—å—à–µ).
    """
    merged = defaultdict(list)
    for row, note in actions:
        merged[row].append(note)

    fixed = []
    used_rows = set()
    first_neck_row = None  # –∑–∞–ø–æ–º–Ω–∏–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã

    # —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    for row in sorted(merged.keys()):
        if any("–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n for n in merged[row]):
            first_neck_row = row
            break

    for row in sorted(merged.keys()):
        notes = merged[row]

        if ("–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in " ".join(notes)) and ("—Å–∫–æ—Å –ø–ª–µ—á–∞" in " ".join(notes)):
            # –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–º–µ—Å—Ç–µ
            if row == first_neck_row:
                fixed.append((row, "; ".join(notes)))
                used_rows.add(row)
            else:
                # —Ä–∞–∑–¥–µ–ª—è–µ–º: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –≤ —Å–≤–æ—ë–º —Ä—è–¥—É, —Å–∫–æ—Å –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤—ã—à–µ
                shoulder_notes = [n for n in notes if "—Å–∫–æ—Å –ø–ª–µ—á–∞" in n]
                neck_notes     = [n for n in notes if "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n]

                fixed.append((row, "; ".join(neck_notes)))
                used_rows.add(row)

                new_row = row + 1
                while new_row in used_rows and new_row < rows_total:
                    new_row += 1

                for n in shoulder_notes:
                    fixed.append((new_row, n))
                    used_rows.add(new_row)
        else:
            fixed.append((row, "; ".join(notes)))
            used_rows.add(row)

    return sorted(fixed, key=lambda x: int(str(x[0]).split('-')[0]))

# -----------------------------
# –£—á—ë—Ç —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏
# -----------------------------
def fix_carriage_side(actions, method=None):
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ: —É–±–∞–≤–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏.
    –ß–∞—Å—Ç–∏—á–Ω–æ–µ:   —É–±–∞–≤–∫–∏ —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.
    –ù–µ—á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã ‚Üí –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞; —á—ë—Ç–Ω—ã–µ ‚Üí –∫–∞—Ä–µ—Ç–∫–∞ —Å–ª–µ–≤–∞.
    """
    if method is None:
        method = st.session_state.get("method", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)")

    use_std = method.startswith("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
    fixed = []

    for r, note in actions:
        note_lower = note.lower()

        # –≥–¥–µ "–ø—Ä–∞–≤–∏–ª—å–Ω–æ" –¥–µ–ª–∞—Ç—å —É–±–∞–≤–∫—É –≤ —ç—Ç–æ–º —Ä—è–¥—É
        if r % 2 == 1:  # –Ω–µ—á—ë—Ç–Ω—ã–π: –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞
            correct_side = "—Å–ø—Ä–∞–≤–∞" if use_std else "—Å–ª–µ–≤–∞"
        else:           # —á—ë—Ç–Ω—ã–π: –∫–∞—Ä–µ—Ç–∫–∞ —Å–ª–µ–≤–∞
            correct_side = "—Å–ª–µ–≤–∞" if use_std else "—Å–ø—Ä–∞–≤–∞"

        # –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –≥–¥–µ —Å—Ç–æ—Ä–æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω—ã–º —Å–ª–æ–≤–æ–º
        if (("—Å–ø—Ä–∞–≤–∞" in note_lower) or ("—Å–ª–µ–≤–∞" in note_lower)) and (correct_side not in note_lower):
            new_r = r - 1 if r > 1 else r + 1
            fixed.append((new_r, note))
        else:
            fixed.append((r, note))

    return fixed

# -----------------------------
# –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ —Ä—è–¥–∞–º
# -----------------------------
def section_tags(row, rows_to_armhole_end, neck_start_row, shoulder_start_row):
    tags = []
    if row <= rows_to_armhole_end:
        tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
    if rows_to_armhole_end < row < shoulder_start_row:
        tags.append("–ü—Ä–æ–π–º–∞")
    if neck_start_row and row >= neck_start_row:
        tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if shoulder_start_row and row >= shoulder_start_row:
        tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return " + ".join(tags) if tags else "‚Äî"
    
# -----------------------------
# –¢–∞–±–ª–∏—Ü–∞ + —Å–µ–≥–º–µ–Ω—Ç—ã
# -----------------------------
def make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    merged = defaultdict(list)
    for row, note in actions:
        if 1 <= row <= rows_count:
            merged[row].append(note)

    rows_sorted = sorted(merged.keys())
    table_rows = []
    prev = 1

    if not rows_sorted:
        seg = section_tags(1, rows_to_armhole_end, neck_start_row, shoulder_start_row)
        table_rows.append((f"1-{rows_count}", "–ü—Ä—è–º–æ", seg))
    else:
        for r in rows_sorted:
            if r > prev:
                seg = section_tags(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
                if prev == r-1:
                    table_rows.append((str(prev), "–ü—Ä—è–º–æ", seg))
                else:
                    table_rows.append((f"{prev}-{r-1}", "–ü—Ä—è–º–æ", seg))
            table_rows.append((str(r), "; ".join(merged[r]),
                               section_tags(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
            prev = r + 1

        last_action_row = max(rows_sorted)
        if prev <= last_action_row:
            seg = section_tags(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
            if prev == last_action_row:
                table_rows.append((str(prev), "–ü—Ä—è–º–æ", seg))
            else:
                table_rows.append((f"{prev}-{last_action_row}", "–ü—Ä—è–º–æ", seg))

    df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)

    if key:
        st.session_state[key] = table_rows

def parse_inputs():
    return (
        float(density_st_str.replace(",", ".")),
        float(density_row_str.replace(",", ".")),
        float(hip_cm_str.replace(",", ".")),
        float(chest_cm_str.replace(",", ".")),
        float(length_cm_str.replace(",", ".")),
        float(armhole_depth_cm_str.replace(",", ".")),
        float(neck_width_cm_str.replace(",", ".")),
        float(neck_depth_cm_str.replace(",", ".")),
        float(neck_depth_back_cm_str.replace(",", ".")),
        float(shoulder_len_cm_str.replace(",", ".")),
        float(shoulder_slope_cm_str.replace(",", "."))
    )

# -----------------------------
# –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –ø–ª–µ—á–∏
# -----------------------------
def make_table_front_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    """
    –î–µ–ª–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞ –Ω–∞:
    1) –î–æ —Ä—è–¥–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –ø–ª–µ—á–∏,
    2) –õ–ï–í–û–ï –ü–õ–ï–ß–û,
    3) –ü–†–ê–í–û–ï –ü–õ–ï–ß–û (—Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Ä—è–¥—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è).
    –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Ç–∏—Ö–æ –ø–∞–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –æ–±—ã—á–Ω—É—é make_table_full.
    """
    # –°–æ–±–∏—Ä–∞–µ–º —Ä—è–¥—ã -> —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    merged = defaultdict(list)
    for row, note in actions:
        if isinstance(row, int) and 1 <= row <= rows_count:
            merged[row].append(note)

    if not merged:
        # –ù–µ—á–µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å
        make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=key)
        return

    rows_sorted = sorted(merged.keys())

    # –ò—â–µ–º —Ä—è–¥ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã)
    split_row = None
    for r in rows_sorted:
        joined = " ; ".join(merged[r]).lower()
        if "—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏" in joined:
            split_row = r
            break

    if split_row is None:
        # –ù–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
        make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=key)
        return

    def section_tags(row):
        tags = []
        if row <= rows_to_armhole_end:
            tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
        if rows_to_armhole_end < row < shoulder_start_row:
            tags.append("–ü—Ä–æ–π–º–∞")
        if neck_start_row and row >= neck_start_row:
            tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
        if shoulder_start_row and row >= shoulder_start_row:
            tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
        return " + ".join(tags) if tags else "‚Äî"

    def push_plain_range(table_rows, a, b):
        if a > b:
            return
        if a == b:
            table_rows.append((str(a), "–ü—Ä—è–º–æ", section_tags(a)))
        else:
            table_rows.append((f"{a}-{b}", "–ü—Ä—è–º–æ", section_tags(a)))

    # ---------- 1) –î–û –†–ê–ó–î–ï–õ–ï–ù–ò–Ø ----------
    table_rows = []
    prev = 1
    for r in [x for x in rows_sorted if x < split_row]:
        if r > prev:
            push_plain_range(table_rows, prev, r - 1)
        table_rows.append((str(r), "; ".join(merged[r]), section_tags(r)))
        prev = r + 1
    if prev <= split_row - 1:
        push_plain_range(table_rows, prev, split_row - 1)

    # –†—è–¥ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞
    table_rows.append((str(split_row), "; ".join(merged[split_row]), section_tags(split_row)))

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    def left_notes(notes):
        out = []
        for n in notes:
            ln = n.lower()
            if "–ª–µ–≤–æ–µ –ø–ª–µ—á–æ" in ln or "–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ" in ln:
                out.append(n)
        return out

    def right_notes(notes, include_split=False):
        out = []
        for n in notes:
            ln = n.lower()
            if "–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ" in ln or "–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ" in ln:
                out.append(n)
            # –í –ø—Ä–∞–≤–æ–º –±–ª–æ–∫–µ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –¥—É–±–ª–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            if include_split and "—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏" in ln and n not in out:
                out.append(n)
        return out

    # ---------- 2) –õ–ï–í–û–ï –ü–õ–ï–ß–û ----------
    table_rows.append(("‚Äî –õ–ï–í–û–ï –ü–õ–ï–ß–û ‚Äî", "", ""))

    left_rows = []
    for r in [x for x in rows_sorted if x > split_row]:
        filt = left_notes(merged[r])
        if filt:
            left_rows.append((r, filt))

    prev = split_row + 1
    for r, notes in left_rows:
        if r > prev:
            push_plain_range(table_rows, prev, r - 1)
        table_rows.append((str(r), "; ".join(notes), section_tags(r)))
        prev = r + 1
    if prev <= rows_count:
        push_plain_range(table_rows, prev, rows_count)

    # ---------- 3) –ü–†–ê–í–û–ï –ü–õ–ï–ß–û ----------
    table_rows.append((f"‚Äî –ü–†–ê–í–û–ï –ü–õ–ï–ß–û ‚Äî (–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ä—è–¥—É {split_row})", "", ""))

    right_rows = []
    # –≤–∫–ª—é—á–∞–µ–º split_row, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–æ—Å, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–ª
    candidate_rows = [split_row] + [x for x in rows_sorted if x > split_row]
    for r in candidate_rows:
        filt = right_notes(merged[r], include_split=(r == split_row))
        if filt:
            right_rows.append((r, filt))

    prev = split_row
    for r, notes in right_rows:
        if r > prev:
            push_plain_range(table_rows, prev, r - 1)
        table_rows.append((str(r), "; ".join(notes), section_tags(r)))
        prev = r + 1
    if prev <= rows_count:
        push_plain_range(table_rows, prev, rows_count)

    # –†–µ–Ω–¥–µ—Ä–∏–º
    df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)

    if key:
        st.session_state[key] = table_rows
# -----------------------------
# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# -----------------------------
st.header("–ü–µ—Ä–µ–¥ / –°–ø–∏–Ω–∫–∞")


density_st_str   = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")
density_row_str  = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")

hip_cm_str       = st.text_input("–®–∏—Ä–∏–Ω–∞ –Ω–∏–∑–∞ –¥–µ—Ç–∞–ª–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
chest_cm_str     = st.text_input("–®–∏—Ä–∏–Ω–∞ –¥–µ—Ç–∞–ª–∏ –ø–æ –≥—Ä—É–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
length_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")

armhole_depth_cm_str   = st.text_input("–î–ª–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")

neck_width_cm_str      = st.text_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
neck_depth_cm_str      = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–µ—Ä–µ–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")
neck_depth_back_cm_str = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–∏–Ω–∫–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")

shoulder_len_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")
shoulder_slope_cm_str  = st.text_input("–°–∫–æ—Å –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É")

# -----------------------------
# –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —É–±–∞–≤–æ–∫
# -----------------------------
method = st.selectbox(
    "–ú–µ—Ç–æ–¥ —É–±–∞–≤–æ–∫",
    ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)", "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ (–ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ —Ä—è–¥—ã)"],
    index=0
)

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞
# -----------------------------
if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):

    inputs = [
        density_st_str, density_row_str,
        hip_cm_str, chest_cm_str, length_cm_str,
        armhole_depth_cm_str,
        neck_width_cm_str, neck_depth_cm_str, neck_depth_back_cm_str,
        shoulder_len_cm_str, shoulder_slope_cm_str
    ]

    if not all(inputs):
        st.error("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º")
        st.stop()

    try:
        (density_st, density_row, hip_cm, chest_cm, length_cm,
         armhole_depth_cm, neck_width_cm, neck_depth_cm, neck_depth_back_cm,
         shoulder_len_cm, shoulder_slope_cm) = parse_inputs()
    except:
        st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π)")
        st.stop()

    # -----------------------------
    # –ü–µ—Ä–µ—Å—á—ë—Ç –≤ –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
    # -----------------------------
    st_hip     = cm_to_st(hip_cm, density_st)
    st_chest   = cm_to_st(chest_cm, density_st)
    rows_total = cm_to_rows(length_cm, density_row)
    rows_armh  = cm_to_rows(armhole_depth_cm, density_row)

    neck_st    = cm_to_st(neck_width_cm, density_st)
    neck_rows_front  = cm_to_rows(neck_depth_cm, density_row)
    neck_rows_back   = cm_to_rows(neck_depth_back_cm, density_row)

    st_shldr   = cm_to_st(shoulder_len_cm, density_st)
    rows_slope = cm_to_rows(shoulder_slope_cm, density_row)

    st_shoulders = 2 * st_shldr + neck_st
    rows_bottom  = rows_total - rows_armh - rows_slope

    armhole_start_row   = rows_bottom + 1
    shoulder_start_row  = rows_total - rows_slope + 1
    armhole_end_row     = shoulder_start_row - 1
    rows_to_armhole_end = rows_bottom
    last_action_row     = rows_total - 1  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ = —É–±–∞–≤–∫–∞, –Ω–µ –∑–∞–∫—Ä—ã—Ç–∏–µ

    neck_start_row_front = rows_total - neck_rows_front + 1
    neck_start_row_back  = rows_total - neck_rows_back + 1

    # -----------------------------
    # üìä –°–≤–æ–¥–∫–∞
    # -----------------------------
    st.subheader("üìä –°–≤–æ–¥–∫–∞")
    st.write(f"- –ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å: **{st_hip}**")
    st.write(f"- –í—Å–µ–≥–æ —Ä—è–¥–æ–≤: **{rows_total}**")

    # -----------------------------
    # üìã –ü–µ—Ä–µ–¥
    # -----------------------------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞")
    actions = []

    # 1. –ù–∏–∑ (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —à–∏—Ä–∏–Ω–æ–π –Ω–∏–∑–∞ –∏ –≥—Ä—É–¥—å—é)
    delta_bottom = st_chest - st_hip
    if delta_bottom > 0:
        actions += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
    elif delta_bottom < 0:
        actions += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")

    # 2. –ü—Ä–æ–π–º–∞
    actions += calc_round_armhole(
        st_chest, st_shoulders, armhole_start_row, shoulder_start_row, rows_total
    )

    # 3. –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + —Å–∫–æ—Å –ø–ª–µ—á–∞ (–µ–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–ª–µ—á)
    actions += plan_neck_and_shoulders_split(
        neck_st=neck_st,
        neck_rows=neck_rows_front,
        neck_start_row=neck_start_row_front,
        st_shoulders=2 * st_shldr,   # —à–∏—Ä–∏–Ω–∞ –æ–±–æ–∏—Ö –ø–ª–µ—á!
        shoulder_start_row=shoulder_start_row,
        rows_total=rows_total,
        straight_percent=0.20        # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20% —Ä—è–¥–æ–≤ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã –ø—Ä—è–º–æ
    )

    # 4. –°–ª–∏—è–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
    actions = merge_actions(actions, rows_total)
    actions = fix_carriage_side(actions, method)

    # 5. –¢–∞–±–ª–∏—Ü–∞
    make_table_front_split(actions, rows_total, rows_bottom, neck_start_row_front, shoulder_start_row, key="table_front")
    # -----------------------------
    # üìã –°–ø–∏–Ω–∫–∞
    # -----------------------------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏")
    actions_back = []

    # 1. –ù–∏–∑ (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —à–∏—Ä–∏–Ω–æ–π –Ω–∏–∑–∞ –∏ –≥—Ä—É–¥—å—é)
    delta_bottom = st_chest - st_hip
    if delta_bottom > 0:
        actions_back += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
    elif delta_bottom < 0:
        actions_back += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")

    # 2. –ü—Ä–æ–π–º–∞
    delta_armh = st_shoulders - st_chest
    if delta_armh > 0:
        actions_back += sym_increases(delta_armh, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")
    elif delta_armh < 0:
        actions_back += sym_decreases(-delta_armh, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")

    # 3. –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–∏ (–≤–º–µ—Å—Ç–µ)
    actions_back += plan_neck_and_shoulders_split(
        neck_st=neck_st,
        neck_rows=neck_rows_back,
        neck_start_row=neck_start_row_back,
        st_shoulders=2 * st_shldr,   # <-- –≤–æ—Ç —Ç–∞–∫
        shoulder_start_row=shoulder_start_row,
        rows_total=rows_total
   )

    # 4. –°–ª–∏—è–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
    actions_back = merge_actions(actions_back, rows_total)
    actions_back = fix_carriage_side(actions_back, method)

    # 5. –¢–∞–±–ª–∏—Ü–∞
    make_table_full(actions_back, rows_total, rows_bottom, neck_start_row_back, shoulder_start_row, key="table_back")
    # -----------------------------
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è PDF
    # -----------------------------
    st.session_state.actions = actions
    st.session_state.actions_back = actions_back
    st.session_state.st_hip = st_hip
    st.session_state.rows_total = rows_total
    st.session_state.rows_bottom = rows_bottom

    # –ø–µ—Ä–µ—Å—á—ë—Ç –≤ –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
    st_hip     = cm_to_st(hip_cm, density_st)
    st_chest   = cm_to_st(chest_cm, density_st)
    rows_total = cm_to_rows(length_cm, density_row)
    rows_armh  = cm_to_rows(armhole_depth_cm, density_row)

    neck_st    = cm_to_st(neck_width_cm, density_st)
    neck_rows_front  = cm_to_rows(neck_depth_cm, density_row)
    neck_rows_back   = cm_to_rows(neck_depth_back_cm, density_row)

    st_shldr   = cm_to_st(shoulder_len_cm, density_st)
    rows_slope = cm_to_rows(shoulder_slope_cm, density_row)

    st_shoulders = 2 * st_shldr + neck_st
    rows_bottom  = rows_total - rows_armh - rows_slope

    armhole_start_row   = rows_bottom + 1
    shoulder_start_row  = rows_total - rows_slope + 1
    armhole_end_row     = shoulder_start_row - 1

    # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ ‚Äî –∑–∞–∫—Ä—ã—Ç–∏–µ; –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –¥–æ rows_total-1
    last_action_row = rows_total - 1

    # —Å—Ç–∞—Ä—Ç –≥–æ—Ä–ª–æ–≤–∏–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ last_action_row (—á—Ç–æ–±—ã –Ω–µ ¬´—Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏¬ª)
    neck_start_row_front = last_action_row - neck_rows_front + 1
    neck_start_row_back  = last_action_row - neck_rows_back + 1

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è PDF
    st.session_state.actions = actions
    st.session_state.actions_back = actions_back
    st.session_state.st_hip = st_hip
    st.session_state.rows_total = rows_total
    st.session_state.rows_bottom = rows_bottom

from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import io

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç DejaVuSans (—Ñ–∞–π–ª DejaVuSans.ttf –Ω—É–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å —Ä—è–¥–æ–º —Å App.py)
pdfmetrics.registerFont(TTFont("DejaVuSans", "DejaVuSans.ttf"))

if st.session_state.actions and st.session_state.actions_back:
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —à—Ä–∏—Ñ—Ç –≤–æ –≤—Å–µ—Ö —Å—Ç–∏–ª—è—Ö
    styles["Normal"].fontName = "DejaVuSans"
    styles["Heading1"].fontName = "DejaVuSans"
    styles["Heading2"].fontName = "DejaVuSans"

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    elements.append(Paragraph("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", styles['Heading1']))
    elements.append(Spacer(1, 12))

    # –°–≤–æ–¥–∫–∞
    summary_data = [
        ["–ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å", str(st.session_state.st_hip)],
        ["–í—Å–µ–≥–æ —Ä—è–¥–æ–≤", str(st.session_state.rows_total)],
        ["–ù–∏–∑ (–¥–æ –ø—Ä–æ–π–º—ã –∏ –ø–ª–µ—á–∞)", str(st.session_state.rows_bottom)]
    ]
    table = Table(summary_data, hAlign="LEFT")
    table.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 12))

    # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞
    elements.append(Paragraph("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞", styles['Heading2']))
    tbl_front_data = st.session_state.get("table_front", [])
    if not tbl_front_data:
        tbl_front_data = [["‚Äî", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "‚Äî"]]
    tbl_front = Table(tbl_front_data, hAlign="LEFT")
    tbl_front.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl_front)
    elements.append(Spacer(1, 12))

    # –¢–∞–±–ª–∏—Ü–∞ —Å–ø–∏–Ω–∫–∏
    elements.append(Paragraph("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏", styles['Heading2']))
    tbl_back_data = st.session_state.get("table_back", [])
    if not tbl_back_data:
        tbl_back_data = [["‚Äî", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "‚Äî"]]
    tbl_back = Table(tbl_back_data, hAlign="LEFT")
    tbl_back.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl_back)

    # –§–æ—Ä–º–∏—Ä—É–µ–º PDF
    doc.build(elements)
    buffer.seek(0)

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å PDF",
        data=buffer,
        file_name="vyazanie_instructions.pdf",
        mime="application/pdf"
    )
else:
    st.info("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ 'üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å'")
