import streamlit as st
import numpy as np
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî —Ä–∞—Å—á—ë—Ç –ø–µ—Ä–µ–¥–∞ (–µ–¥–∏–Ω—ã–π –ø–ª–∞–Ω)")

# -----------------------------
# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# -----------------------------
st.header("–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

density_st = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–ø–µ—Ç–ª–∏ –≤ 10 —Å–º)", min_value=1, value=23)
density_row = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (—Ä—è–¥—ã –≤ 10 —Å–º)", min_value=1, value=40)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ä–∫–∏
chest_cm = st.number_input("–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)", min_value=50, value=90)
hip_cm   = st.number_input("–û–±—Ö–≤–∞—Ç –Ω–∏–∑–∞ (—Å–º)",   min_value=50, value=80)
length_cm= st.number_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", min_value=30, value=55)

# –ü—Ä–æ–π–º–∞
armhole_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", min_value=10, value=23)

# –í–µ—Ä—Ö–Ω—è—è —à–∏—Ä–∏–Ω–∞ (–æ–≤–µ—Ä—Å–∞–π–∑)
shoulders_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è –ø–æ –ø–ª–µ—á–∞–º (—Å–º)", min_value=20, value=100)

# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫—Ä—É–≥–ª–∞—è, –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º)
neck_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=5, value=18)
neck_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=2, value=6)

# –ü–ª–µ—á–æ
shoulder_len_cm   = st.number_input("–î–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ—á–∞ (—Å–º)", min_value=5, value=12)
shoulder_slope_cm = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (—Å–º)", min_value=1, value=4)

st.write("---")

# -----------------------------
# –ü–µ—Ä–µ—Å—á—ë—Ç —Å–º ‚Üí –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
# -----------------------------
def cm_to_st(cm, dens_st):   return int(round((cm/10.0)*dens_st))
def cm_to_rows(cm, dens_row):return int(round((cm/10.0)*dens_row))

stitches_chest      = cm_to_st(chest_cm, density_st)
stitches_hip        = cm_to_st(hip_cm,   density_st)
stitches_shoulders  = cm_to_st(shoulders_width_cm, density_st)

rows_total          = cm_to_rows(length_cm, density_row)
rows_armhole        = cm_to_rows(armhole_depth_cm, density_row)

neck_stitches       = cm_to_st(neck_width_cm, density_st)
neck_rows           = cm_to_rows(neck_depth_cm, density_row)

stitches_shoulder   = cm_to_st(shoulder_len_cm, density_st)
rows_shoulder_slope = cm_to_rows(shoulder_slope_cm, density_row)

# —Å–ª—É–∂–µ–±–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤
rows_to_armhole_start = 1
rows_to_armhole_end   = max(0, rows_total - rows_armhole)  # –æ—Ç –Ω–∏–∑–∞ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–π–º—ã (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
shoulder_start_row    = max(1, rows_total - rows_shoulder_slope + 1)  # –ø–µ—Ä–≤—ã–π —Ä—è–¥ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞
neck_start_row        = max(1, rows_total - neck_rows + 1)            # –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã

# –ø—Ä–æ–π–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –î–û —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞
armhole_start_row = rows_to_armhole_end + 1
armhole_end_row   = max(armhole_start_row-1, min(rows_total, shoulder_start_row - 1))  # –µ—Å–ª–∏ —Å–∫–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É, –ø—Ä–æ–π–º—ã –Ω–µ –±—É–¥–µ—Ç

# –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–π–º–µ (–æ–≤–µ—Ä—Å–∞–π–∑): —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –≤–µ—Ä—Ö–Ω–µ–π —à–∏—Ä–∏–Ω–æ–π –∏ –≥—Ä—É–¥—å—é
armhole_extra_st_total = max(0, stitches_shoulders - stitches_chest)

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ä—è–¥–∞–º
# -----------------------------
def spread_rows(start_row: int, end_row: int, count: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ –Ω–µ—É–±—ã–≤–∞—é—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å row-–æ–≤ –¥–ª–∏–Ω–æ–π count
    —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –≤–Ω—É—Ç—Ä–∏ [start_row, end_row].
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ.
    """
    if count <= 0 or end_row < start_row:
        return []
    if start_row == end_row:
        return [start_row]*count
    xs = np.linspace(start_row, end_row, num=count, endpoint=True)
    rows = [int(round(x)) for x in xs]
    # —É—Å—Ç—Ä–∞–Ω—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–¥–≤–∏–≥–∞—è –≤–≤–µ—Ä—Ö –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö end_row
    used = set()
    for i in range(len(rows)):
        r = rows[i]
        while r in used and r < end_row:
            r += 1
        # –µ—Å–ª–∏ —É–ø—ë—Ä–ª–∏—Å—å –≤ –∫–æ–Ω–µ—Ü –∏ –¥—É–±–ª–∏–∫–∞—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–¥–≤–∏–Ω—É—Ç—å –Ω–∞–∑–∞–¥
        while r in used and r > start_row:
            r -= 1
        rows[i] = r
        used.add(r)
    rows.sort()
    return rows

def distribute_side_increases(start_row, end_row, total_delta, label_left, label_right):
    """
    –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø—Ä–∏–±–∞–≤–∫–∏ –ø–æ –õ–ï–í–û–ô/–ü–†–ê–í–û–ô —Å—Ç–æ—Ä–æ–Ω–µ –æ—Ç–¥–µ–ª—å–Ω–æ,
    —á—Ç–æ–±—ã —Å—É–º–º–∞—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å total_delta –ø–µ—Ç–µ–ª—å.
    """
    if total_delta <= 0 or end_row < start_row:
        return []
    left_cnt  = total_delta // 2
    right_cnt = total_delta - left_cnt
    rows_left  = spread_rows(start_row, end_row, left_cnt)
    rows_right = spread_rows(start_row, end_row, right_cnt)
    out = []
    for r in rows_left:
        out.append((r, f"+1 –ø. {label_left}"))
    for r in rows_right:
        out.append((r, f"+1 –ø. {label_right}"))
    return out

def calc_round_neckline_by_percent(total_stitches, total_rows, start_row, percentages=(60,20,10,5,5)):
    """
    –ì–æ—Ä–ª–æ–≤–∏–Ω–∞: –∫—Ä—É–ø–Ω—ã–µ —É–±–∞–≤–∫–∏ –≤ –ø–µ—Ä–≤—ã–π –ø—Ä–∏—ë–º, –∑–∞—Ç–µ–º —Ä–µ–∂–µ, —á–µ—Ä–µ–∑ —Ä—è–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—ã (row, '-X –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞').
    """
    if total_stitches <= 0 or total_rows <= 0:
        return []
    # –ø–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ —Ü–µ–ª—ã–µ –ø–µ—Ç–ª–∏
    parts = [int(round(total_stitches * p / 100.0)) for p in percentages]
    # –ø–æ–¥–ø—Ä–∞–≤–∏–º —Å—É–º–º—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    diff = total_stitches - sum(parts)
    if diff != 0:
        # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä—É–ø–Ω–µ–π—à–∏–º –ø–æ—Ä—Ü–∏—è–º
        sign = 1 if diff > 0 else -1
        for i in range(abs(diff)):
            idx = i % len(parts)
            parts[idx] += sign
    # —Ä–∞–∑–º–µ—â–∞–µ–º —É–±–∞–≤–∫–∏ "—á–µ—Ä–µ–∑ —Ä—è–¥" –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–ª–æ–∫–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    actions = []
    row = start_row
    for dec in parts:
        if dec > 0 and row <= start_row + total_rows - 1:
            actions.append((row, f"-{dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞"))
        row += 2
    # –µ—Å–ª–∏ –≤—ã–ª–µ–∑–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, –±–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
    return actions

def slope_shoulder_steps(total_stitches, start_row, end_row, steps=3):
    """
    –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∫–æ—Å –ø–ª–µ—á–∞: –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–ø–µ–Ω–µ–π —Ä–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏.
    """
    if total_stitches <= 0 or end_row < start_row or steps <= 0:
        return []
    base = total_stitches // steps
    parts = [base]*steps
    parts[-1] += (total_stitches - base*steps)  # –æ—Å—Ç–∞—Ç–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—É–ø–µ–Ω—å
    rows = spread_rows(start_row, end_row, steps)
    return [(r, f"–∑–∞–∫—Ä—ã—Ç—å {p} –ø. –ø–ª–µ—á–æ") for r, p in zip(rows, parts)]

# -----------------------------
# –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π (–µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫)
# -----------------------------
actions = []

# 1) –ù–∏–∑ ‚Üí –≥—Ä—É–¥—å: –±–æ–∫–æ–≤—ã–µ –ø—Ä–∏–±–∞–≤–∫–∏ (–Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –ø—Ä–æ–π–º–æ–π)
delta_bottom = max(0, stitches_chest - stitches_hip)
actions += distribute_side_increases(
    rows_to_armhole_start, rows_to_armhole_end,
    delta_bottom,
    label_left  = "(–±–æ–∫, –ª–µ–≤–∞—è) –æ—Ç –Ω–∏–∑–∞ –∫ –≥—Ä—É–¥–∏",
    label_right = "(–±–æ–∫, –ø—Ä–∞–≤–∞—è) –æ—Ç –Ω–∏–∑–∞ –∫ –≥—Ä—É–¥–∏",
)

# 2) –ü—Ä–æ–π–º–∞ (–æ–≤–µ—Ä—Å–∞–π–∑): –ø—Ä–∏–±–∞–≤–∫–∏ –ø–æ –±–æ–∫–∞–º, –Ω–æ –¢–û–õ–¨–ö–û –¥–æ –Ω–∞—á–∞–ª–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞
if armhole_start_row <= armhole_end_row:
    actions += distribute_side_increases(
        armhole_start_row, armhole_end_row,
        armhole_extra_st_total,
        label_left  = "(–ø—Ä–æ–π–º–∞, –ª–µ–≤–∞—è)",
        label_right = "(–ø—Ä–æ–π–º–∞, –ø—Ä–∞–≤–∞—è)",
    )

# 3) –ì–æ—Ä–ª–æ–≤–∏–Ω–∞: –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å –ø—Ä–æ–π–º–æ–π –∏/–∏–ª–∏ —Å–æ —Å–∫–æ—Å–æ–º –ø–ª–µ—á–∞
actions += calc_round_neckline_by_percent(
    neck_stitches, neck_rows, neck_start_row, percentages=(60,20,10,5,5)
)

# 4) –°–∫–æ—Å –ø–ª–µ—á–∞: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–π–º—ã
if shoulder_start_row <= rows_total:
    actions += slope_shoulder_steps(
        stitches_shoulder,
        start_row=shoulder_start_row,
        end_row=rows_total,
        steps=3
    )

# -----------------------------
# –°—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø–æ —Ä—è–¥–∞–º
# -----------------------------
merged = defaultdict(list)
for row, note in actions:
    merged[row].append(note)

# -----------------------------
# –í—ã–≤–æ–¥
# -----------------------------
st.header("–ï–¥–∏–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω (—Ä—è–¥ ‚Üí –¥–µ–π—Å—Ç–≤–∏—è)")

if not merged:
    st.info("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ä–∫–∏.")
else:
    for row in sorted(merged.keys()):
        st.write(f"‚û°Ô∏è –†—è–¥ {row}: " + ", ".join(merged[row]))

st.write("---")
st.caption(
    f"–°–µ–≥–º–µ–Ω—Ç—ã: –Ω–∏–∑‚Üí–≥—Ä—É–¥—å: 1..{rows_to_armhole_end}; "
    f"–ø—Ä–æ–π–º–∞: {armhole_start_row}..{max(armhole_start_row, armhole_end_row)}; "
    f"–≥–æ—Ä–ª–æ–≤–∏–Ω–∞: {neck_start_row}..{rows_total}; "
    f"—Å–∫–æ—Å –ø–ª–µ—á–∞: {shoulder_start_row}..{rows_total}."
)
