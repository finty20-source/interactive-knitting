import streamlit as st
import numpy as np
import pandas as pd
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á—ë—Ç (–ø–µ—Ä–µ–¥/—Å–ø–∏–Ω–∫–∞/—Ä—É–∫–∞–≤)")

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
# -----------------------------
def cm_to_st(cm, dens_st):   return int(round((cm/10.0)*dens_st))
def cm_to_rows(cm, dens_row):return int(round((cm/10.0)*dens_row))

# -----------------------------
# –†—è–¥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
# -----------------------------
def allowed_even_rows(start_row: int, end_row: int, rows_total: int):
    """
    –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã:
    - –Ω–µ —Ä–∞–Ω—å—à–µ 6,
    - –Ω–µ –ø–æ–∑–∂–µ end_row,
    - –Ω–µ –ø–æ–∑–∂–µ rows_total-2 (–Ω–∏–∫–∞–∫–∏—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ä—è–¥–∞).
    """
    if end_row is None:
        end_row = rows_total
    high = min(end_row, rows_total - 2)
    if high < 6:
        return []
    start = max(6, start_row)
    # –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —á—ë—Ç–Ω—ã–º
    if start % 2 == 1: start += 1
    if high  % 2 == 1: high  -= 1
    return list(range(start, high + 1, 2)) if start <= high else []

def split_total_into_steps(total: int, steps: int):
    """–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞–∑–±–∏—Ç—å total –Ω–∞ steps –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∞—Å—Ç–µ–π (—Å—É–º–º–∞ == total)."""
    if total <= 0 or steps <= 0:
        return []
    steps = min(steps, total)  # —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω—É–ª–µ–≤—ã—Ö —à–∞–≥–æ–≤
    base = total // steps
    rem  = total % steps
    return [base + (1 if i < rem else 0) for i in range(steps)]

# -----------------------------
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π
# -----------------------------
def sym_increases(total_add: int, start_row: int, end_row: int, rows_total: int, label: str):
    """
    –°–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ –ø—Ä–∏–±–∞–≤–∫–∏: –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞.
    total_add ‚Äî —Å—É–º–º–∞—Ä–Ω–æ –ø–æ –ø–æ–ª–æ—Ç–Ω—É (–≤—Å–µ–≥–æ –ø–µ—Ç–µ–ª—å).
    """
    if total_add <= 0:
        return []
    # —Å–∏–º–º–µ—Ç—Ä–∏—è => –æ–±—â–µ–µ —á–∏—Å–ª–æ –ø—Ä–∏–±–∞–≤–ª—è–µ–º—ã—Ö –ø–µ—Ç–µ–ª—å –ø–æ –ø–æ–ª–æ—Ç–Ω—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—ë—Ç–Ω—ã–º
    if total_add % 2 == 1:
        total_add += 1
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows:
        return []
    per_side = total_add // 2
    steps = min(len(rows), per_side)  # –º–∏–Ω–∏–º—É–º 1 –ø–µ—Ç–ª—è –Ω–∞ —à–∞–≥ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    parts = split_total_into_steps(per_side, steps)
    # —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ä—è–¥—ã –ø–æ –≤—ã—Å–æ—Ç–µ
    idxs = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen = [rows[i] for i in idxs]
    return [(r, f"+{v} –ø. {label} —Å–ª–µ–≤–∞ –∏ +{v} –ø. {label} —Å–ø—Ä–∞–≤–∞") for r, v in zip(chosen, parts)]

def slope_shoulder(total_stitches: int, start_row: int, end_row: int, rows_total: int):
    """
    –°–∫–æ—Å –ø–ª–µ—á–∞: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –í–°–ï–ú –¥–æ—Å—Ç—É–ø–Ω—ã–º —á—ë—Ç–Ω—ã–º —Ä—è–¥–∞–º; –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ ‚Äî –∫–ª–∞–¥—ë–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ.
    –î–µ–π—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞ –ö–ê–ñ–î–û–ú –ø–ª–µ—á–µ.
    """
    if total_stitches <= 0:
        return []
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows:
        return []
    steps = len(rows)
    base = total_stitches // steps
    rem  = total_stitches % steps
    actions = []
    for i, r in enumerate(rows):
        dec = base + (1 if i < rem else 0)  # "–ª–∏—à–Ω–∏–µ" –ø–µ—Ç–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
        actions.append((r, f"-{dec} –ø. –ø–ª–µ—á–æ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ)"))
    return actions

def calc_round_neckline(total_stitches: int, total_rows: int, start_row: int, rows_total: int, straight_percent: float = 0.05):
    """
    –ö–†–£–ì–õ–ê–Ø –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–±–µ–∑ –≤—ã–±–æ—Ä–∞):
    - 1-–π —à–∞–≥: 60% –ø–µ—Ç–µ–ª—å –≥–æ—Ä–ª–æ–≤–∏–Ω—ã, –≤ –ø–µ—Ä–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º —á—ë—Ç–Ω–æ–º —Ä—è–¥—É (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏).
    - –í–µ—Ä—Ö–Ω–∏–µ straight_percent*–≥–ª—É–±–∏–Ω—ã (–Ω–æ ‚â•2 —Ä—è–¥–∞) ‚Äî –í–Ø–ó–ê–¢–¨ –ü–†–Ø–ú–û (–±–µ–∑ —É–±–∞–≤–æ–∫).
    - –û—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ç–µ–ª—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —á—ë—Ç–Ω—ã–º —Ä—è–¥–∞–º –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º –∏ –≤–µ—Ä—Ö–Ω–µ–π ¬´–ø—Ä—è–º–æ–π¬ª –∑–æ–Ω–æ–π.
    - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —É–±–∞–≤–æ—á–Ω—ã—Ö —Ä—è–¥–∞ ‚â§ 1 –ø–µ—Ç–ª–∏; "–ª–∏—à–Ω–µ–µ" —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞–∑–¥–∞—ë—Ç—Å—è –≤–Ω–∏–∑ (–ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –ø–æ—Å–ª–µ 60%).
    - –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ä—è–¥–∞ –ø–æ–ª–æ—Ç–Ω–∞.
    """
    if total_stitches <= 0 or total_rows <= 0:
        return []

    # 1) 60% —Å—Ä–∞–∑—É
    first_dec = int(round(total_stitches * 0.60))
    rest = total_stitches - first_dec

    # 2) –í–µ—Ä—Ö–Ω—è—è –ø—Ä—è–º–∞—è —á–∞—Å—Ç—å: 5% –≥–ª—É–±–∏–Ω—ã (–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ä—è–¥–∞)
    straight_rows = max(2, int(round(total_rows * straight_percent)))
    neck_end_by_depth = start_row + total_rows - 1 - straight_rows
    effective_end = min(neck_end_by_depth, rows_total - 2)

    # 3) –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—è–¥—ã
    rows = allowed_even_rows(start_row, effective_end, rows_total)
    if not rows:
        return []
    actions = []

    # –ü–µ—Ä–≤—ã–π —à–∞–≥ (60%) –≤ —Å–∞–º–æ–º –Ω–∏–∂–Ω–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º —á—ë—Ç–Ω–æ–º —Ä—è–¥—É
    actions.append((rows[0], f"-{first_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))

    # –ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å
    if rest <= 0 or len(rows) == 1:
        return actions

    # 4) –û—Å—Ç–∞—Ç–æ–∫ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –æ—Å—Ç–∞–≤—à–∏–º—Å—è —Ä—è–¥–∞–º (–º–µ–∂–¥—É 60%-—à–∞–≥–æ–º –∏ –≤–µ—Ä—Ö–Ω–µ–π ¬´–ø—Ä—è–º–æ–π¬ª –∑–æ–Ω–æ–π)
    rest_rows = rows[1:]
    steps = min(len(rest_rows), rest)  # —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å ‚â•1
    # –ß—Ç–æ–±—ã –±—ã–ª–æ –∫—É–¥–∞ "—Å–≥–ª–∞–¥–∏—Ç—å" –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞, –∏–Ω–æ–≥–¥–∞ –≤—ã–≥–æ–¥–Ω–æ steps >= 3
    if steps == 2 and rest > 2 and len(rest_rows) >= 3:
        steps = 3

    idxs   = np.linspace(0, len(rest_rows)-1, num=steps, dtype=int)
    chosen = [rest_rows[i] for i in idxs]
    parts  = split_total_into_steps(rest, steps)

    # 5) –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —É–±–∞–≤–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚â§ 1 –ø–µ—Ç–ª–∏
    if steps >= 2:
        over = 0
        for i in [steps-2, steps-1]:
            if parts[i] > 1:
                over += parts[i] - 1
                parts[i] = 1
        # –†–∞–∑–¥–∞—ë–º over —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤–Ω–∏–∑ (–∫ —à–∞–≥–∞–º 0..steps-3)
        jmax = max(1, steps-2)
        j = 0
        while over > 0 and jmax > 0:
            parts[j % jmax] += 1
            over -= 1
            j += 1

    for r, v in zip(chosen, parts):
        actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ –æ—Ç–¥–µ–ª—å–Ω–æ)"))

    return actions

# -----------------------------
# –°–µ–≥–º–µ–Ω—Ç—ã/—Å–∫–ª–µ–π–∫–∞
# -----------------------------
def section_tags(row, rows_to_armhole_end, armhole_start_row, armhole_end_row, neck_start_row, shoulder_start_row):
    tags = []
    if row <= rows_to_armhole_end:
        tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
    if armhole_start_row is not None and armhole_end_row is not None:
        if armhole_start_row <= row <= armhole_end_row:
            tags.append("–ü—Ä–æ–π–º–∞")
    if neck_start_row is not None and row >= neck_start_row:
        tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if shoulder_start_row is not None and row >= shoulder_start_row:
        tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return ", ".join(tags) if tags else "‚Äî"

def make_table(actions, rows_total,
               rows_to_armhole_end=None,
               armhole_start_row=None, armhole_end_row=None,
               neck_start_row=None, shoulder_start_row=None):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–æ–≤–ø–∞–≤—à–∏–µ –ø–æ —Ä—è–¥—É, –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.
    """
    merged = defaultdict(list)
    for row, note in actions:
        merged[row].append(note)

    if not merged:
        st.info("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
        return

    rows_sorted = sorted(merged.keys())
    data = {
        "–†—è–¥": rows_sorted,
        "–î–µ–π—Å—Ç–≤–∏—è": ["; ".join(merged[r]) for r in rows_sorted],
        "–°–µ–≥–º–µ–Ω—Ç": [
            section_tags(r, rows_to_armhole_end, armhole_start_row, armhole_end_row, neck_start_row, shoulder_start_row)
            for r in rows_sorted
        ] if rows_to_armhole_end is not None else
        ["–†—É–∫–∞–≤" if r < rows_total else "–û–∫–∞—Ç (–ø—Ä—è–º–æ–π)" for r in rows_sorted]
    }
    df = pd.DataFrame(data)
    st.dataframe(df, use_container_width=True, hide_index=True)

# -----------------------------
# –í–∫–ª–∞–¥–∫–∏ UI
# -----------------------------
tab1, tab2, tab3 = st.tabs(["–ü–µ—Ä–µ–¥", "–°–ø–∏–Ω–∫–∞", "–†—É–∫–∞–≤"])

# -----------------------------
# –ü–ï–†–ï–î
# -----------------------------
with tab1:
    st.header("–ü–µ—Ä–µ–¥")
    density_st  = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", 1, 999, 23, key="dst1")
    density_row = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  1, 999, 40, key="drw1")

    chest_cm   = st.number_input("–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)", 50, 200, 90, key="ch1")
    hip_cm     = st.number_input("–û–±—Ö–≤–∞—Ç –Ω–∏–∑–∞ (—Å–º)",  50, 200, 80, key="hip1")
    length_cm  = st.number_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", 30, 120, 55, key="len1")

    armhole_depth_cm     = st.number_input("–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", 10, 40, 23, key="arm1")
    shoulders_width_cm   = st.number_input("–®–∏—Ä–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è –ø–æ –ø–ª–µ—á–∞–º (—Å–º)", 60, 160, 100, key="shw1")

    neck_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", 5, 40, 18, key="nw1")
    neck_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", 2, 40, 6, key="nd1")

    shoulder_len_cm   = st.number_input("–î–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ—á–∞ (—Å–º)", 5, 30, 12, key="sl1")
    shoulder_slope_cm = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (—Å–º)", 1, 20, 4, key="ss1")

 if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥"):
    # –ü–µ—Ä–µ—Å—á—ë—Ç—ã
    st_chest     = cm_to_st(chest_cm, density_st)
    st_hip       = cm_to_st(hip_cm,   density_st)
    st_shoulders = cm_to_st(shoulders_width_cm, density_st)

    rows_total   = cm_to_rows(length_cm, density_row)
    rows_armhole = cm_to_rows(armhole_depth_cm, density_row)

    neck_st      = cm_to_st(neck_width_cm, density_st)
    neck_rows    = cm_to_rows(neck_depth_cm, density_row)

    st_shoulder  = cm_to_st(shoulder_len_cm, density_st)
    rows_sh_slope= cm_to_rows(shoulder_slope_cm, density_row)

    # –ö–ª—é—á–µ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ —Ä—è–¥–∞–º
    rows_to_armhole_end = rows_total - rows_armhole
    shoulder_start_row  = rows_total - rows_sh_slope + 1
    neck_start_row      = rows_total - neck_rows + 1
    armhole_start_row   = rows_to_armhole_end + 1
    armhole_end_row     = rows_total   # ‚ö°Ô∏è —Ç–µ–ø–µ—Ä—å –¥–æ —Å–∞–º–æ–≥–æ –≤–µ—Ä—Ö–∞, –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º –≥–æ—Ä–ª–æ–≤–∏–Ω–æ–π

    actions = []

    # 1) –ù–∏–∑ ‚Üí –≥—Ä—É–¥—å (–æ–≤–µ—Ä—Å–∞–π–∑: —Ä–∞—Å—Ç—ë–º –∫–≤–µ—Ä—Ö—É)
    delta_bottom = st_chest - st_hip
    if delta_bottom > 0:
        actions += sym_increases(delta_bottom, 6, rows_to_armhole_end, rows_total, "–±–æ–∫")

    # 2) –ü—Ä–æ–π–º–∞ (–æ—Ç –≥—Ä—É–¥–∏ –¥–æ —à–∏—Ä–∏–Ω—ã –ø–æ –ø–ª–µ—á–∞–º)
    delta_armhole = st_shoulders - st_chest
    if delta_armhole > 0 and armhole_start_row <= armhole_end_row:
        actions += sym_increases(delta_armhole, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")

    # 3) –ì–æ—Ä–ª–æ–≤–∏–Ω–∞
    actions += calc_round_neckline(neck_st, neck_rows, neck_start_row, rows_total, straight_percent=0.05)

    # 4) –°–∫–æ—Å –ø–ª–µ—á–∞
    actions += slope_shoulder(st_shoulder, shoulder_start_row, rows_total, rows_total)

    st.subheader("üìã –ï–¥–∏–Ω—ã–π –ø–ª–∞–Ω ‚Äî –ü–ï–†–ï–î")
    make_table(actions, rows_total,
               rows_to_armhole_end, armhole_start_row, armhole_end_row,
               neck_start_row, shoulder_start_row)

        # 1) –ù–∏–∑ ‚Üí –≥—Ä—É–¥—å (–æ–≤–µ—Ä—Å–∞–π–∑: —Ä–∞—Å—Ç—ë–º –∫–≤–µ—Ä—Ö—É)
        delta_bottom = st_chest - st_hip
        actions = []
        if delta_bottom > 0:
            actions += sym_increases(delta_bottom, 6, rows_to_armhole_end, rows_total, "–±–æ–∫")

        # 2) –ü—Ä–æ–π–º–∞ (–¥–æ–±–∞–≤–∫–∞ –æ—Ç –≥—Ä—É–¥–∏ –¥–æ —à–∏—Ä–∏–Ω—ã –ø–æ –ø–ª–µ—á–∞–º)
        delta_armhole = st_shoulders - st_chest
        if delta_armhole > 0 and armhole_start_row <= armhole_end_row:
            actions += sym_increases(delta_armhole, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")

        # 3) –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (60% + –≥–∏–±–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –≤–µ—Ä—Ö 5% ‚Äî –ø—Ä—è–º–æ)
        actions += calc_round_neckline(neck_st, neck_rows, neck_start_row, rows_total, straight_percent=0.05)

        # 4) –°–∫–æ—Å –ø–ª–µ—á–∞ (–ø–ª–∞–≤–Ω–æ)
        actions += slope_shoulder(st_shoulder, shoulder_start_row, rows_total, rows_total)

        st.subheader("üìã –ï–¥–∏–Ω—ã–π –ø–ª–∞–Ω ‚Äî –ü–ï–†–ï–î")
        make_table(actions, rows_total,
                   rows_to_armhole_end, armhole_start_row, armhole_end_row,
                   neck_start_row, shoulder_start_row)

# -----------------------------
# –°–ü–ò–ù–ö–ê
# -----------------------------
with tab2:
    st.header("–°–ø–∏–Ω–∫–∞")
    density_st  = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", 1, 999, 23, key="dst2")
    density_row = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  1, 999, 40, key="drw2")

    chest_cm   = st.number_input("–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)", 50, 200, 90, key="ch2")
    hip_cm     = st.number_input("–û–±—Ö–≤–∞—Ç –Ω–∏–∑–∞ (—Å–º)",  50, 200, 80, key="hip2")
    length_cm  = st.number_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", 30, 120, 55, key="len2")

    armhole_depth_cm     = st.number_input("–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", 10, 40, 23, key="arm2")
    shoulders_width_cm   = st.number_input("–®–∏—Ä–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è –ø–æ –ø–ª–µ—á–∞–º (—Å–º)", 60, 160, 100, key="shw2")

    neck_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", 5, 40, 18, key="nw2")
    neck_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", 1, 40, 3, key="nd2")  # —Å–ø–∏–Ω–∫–∞ ‚Äî –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ

    shoulder_len_cm   = st.number_input("–î–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ—á–∞ (—Å–º)", 5, 30, 12, key="sl2")
    shoulder_slope_cm = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (—Å–º)", 1, 20, 4, key="ss2")

    if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ø–∏–Ω–∫—É"):
        st_chest     = cm_to_st(chest_cm, density_st)
        st_hip       = cm_to_st(hip_cm,   density_st)
        st_shoulders = cm_to_st(shoulders_width_cm, density_st)

        rows_total   = cm_to_rows(length_cm, density_row)
        rows_armhole = cm_to_rows(armhole_depth_cm, density_row)

        neck_st      = cm_to_st(neck_width_cm, density_st)
        neck_rows    = cm_to_rows(neck_depth_cm, density_row)

        st_shoulder  = cm_to_st(shoulder_len_cm, density_st)
        rows_sh_slope= cm_to_rows(shoulder_slope_cm, density_row)

        rows_to_armhole_end = rows_total - rows_armhole
        shoulder_start_row  = rows_total - rows_sh_slope + 1
        neck_start_row      = rows_total - neck_rows + 1
        armhole_start_row   = rows_to_armhole_end + 1
        armhole_end_row     = min(rows_total, shoulder_start_row - 1)

        actions = []
        delta_bottom = st_chest - st_hip
        if delta_bottom > 0:
            actions += sym_increases(delta_bottom, 6, rows_to_armhole_end, rows_total, "–±–æ–∫")

        delta_armhole = st_shoulders - st_chest
        if delta_armhole > 0 and armhole_start_row <= armhole_end_row:
            actions += sym_increases(delta_armhole, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")

        actions += calc_round_neckline(neck_st, neck_rows, neck_start_row, rows_total, straight_percent=0.05)
        actions += slope_shoulder(st_shoulder, shoulder_start_row, rows_total, rows_total)

        st.subheader("üìã –ï–¥–∏–Ω—ã–π –ø–ª–∞–Ω ‚Äî –°–ü–ò–ù–ö–ê")
        make_table(actions, rows_total,
                   rows_to_armhole_end, armhole_start_row, armhole_end_row,
                   neck_start_row, shoulder_start_row)

# -----------------------------
# –†–£–ö–ê–í (–æ–≤–µ—Ä—Å–∞–π–∑, –ø—Ä—è–º–æ–π –æ–∫–∞—Ç)
# -----------------------------
with tab3:
    st.header("–†—É–∫–∞–≤ (–æ–≤–µ—Ä—Å–∞–π–∑, –ø—Ä—è–º–æ–π –æ–∫–∞—Ç)")
    density_st  = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", 1, 999, 23, key="dst3")
    density_row = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  1, 999, 40, key="drw3")

    length_cm = st.number_input("–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ (—Å–º)", 20, 100, 60, key="rl")
    wrist_cm  = st.number_input("–®–∏—Ä–∏–Ω–∞ –º–∞–Ω–∂–µ—Ç—ã (—Å–º)", 10, 40, 18, key="rw")
    top_cm    = st.number_input("–®–∏—Ä–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ –≤–≤–µ—Ä—Ö—É (—Å–º)", 20, 80, 36, key="rt")

    if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä—É–∫–∞–≤"):
        st_wrist = cm_to_st(wrist_cm, density_st)
        st_top   = cm_to_st(top_cm,   density_st)
        rows_total = cm_to_rows(length_cm, density_row)

        delta = st_top - st_wrist
        actions = []
        if delta > 0:
            # –ø—Ä–∏–±–∞–≤–∫–∏ –æ—Ç –º–∞–Ω–∂–µ—Ç—ã –¥–æ –≤–µ—Ä—Ö–∞ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 —Ä—è–¥–æ–≤)
            actions += sym_increases(delta, 6, rows_total - 1, rows_total, "—Ä—É–∫–∞–≤")

        # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–ø—Ä—è–º–æ–π –æ–∫–∞—Ç) ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É
        actions.append((rows_total, "–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–µ—Ç–ª–∏ (–ø—Ä—è–º–æ–π –æ–∫–∞—Ç)"))

        st.subheader("üìã –ï–¥–∏–Ω—ã–π –ø–ª–∞–Ω ‚Äî –†–£–ö–ê–í")
        make_table(actions, rows_total)
