import streamlit as st
import numpy as np
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî —Ä–∞—Å—á—ë—Ç –ø–µ—Ä–µ–¥–∞ (–µ–¥–∏–Ω—ã–π –ø–ª–∞–Ω)")

# -----------------------------
# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# -----------------------------
st.header("–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

density_st = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–ø–µ—Ç–ª–∏ –≤ 10 —Å–º)", min_value=1, value=23)
density_row = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (—Ä—è–¥—ã –≤ 10 —Å–º)", min_value=1, value=40)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ä–∫–∏
chest_cm = st.number_input("–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)", min_value=50, value=90)
hip_cm   = st.number_input("–û–±—Ö–≤–∞—Ç –Ω–∏–∑–∞ (—Å–º)",   min_value=50, value=80)
length_cm= st.number_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", min_value=30, value=55)

# –ü—Ä–æ–π–º–∞
armhole_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", min_value=10, value=23)

# –í–µ—Ä—Ö–Ω—è—è —à–∏—Ä–∏–Ω–∞ (–æ–≤–µ—Ä—Å–∞–π–∑)
shoulders_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è –ø–æ –ø–ª–µ—á–∞–º (—Å–º)", min_value=20, value=100)

# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞
neck_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=5, value=18)
neck_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=2, value=6)

# –ü–ª–µ—á–æ
shoulder_len_cm   = st.number_input("–î–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ—á–∞ (—Å–º)", min_value=5, value=12)
shoulder_slope_cm = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (—Å–º)", min_value=1, value=4)

st.write("---")

# -----------------------------
# –ü–µ—Ä–µ—Å—á—ë—Ç —Å–º ‚Üí –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
# -----------------------------
def cm_to_st(cm, dens_st):   return int(round((cm/10.0)*dens_st))
def cm_to_rows(cm, dens_row):return int(round((cm/10.0)*dens_row))

stitches_chest      = cm_to_st(chest_cm, density_st)
stitches_hip        = cm_to_st(hip_cm,   density_st)
stitches_shoulders  = cm_to_st(shoulders_width_cm, density_st)

rows_total          = cm_to_rows(length_cm, density_row)
rows_armhole        = cm_to_rows(armhole_depth_cm, density_row)

neck_stitches       = cm_to_st(neck_width_cm, density_st)
neck_rows           = cm_to_rows(neck_depth_cm, density_row)

stitches_shoulder   = cm_to_st(shoulder_len_cm, density_st)
rows_shoulder_slope = cm_to_rows(shoulder_slope_cm, density_row)

# –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤
rows_to_armhole_end = rows_total - rows_armhole
shoulder_start_row  = max(2, rows_total - rows_shoulder_slope + 1)
neck_start_row      = max(2, rows_total - neck_rows + 1)

armhole_start_row = rows_to_armhole_end + 1
armhole_end_row   = min(rows_total, shoulder_start_row - 1)

armhole_extra_st_total = stitches_shoulders - stitches_chest
if armhole_extra_st_total % 2 == 1:
    armhole_extra_st_total += 1  # –≤—Å–µ–≥–¥–∞ —á—ë—Ç–Ω–æ–µ

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
# -----------------------------
def spread_rows(start_row: int, end_row: int, count: int):
    """–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä—è–¥–∞–º (–Ω–∞—á–∏–Ω–∞—è —Å >=2)."""
    if count <= 0 or end_row < start_row:
        return []
    start_row = max(2, start_row)
    if start_row == end_row:
        return [start_row]*count
    xs = np.linspace(start_row, end_row, num=count, endpoint=True)
    rows = sorted(set(int(round(x)) for x in xs))
    while len(rows) < count and rows[-1] < end_row:
        rows.append(rows[-1]+1)
    return rows[:count]

def distribute_side_increases(start_row, end_row, total_delta, label):
    """–ü—Ä–∏–±–∞–≤–∫–∏ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ ‚Üí –ø–∞—Ä–∞ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É."""
    if total_delta <= 0 or end_row < start_row:
        return []
    if total_delta % 2 == 1:
        total_delta += 1
    pairs = total_delta // 2
    rows = spread_rows(start_row, end_row, pairs)
    return [(r, f"+1 –ø. {label} —Å–ª–µ–≤–∞ –∏ +1 –ø. {label} —Å–ø—Ä–∞–≤–∞") for r in rows]

def calc_round_neckline(total_stitches, total_rows, start_row):
    """–ì–æ—Ä–ª–æ–≤–∏–Ω–∞: –ø–µ—Ä–≤—ã–µ 60% –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É, –ø–æ—Ç–æ–º –ø–æ –ø–ª–µ—á–∞–º –æ—Ç–¥–µ–ª—å–Ω–æ."""
    if total_stitches <= 0 or total_rows <= 0:
        return []
    percentages = [60, 20, 10, 5, 5]
    parts = [int(round(total_stitches * p / 100)) for p in percentages]
    diff = total_stitches - sum(parts)
    if diff != 0:
        parts[0] += diff
    actions = []
    row = max(2, start_row)
    # –ø–µ—Ä–≤—ã–µ 60% ‚Äî –æ–¥–Ω–∏–º –ø—Ä–∏—ë–º–æ–º
    if parts[0] > 0:
        actions.append((row, f"-{parts[0]} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))
    row += 2
    # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã ‚Üí —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É –ø–ª–µ—á—É
    for dec in parts[1:]:
        if dec > 0 and row <= start_row + total_rows - 1:
            actions.append((row, f"-{dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ –æ—Ç–¥–µ–ª—å–Ω–æ)"))
        row += 2
    return actions

def slope_shoulder_steps(total_stitches, start_row, end_row, steps=3):
    """–°–∫–æ—Å –ø–ª–µ—á–∞: —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ, –Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –ø–ª–µ—á–∞–º."""
    if total_stitches <= 0 or end_row < start_row:
        return []
    if total_stitches % 2 == 1:
        total_stitches += 1
    base = total_stitches // steps
    parts = [base]*steps
    parts[-1] += (total_stitches - base*steps)
    rows = spread_rows(start_row, end_row, steps)
    return [(r, f"–∑–∞–∫—Ä—ã—Ç—å {p} –ø. –ø–ª–µ—á–æ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ)") for r, p in zip(rows, parts)]

# -----------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞
# -----------------------------
actions = []

# –ù–∏–∑ ‚Üí –≥—Ä—É–¥—å
delta_bottom = stitches_chest - stitches_hip
if delta_bottom % 2 == 1:
    delta_bottom += 1
actions += distribute_side_increases(2, rows_to_armhole_end, delta_bottom, "–±–æ–∫")

# –ü—Ä–æ–π–º–∞
actions += distribute_side_increases(armhole_start_row, armhole_end_row, armhole_extra_st_total, "–ø—Ä–æ–π–º–∞")

# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞
actions += calc_round_neckline(neck_stitches, neck_rows, neck_start_row)

# –°–∫–æ—Å –ø–ª–µ—á–∞
actions += slope_shoulder_steps(stitches_shoulder, shoulder_start_row, rows_total, steps=3)

# -----------------------------
# –°—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø–æ —Ä—è–¥–∞–º
# -----------------------------
merged = defaultdict(list)
for row, note in actions:
    merged[row].append(note)

def get_section(row):
    tags = []
    if row <= rows_to_armhole_end:
        tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
    if armhole_start_row <= row <= armhole_end_row:
        tags.append("–ü—Ä–æ–π–º–∞")
    if row >= neck_start_row:
        tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if row >= shoulder_start_row:
        tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return ", ".join(tags) if tags else "‚Äî"

# -----------------------------
# –í—ã–≤–æ–¥
# -----------------------------
st.header("–ï–¥–∏–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω")

if not merged:
    st.info("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
else:
    current_section = ""
    for row in sorted(merged.keys()):
        section = get_section(row)
        if section != current_section:
            st.subheader(section)
            current_section = section
        st.write(f"‚û°Ô∏è –†—è–¥ {row}: " + ", ".join(merged[row]))

st.write("---")
st.success(
    f"–ò—Ç–æ–≥–æ —Ä—è–¥–æ–≤: {rows_total}. "
    f"–ì–æ—Ä–ª–æ–≤–∏–Ω–∞ —Å {neck_start_row}-–≥–æ —Ä—è–¥–∞, "
    f"—Å–∫–æ—Å –ø–ª–µ—á–∞ —Å {shoulder_start_row}-–≥–æ —Ä—è–¥–∞."
)
