import streamlit as st
import numpy as np
import pandas as pd
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á—ë—Ç –º–æ–¥–µ–ª–∏")

# -----------------------------
# –°–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# -----------------------------
if "actions" not in st.session_state:
    st.session_state.actions = []
    st.session_state.actions_back = []
    st.session_state.st_hip = 0
    st.session_state.rows_total = 0
    st.session_state.rows_bottom = 0

# -----------------------------
# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
# -----------------------------
def cm_to_st(cm, dens_st):
    return int(round((cm/10.0)*dens_st))

def cm_to_rows(cm, dens_row):
    return int(round((cm/10.0)*dens_row))
# -----------------------------
# –†—è–¥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (—Å –¥–æ—Ä–∞–±–æ—Ç–∫–æ–π)
# -----------------------------
def allowed_even_rows(start_row: int, end_row: int, rows_total: int, force_last=False):
    """–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã: ‚â•6 –∏ ‚â§ end_row.
       –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–µ–∑–∞–µ—Ç –ø–æ rows_total-2,
       –Ω–æ –µ—Å–ª–∏ force_last=True ‚Äî –∏–¥—ë—Ç –¥–æ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞ (end_row)."""
    if end_row is None:
        end_row = rows_total
    high = end_row if force_last else min(end_row, rows_total - 2)
    if high < 6:
        return []
    start = max(6, start_row)
    if start % 2 == 1: start += 1
    if high % 2 == 1: high -= 1
    return list(range(start, high + 1, 2)) if start <= high else []
def split_total_into_steps(total: int, steps: int):
    if total <= 0 or steps <= 0:
        return []
    steps = min(steps, total)
    base = total // steps
    rem  = total % steps
    return [base + (1 if i < rem else 0) for i in range(steps)]

def sym_increases(total_add, start_row, end_row, rows_total, label):
    if total_add <= 0: return []
    if total_add % 2 == 1: total_add += 1
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows: return []
    per_side = total_add // 2
    steps = min(len(rows), per_side)
    parts = split_total_into_steps(per_side, steps)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]
    return [(r, f"+{v} –ø. {label} (—Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)") for r, v in zip(chosen, parts)]

def sym_decreases(total_sub, start_row, end_row, rows_total, label):
    if total_sub <= 0: return []
    if total_sub % 2 == 1: total_sub += 1
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows: return []
    per_side = total_sub // 2
    steps = min(len(rows), per_side)
    parts = split_total_into_steps(per_side, steps)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]
    return [(r, f"-{v} –ø. {label} (—Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)") for r, v in zip(chosen, parts)]


# -----------------------------
# –°–∫–æ—Å –ø–ª–µ—á–∞
# -----------------------------
def slope_shoulder(total_stitches, start_row, end_row, rows_total):
    if total_stitches <= 0:
        return []
    # ‚ö°Ô∏è —Ç–µ–ø–µ—Ä—å –¥–æ—Ö–æ–¥–∏—Ç –¥–æ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞
    rows = allowed_even_rows(start_row, end_row, rows_total, force_last=True)
    if not rows:
        return []
    steps = len(rows)
    base = total_stitches // steps
    rem  = total_stitches % steps
    actions = []
    for i, r in enumerate(rows):
        dec = base + (1 if i < rem else 0)
        actions.append((r, f"-{dec} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ (–æ–¥–Ω–æ –ø–ª–µ—á–æ)"))
    return actions


# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫—Ä—É–≥–ª–∞—è)
# -----------------------------
def calc_round_neckline(total_stitches, total_rows, start_row, rows_total, last_row, straight_percent=0.20):
    if total_stitches <= 0 or total_rows <= 0:
        return []

    # –ø–µ—Ä–≤—ã–π —à–∞–≥ = 60% –∏ –¥–æ–≤–æ–¥–∏–º –¥–æ —á—ë—Ç–Ω–æ–≥–æ
    first_dec = int(round(total_stitches * 0.60))
    if first_dec % 2 == 1:
        first_dec += 1
    rest = total_stitches - first_dec

    # –ø—Ä—è–º—ã–µ —Ä—è–¥—ã –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ü–æ–º = % –æ—Ç –≤—Å–µ–π –≥–ª—É–±–∏–Ω—ã
    straight_rows = max(2, int(round(total_rows * straight_percent)))
    neck_end_by_depth = start_row + total_rows - 1 - straight_rows

    # ‚ö°Ô∏è –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ last_row
    effective_end = min(neck_end_by_depth, last_row)

    rows = allowed_even_rows(start_row, effective_end, rows_total, force_last=True)
    if not rows:
        return []

    actions = []
    actions.append((rows[0], f"-{first_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))

    if rest <= 0 or len(rows) == 1:
        return actions

    rest_rows = rows[1:]
    steps = min(len(rest_rows), rest)
    idxs   = np.linspace(0, len(rest_rows)-1, num=steps, dtype=int)
    chosen = [rest_rows[i] for i in idxs]
    parts  = split_total_into_steps(rest, steps)

    # –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à–∞–≥–∏ –¥–µ–ª–∞–µ–º –ø–æ 1 –ø–µ—Ç–ª–µ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
    if steps >= 2:
        over = 0
        for i in [steps-2, steps-1]:
            if parts[i] > 1:
                over += parts[i] - 1
                parts[i] = 1
        jmax = max(1, steps-2)
        j = 0
        while over > 0 and jmax > 0:
            parts[j % jmax] += 1
            over -= 1
            j += 1

    for r, v in zip(chosen, parts):
        actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ)"))

    return actions

# -----------------------------
# –ü—Ä–æ–π–º–∞ (–∫—Ä—É–≥–ª–∞—è)
# -----------------------------
def calc_round_armhole(st_chest, st_shoulders, start_row, shoulder_start_row, rows_total, depth_percent=0.05, hold_percent=0.1):
    """–°–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è –ø—Ä–æ–π–º–∞: —É–±–∞–≤–∫–∏ –≤–Ω—É—Ç—Ä—å, –ø–æ—Ç–æ–º –ø—Ä—è–º–æ, –ø–æ—Ç–æ–º –ø–ª–∞–≤–Ω—ã–π –≤—ã—Ö–æ–¥ –∫ –ø–ª–µ—á–∞–º.
       –ü—Ä–æ–π–º–∞ –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ –ø–ª–µ—á–∞."""
    if shoulder_start_row <= start_row:
        return []

    end_row = shoulder_start_row - 1
    total_rows = end_row - start_row + 1
    if total_rows <= 0:
        return []

    depth_armhole_st = int(round(st_chest * depth_percent))
    st_mid = st_chest - depth_armhole_st

    rows_smooth = int(total_rows * 0.4)       # –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å
    rows_hold   = int(total_rows * hold_percent)  # –ø—Ä—è–º–æ
    rows_rest   = total_rows - rows_smooth - rows_hold

    actions = []

    # –≠—Ç–∞–ø 1: —É–±–∞–≤–∫–∏ –≤–Ω—É—Ç—Ä—å (chest ‚Üí mid)
    delta1 = st_mid - st_chest
    if delta1 < 0:
        actions += sym_decreases(-delta1, start_row, start_row+rows_smooth, rows_total, "–ø—Ä–æ–π–º–∞")

    # –≠—Ç–∞–ø 2: –ø—Ä—è–º–æ (st_mid)

    # –≠—Ç–∞–ø 3: –ø—Ä–∏–±–∞–≤–∫–∏ –Ω–∞—Ä—É–∂—É (mid ‚Üí –ø–ª–µ—á–∏)
    delta2 = st_shoulders - st_mid
    if delta2 > 0:
        actions += sym_increases(delta2, start_row+rows_smooth+rows_hold, end_row, rows_total, "–ø—Ä–æ–π–º–∞")

    return actions

# -----------------------------
# –°–ª–∏—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (–≥–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–æ)
# -----------------------------
def merge_actions(actions, rows_total):
    """–ü—Ä–∞–≤–∏–ª–∞:
       - —É–±–∞–≤–∫–∏ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã –∏ –ø–ª–µ—á–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
       - –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ (—á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã)
       - —Å–∫–æ—Å –ø–ª–µ—á–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Ä—è–¥ –≤—ã—à–µ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ—á—ë—Ç–Ω—ã–π)"""
    merged = defaultdict(list)
    for row, note in actions:
        merged[row].append(note)

    fixed = []
    used_rows = set()

    for row in sorted(merged.keys()):
        notes = merged[row]

        if ("–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in " ".join(notes)) and ("—Å–∫–æ—Å –ø–ª–µ—á–∞" in " ".join(notes)):
            shoulder_notes = [n for n in notes if "—Å–∫–æ—Å –ø–ª–µ—á–∞" in n]
            neck_notes     = [n for n in notes if "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n]

            fixed.append((row, "; ".join(neck_notes)))
            used_rows.add(row)

            new_row = row - 1 if row > 1 else row + 1
            while new_row in used_rows and new_row < rows_total:
                new_row += 1

            for n in shoulder_notes:
                fixed.append((new_row, n))
                used_rows.add(new_row)

        else:
            fixed.append((row, "; ".join(notes)))
            used_rows.add(row)

    return fixed

# -----------------------------
# –¢–∞–±–ª–∏—Ü–∞ + —Å–µ–≥–º–µ–Ω—Ç—ã
# -----------------------------
def section_tags(row, rows_to_armhole_end, neck_start_row, shoulder_start_row):
    tags = []
    if row <= rows_to_armhole_end:
        tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
    if rows_to_armhole_end < row < shoulder_start_row:
        tags.append("–ü—Ä–æ–π–º–∞")
    if neck_start_row and row >= neck_start_row:
        tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if shoulder_start_row and row >= shoulder_start_row:
        tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return " + ".join(tags) if tags else "‚Äî"


def make_table_full(actions, rows_total, rows_to_armhole_end, neck_start_row, shoulder_start_row, last_row, key):
    merged = defaultdict(list)
    for row, note in actions:
        merged[row].append(note)

    table_rows = []
    prev = 1

    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ä—è–¥–∞–º –¥–æ –∫–æ–Ω—Ü–∞
    for r in range(1, last_row + 1):
        if r in merged:
            # —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä—è–º–æ–π —É—á–∞—Å—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            if prev < r:
                seg = section_tags(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
                if prev == r - 1:
                    table_rows.append((str(prev), "–ü—Ä—è–º–æ", seg))
                else:
                    table_rows.append((f"{prev}-{r-1}", "–ü—Ä—è–º–æ", seg))
            # –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            seg = section_tags(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)
            table_rows.append((str(r), "; ".join(merged[r]), seg))
            prev = r + 1

    # –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä—è–º—ã–µ —Ä—è–¥—ã
    if prev <= last_row:
        seg = section_tags(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
        if prev == last_row:
            table_rows.append((str(prev), "–ü—Ä—è–º–æ", seg))
        else:
            table_rows.append((f"{prev}-{last_row}", "–ü—Ä—è–º–æ", seg))

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ session_state (–¥–ª—è PDF)
    st.session_state[key] = table_rows

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)

# -----------------------------
# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# -----------------------------
st.header("–ü–µ—Ä–µ–¥ / –°–ø–∏–Ω–∫–∞")

density_st_str   = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")
density_row_str  = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")

hip_cm_str       = st.text_input("–®–∏—Ä–∏–Ω–∞ –Ω–∏–∑–∞ –¥–µ—Ç–∞–ª–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
chest_cm_str     = st.text_input("–®–∏—Ä–∏–Ω–∞ –¥–µ—Ç–∞–ª–∏ –ø–æ –≥—Ä—É–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
length_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")

armhole_depth_cm_str   = st.text_input("–î–ª–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")

neck_width_cm_str      = st.text_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
neck_depth_cm_str      = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–µ—Ä–µ–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")
neck_depth_back_cm_str = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–∏–Ω–∫–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")

shoulder_len_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")
shoulder_slope_cm_str  = st.text_input("–°–∫–æ—Å –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É")

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞
# -----------------------------
if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    # -----------------------------
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π
    # -----------------------------
    inputs = [
        density_st_str, density_row_str,
        hip_cm_str, chest_cm_str, length_cm_str,
        armhole_depth_cm_str,
        neck_width_cm_str, neck_depth_cm_str, neck_depth_back_cm_str,
        shoulder_len_cm_str, shoulder_slope_cm_str
    ]

    if not all(inputs):
        st.error("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º")
        st.stop()

    try:
        density_st         = float(density_st_str.replace(",", "."))
        density_row        = float(density_row_str.replace(",", "."))
        hip_cm             = float(hip_cm_str.replace(",", "."))
        chest_cm           = float(chest_cm_str.replace(",", "."))
        length_cm          = float(length_cm_str.replace(",", "."))
        armhole_depth_cm   = float(armhole_depth_cm_str.replace(",", "."))
        neck_width_cm      = float(neck_width_cm_str.replace(",", "."))
        neck_depth_cm      = float(neck_depth_cm_str.replace(",", "."))
        neck_depth_back_cm = float(neck_depth_back_cm_str.replace(",", "."))
        shoulder_len_cm    = float(shoulder_len_cm_str.replace(",", "."))
        shoulder_slope_cm  = float(shoulder_slope_cm_str.replace(",", "."))
    except:
        st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π)")
        st.stop()

    # -----------------------------
    # –ü–µ—Ä–µ—Å—á—ë—Ç –≤ –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
    # -----------------------------
    st_hip     = cm_to_st(hip_cm, density_st)        # –Ω–∏–∑
    st_chest   = cm_to_st(chest_cm, density_st)      # –≥—Ä—É–¥—å
    rows_total = cm_to_rows(length_cm, density_row)  # –≤—Å—è –≤—ã—Å–æ—Ç–∞ –∏–∑–¥–µ–ª–∏—è
    rows_armh  = cm_to_rows(armhole_depth_cm, density_row)  # –≥–ª—É–±–∏–Ω–∞ –ø—Ä–æ–π–º—ã

    neck_st    = cm_to_st(neck_width_cm, density_st)
    neck_rows_front  = cm_to_rows(neck_depth_cm, density_row)
    neck_rows_back   = cm_to_rows(neck_depth_back_cm, density_row)

    st_shldr   = cm_to_st(shoulder_len_cm, density_st)
    rows_slope = cm_to_rows(shoulder_slope_cm, density_row)

    st_shoulders = 2 * st_shldr + neck_st   # —Å–∫—Ä—ã—Ç–∞—è —à–∏—Ä–∏–Ω–∞ –ø–æ –ø–ª–µ—á–∞–º

    # –Ω–∏–∑ = –≤—Å—è –≤—ã—Å–æ—Ç–∞ - –ø—Ä–æ–π–º–∞ - –ø–ª–µ—á–æ
    rows_bottom = rows_total - rows_armh - rows_slope

    # –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —ç—Ç–∞–ø–æ–≤
    armhole_start_row   = rows_bottom + 1
    shoulder_start_row  = rows_total - rows_slope + 1
    armhole_end_row     = shoulder_start_row - 1

    # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –∏–∑–¥–µ–ª–∏—è (–æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–ª–µ—á–∞)
    last_row = shoulder_start_row + rows_slope - 1

    # –Ω–∞—á–∞–ª–æ –≥–æ—Ä–ª–æ–≤–∏–Ω
    neck_start_row_front = rows_total - neck_rows_front + 1
    neck_start_row_back  = rows_total - neck_rows_back + 1

    # -----------------------------
    # üìä –°–≤–æ–¥–∫–∞
    # -----------------------------
    st.subheader("üìä –°–≤–æ–¥–∫–∞")
    st.write(f"- –ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å: **{st_hip}**")
    st.write(f"- –í—Å–µ–≥–æ —Ä—è–¥–æ–≤: **{rows_total}**")

    # -----------------------------
    # üìã –ü–µ—Ä–µ–¥
    # -----------------------------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞")
    actions = []

    delta_bottom = st_chest - st_hip
    if delta_bottom > 0:
        actions += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
    elif delta_bottom < 0:
        actions += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")

    # –ø—Ä–æ–π–º–∞
    actions += calc_round_armhole(st_chest, st_shoulders, armhole_start_row, shoulder_start_row, rows_total)

    # –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (20% –ø—Ä—è–º—ã—Ö —Ä—è–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    actions += calc_round_neckline(neck_st, neck_rows_front, neck_start_row_front, rows_total, last_row)

    # –ø–ª–µ—á–æ
    actions += slope_shoulder(st_shldr, shoulder_start_row, last_row, rows_total)

    # ‚ö°Ô∏è –Ω–µ –¥–∞—Ç—å –≥–æ—Ä–ª–æ–≤–∏–Ω–µ –∏ –ø–ª–µ—á—É —Å–æ–≤–ø–∞—Å—Ç—å –≤ –æ–¥–∏–Ω —Ä—è–¥
    actions = merge_actions(actions, rows_total)

    make_table_full(actions, rows_total, rows_bottom, neck_start_row_front, shoulder_start_row, last_row, key="table_front")

    # -----------------------------
    # üìã –°–ø–∏–Ω–∫–∞
    # -----------------------------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏")
    actions_back = []

    delta_bottom = st_chest - st_hip
    if delta_bottom > 0:
        actions_back += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
    elif delta_bottom < 0:
        actions_back += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")

    # –ø—Ä–æ–π–º–∞
    actions_back += calc_round_armhole(st_chest, st_shoulders, armhole_start_row, shoulder_start_row, rows_total)

    # –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ —Å–ø–∏–Ω–∫–∏: –ø—Ä—è–º—ã–µ —Ä—è–¥—ã = 2%
    actions_back += calc_round_neckline(
        neck_st, neck_rows_back, neck_start_row_back, rows_total, last_row, straight_percent=0.02
    )

    # –ø–ª–µ—á–æ
    actions_back += slope_shoulder(st_shldr, shoulder_start_row, last_row, rows_total)

    # ‚ö°Ô∏è –Ω–µ –¥–∞—Ç—å –≥–æ—Ä–ª–æ–≤–∏–Ω–µ –∏ –ø–ª–µ—á—É —Å–æ–≤–ø–∞—Å—Ç—å
    actions_back = merge_actions(actions_back, rows_total)

    make_table_full(actions_back, rows_total, rows_bottom, neck_start_row_back, shoulder_start_row, last_row, key="table_back")
    # -----------------------------
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è PDF
    # -----------------------------
    st.session_state.actions = actions
    st.session_state.actions_back = actions_back
    st.session_state.st_hip = st_hip
    st.session_state.rows_total = rows_total
    st.session_state.rows_bottom = rows_bottom

from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import io

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç DejaVuSans (—Ñ–∞–π–ª DejaVuSans.ttf –Ω—É–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å —Ä—è–¥–æ–º —Å App.py)
pdfmetrics.registerFont(TTFont("DejaVuSans", "DejaVuSans.ttf"))

if st.session_state.actions and st.session_state.actions_back:
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —à—Ä–∏—Ñ—Ç –≤–æ –≤—Å–µ—Ö —Å—Ç–∏–ª—è—Ö
    styles["Normal"].fontName = "DejaVuSans"
    styles["Heading1"].fontName = "DejaVuSans"
    styles["Heading2"].fontName = "DejaVuSans"

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    elements.append(Paragraph("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", styles['Heading1']))
    elements.append(Spacer(1, 12))

    # –°–≤–æ–¥–∫–∞
    summary_data = [
        ["–ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å", str(st.session_state.st_hip)],
        ["–í—Å–µ–≥–æ —Ä—è–¥–æ–≤", str(st.session_state.rows_total)],
        ["–ù–∏–∑ (–¥–æ –ø—Ä–æ–π–º—ã –∏ –ø–ª–µ—á–∞)", str(st.session_state.rows_bottom)]
    ]
    table = Table(summary_data, hAlign="LEFT")
    table.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 12))

    # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞
    elements.append(Paragraph("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞", styles['Heading2']))
    tbl_front = Table(st.session_state.table_front, hAlign="LEFT")
    tbl_front.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl_front)
    elements.append(Spacer(1, 12))

    # –¢–∞–±–ª–∏—Ü–∞ —Å–ø–∏–Ω–∫–∏
    elements.append(Paragraph("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏", styles['Heading2']))
    tbl_back = Table(st.session_state.table_back, hAlign="LEFT")
    tbl_back.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl_back)

    # –§–æ—Ä–º–∏—Ä—É–µ–º PDF
    doc.build(elements)
    buffer.seek(0)

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å PDF",
        data=buffer,
        file_name="vyazanie_instructions.pdf",
        mime="application/pdf"
    )
else:
    st.info("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ 'üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å'")
