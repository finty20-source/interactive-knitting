import streamlit as st
import numpy as np
import pandas as pd
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á—ë—Ç –º–æ–¥–µ–ª–∏")

# -----------------------------
# –°–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# -----------------------------
if "actions" not in st.session_state:
    st.session_state.actions = []
    st.session_state.actions_back = []
    st.session_state.st_hip = 0
    st.session_state.rows_total = 0
    st.session_state.rows_bottom = 0

# -----------------------------
# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
# -----------------------------
def cm_to_st(cm, dens_st):
    return int(round((cm/10.0)*dens_st))

def cm_to_rows(cm, dens_row):
    return int(round((cm/10.0)*dens_row))
# -----------------------------
# –†—è–¥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (—Å –¥–æ—Ä–∞–±–æ—Ç–∫–æ–π)
# -----------------------------
def allowed_even_rows(start_row: int, end_row: int, rows_total: int, force_last=False):
    """–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã: ‚â•6 –∏ ‚â§ end_row.
       –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–µ–∑–∞–µ—Ç –ø–æ rows_total-2,
       –Ω–æ –µ—Å–ª–∏ force_last=True ‚Äî –∏–¥—ë—Ç –¥–æ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞ (end_row)."""
    if end_row is None:
        end_row = rows_total
    high = end_row if force_last else min(end_row, rows_total - 2)
    if high < 6:
        return []
    start = max(6, start_row)
    if start % 2 == 1: start += 1
    if high % 2 == 1: high -= 1
    return list(range(start, high + 1, 2)) if start <= high else []
def split_total_into_steps(total: int, steps: int):
    if total <= 0 or steps <= 0:
        return []
    steps = min(steps, total)
    base = total // steps
    rem  = total % steps
    return [base + (1 if i < rem else 0) for i in range(steps)]

def allowed_all_rows(start_row: int, end_row: int, rows_total: int):
    """
    –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä—è–¥—ã –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤—è–∑–∞–Ω–∏—è –≥–æ—Ä–ª–æ–≤–∏–Ω—ã:
    - –Ω–µ —Ä–∞–Ω—å—à–µ 6-–≥–æ,
    - –Ω–µ –ø–æ–∑–∂–µ rows_total-2 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ä—è–¥–∞ ‚Äî –ø—Ä—è–º–æ).
    - —á—ë—Ç–Ω—ã–µ –ò –Ω–µ—á—ë—Ç–Ω—ã–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.
    """
    if end_row is None:
        end_row = rows_total
    high = min(end_row, rows_total - 2)
    if high < 6:
        return []
    start = max(6, start_row)
    return list(range(start, high + 1)) if start <= high else []

def sym_increases(total_add, start_row, end_row, rows_total, label):
    if total_add <= 0: return []
    if total_add % 2 == 1: total_add += 1
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows: return []
    per_side = total_add // 2
    steps = min(len(rows), per_side)
    parts = split_total_into_steps(per_side, steps)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]
    out = []
    for r, v in zip(chosen, parts):
        out.append((r, f"+{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"+{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

def sym_decreases(total_sub, start_row, end_row, rows_total, label):
    if total_sub <= 0: return []
    if total_sub % 2 == 1: total_sub += 1
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows: return []
    per_side = total_sub // 2
    steps = min(len(rows), per_side)
    parts = split_total_into_steps(per_side, steps)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]
    out = []
    for r, v in zip(chosen, parts):
        out.append((r, f"-{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"-{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

def slope_shoulders_required(need, start_row, end_row, rows_total):
    """
    –ï—Å–ª–∏ need ‚Äî —á–∏—Å–ª–æ: –æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –æ–±–æ–∏—Ö –ø–ª–µ—á.
    –ï—Å–ª–∏ need ‚Äî –∫–æ—Ä—Ç–µ–∂ (left, right): —Å—á–∏—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ.
    –£–±–∞–≤–∫–∏ –ø–ª–µ—á–∞: –≤ —á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã; –ø—Ä–∞–≤–æ–µ —Å–º–µ—â–∞–µ–º –Ω–∞ +1 —Ä—è–¥.
    """
    if isinstance(need, tuple):
        need_left, need_right = need
    else:
        need_left = need_right = int(need)

    actions = []
    rows_even = allowed_even_rows(start_row, end_row, rows_total)
    if not rows_even:
        return actions

    def spread(total, rows):
        if total <= 0 or not rows:
            return []
        steps = min(len(rows), total)          # –ø–æ 1 –ø. –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä—è–¥—ã
        idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
        chosen = [rows[i] for i in idxs]
        return [(r, 1) for r in chosen]

    # –ª–µ–≤–æ–µ –ø–ª–µ—á–æ: —á—ë—Ç–Ω—ã–µ
    for r, v in spread(need_left, rows_even):
        actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ (–ª–µ–≤–æ–µ –ø–ª–µ—á–æ)"))

    # –ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ: —á—ë—Ç–Ω—ã–µ +1
    right_rows = [r+1 for r in rows_even if r+1 <= rows_total-2]
    for r, v in spread(need_right, right_rows):
        actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ (–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ)"))

    return actions


def plan_neck_and_shoulder(
    neck_st: int,
    neck_rows: int,
    neck_start_row: int,
    st_shldr: int,        # –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ—á–∞ –≤ –ø–µ—Ç–ª—è—Ö
    rows_slope: int,      # –≤—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –≤ —Ä—è–¥–∞—Ö
    rows_total: int,
    straight_percent: float = 0.10  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ X% –≥–ª—É–±–∏–Ω—ã –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî –ø—Ä—è–º–æ
):
    """
    –ï–î–ò–ù–´–ô –ø–ª–∞–Ω:
    1) —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã = 60% (—á—ë—Ç–Ω–æ–µ), —Å–æ–æ–±—â–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –ø–ª–µ—á–æ;
    2) —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã –ø–æ —Ä—è–¥–∞–º (—á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ, –º–æ–∂–Ω–æ –∏ —á—ë—Ç/–∏ –Ω–µ—á—ë—Ç), 
       –ù–û –≤–µ—Ä—Ö–Ω–∏–µ straight_percent –≥–ª—É–±–∏–Ω—ã ‚Äî –±–µ–∑ —É–±–∞–≤–æ–∫ –ø–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–µ;
    3) –ø–ª–µ—á–æ –¥–æ–±–∏—Ä–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ç–µ–ª—å –≤ –Ω–æ–ª—å –ø–æ —á—ë—Ç–Ω—ã–º —Ä—è–¥–∞–º –¥–æ –∫–æ–Ω—Ü–∞.
    """
    actions = []
    if neck_st <= 0 or neck_rows <= 0 or st_shldr <= 0:
        return actions

    # 1) —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    first_dec = int(round(neck_st * 0.60))
    if first_dec % 2 == 1:
        first_dec += 1
    if first_dec > neck_st:
        first_dec = neck_st if neck_st % 2 == 0 else neck_st - 1
    rest = max(0, neck_st - first_dec)

    # –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –ø–ª–µ—á–æ –ø–æ—Å–ª–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è:
    # —à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Ç–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–ª–µ—á = 2*st_shldr + –≥–æ—Ä–ª–æ–≤–∏–Ω–∞; –º—ã –∑–∞–∫—Ä—ã–ª–∏ first_dec –∏–∑ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã,
    # –∑–Ω–∞—á–∏—Ç –Ω–∞ –ü–õ–ï–ß–ò –æ—Å—Ç–∞—ë—Ç—Å—è: 2*st_shldr + (neck_st - first_dec).
    remaining_total = 2*st_shldr + (neck_st - first_dec)
    per_shoulder = remaining_total // 2

    central_row = max(6, min(neck_start_row, rows_total-2))
    actions.append((central_row,
        f"-{first_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Ü–µ–Ω—Ç—Ä, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏); "
        f"–æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –ø–ª–µ—á–æ: {per_shoulder} –ø."
    ))

    # 2) —É–±–∞–≤–∫–∏ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã –¥–æ –ø—Ä—è–º—ã—Ö —Ä—è–¥–æ–≤
    straight_rows = max(2, int(round(neck_rows * straight_percent)))
    last_neck_dec_row = min(neck_start_row + neck_rows - 1 - straight_rows, rows_total - 2)

    # —Ä—è–¥—ã –¥–ª—è –≥–æ—Ä–ª–æ–≤–∏–Ω—ã: –º–æ–∂–Ω–æ –∏ —á—ë—Ç–Ω—ã–µ, –∏ –Ω–µ—á—ë—Ç–Ω—ã–µ (—á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ)
    neck_rows_list = list(range(central_row+1, last_neck_dec_row+1))
    # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º –æ—Å—Ç–∞—Ç–æ–∫ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã rest –ø–æ 1 –ø. –Ω–∞ —Ä—è–¥, —á–µ—Ä–µ–¥—É—è –ø–ª–µ—á–∏ (–ª–µ–≤/–ø—Ä–∞–≤)
    left_used = right_used = 0
    if rest > 0 and neck_rows_list:
        steps = min(len(neck_rows_list), rest)
        idxs  = np.linspace(0, len(neck_rows_list)-1, num=steps, dtype=int)
        chosen = [neck_rows_list[i] for i in idxs]
        for k, r in enumerate(chosen):
            if k % 2 == 0:
                actions.append((r, "-1 –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–ª–µ–≤–æ–µ –ø–ª–µ—á–æ)"))
                left_used += 1
            else:
                actions.append((r, "-1 –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ)"))
                right_used += 1

    # 3) –ø–ª–µ—á–æ –¥–æ–±–∏—Ä–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –≤ –Ω–æ–ª—å
    need_left  = max(0, per_shoulder - left_used)
    need_right = max(0, per_shoulder - right_used)

    shoulder_start_row = rows_total - rows_slope + 1
    actions += slope_shoulders_required(
        (need_left, need_right),
        shoulder_start_row,
        rows_total,
        rows_total
    )

    return actions


def plan_neck_and_shoulder(
    neck_st: int,
    neck_rows: int,
    neck_start_row: int,
    st_shoulders: int,          # —à–∏—Ä–∏–Ω–∞ –ø–æ –ø–ª–µ—á–∞–º (–ø–µ—Ç–ª–∏)
    shoulder_start_row: int,
    rows_total: int,
    straight_percent: float = 0.10
):
    """
    –°—á–∏—Ç–∞–µ—Ç –≥–æ—Ä–ª–æ–≤–∏–Ω—É –∏ —Å–∫–æ—Å –ø–ª–µ—á–∞ –∫–∞–∫ –ï–î–ò–ù–´–ô –ø—Ä–æ—Ü–µ—Å—Å:
    - 60% —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ),
    - –æ—Å—Ç–∞—Ç–æ–∫ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Ä—è–¥–∞–º (—á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ),
    - –ø–æ—Å–ª–µ–¥–Ω–∏–µ straight_percent –≥–ª—É–±–∏–Ω—ã –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî –ø—Ä—è–º–æ,
    - –ø–ª–µ—á–æ –¥–æ–±–∏—Ä–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ç–µ–ª—å –¥–æ –Ω—É–ª—è.
    """
    actions = []
    if neck_st <= 0 or neck_rows <= 0:
        return actions

    # 1. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    first_dec = int(round(neck_st * 0.60))
    if first_dec % 2 == 1:
        first_dec += 1
    if first_dec > neck_st:
        first_dec = neck_st if neck_st % 2 == 0 else neck_st - 1
    rest = neck_st - first_dec

    # —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–µ—Ç–µ–ª—å –ø–æ—Å–ª–µ —Ü–µ–Ω—Ç—Ä–∞
    remaining_total = max(0, st_shoulders - first_dec)
    per_shoulder = remaining_total // 2

    central_row = max(6, neck_start_row)
    actions.append((central_row,
        f"-{first_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Ü–µ–Ω—Ç—Ä, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏); "
        f"–æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –ø–ª–µ—á–æ: {per_shoulder} –ø."
    ))

    # 2. –ì–æ—Ä–ª–æ–≤–∏–Ω–∞: –æ—Å—Ç–∞—Ç–æ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º
    straight_rows = max(2, int(round(neck_rows * straight_percent)))
    neck_end_by_depth = neck_start_row + neck_rows - 1 - straight_rows
    effective_end = min(neck_end_by_depth, rows_total - 2)
    rows = allowed_all_rows(neck_start_row, effective_end, rows_total)

    if rest > 0 and len(rows) > 1:
        rest_rows = rows[1:]
        steps = min(len(rest_rows), rest)
        idxs = np.linspace(0, len(rest_rows)-1, num=steps, dtype=int)
        chosen = [rest_rows[i] for i in idxs]
        for i, r in enumerate(chosen):
            if i % 2 == 0:
                actions.append((r, f"-1 –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–ª–µ–≤–æ–µ –ø–ª–µ—á–æ)"))
            else:
                actions.append((r, f"-1 –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ)"))

        # –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å
        left_used = (steps + 1) // 2
        right_used = steps // 2
        need_left = max(0, per_shoulder - left_used)
        need_right = max(0, per_shoulder - right_used)
    else:
        need_left = per_shoulder
        need_right = per_shoulder

    # 3. –°–∫–æ—Å –ø–ª–µ—á–∞ –¥–æ–±–∏—Ä–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫
    actions += slope_shoulders_required(
        (need_left, need_right),
        shoulder_start_row,
        rows_total,
        rows_total
    )

    return actions

# -----------------------------
# –°–∫–æ—Å –ø–ª–µ—á–∞ (–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä—è–¥–∞)
# -----------------------------
def slope_shoulders(total_stitches, start_row, end_row, rows_total):
    """
    –õ–µ–≤–æ–µ –ø–ª–µ—á–æ ‚Äî —á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã.
    –ü—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ ‚Äî —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º –Ω–∞ +1.
    """
    if total_stitches <= 0:
        return [], []

    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows:
        return [], []

    steps = len(rows)
    base = total_stitches // steps
    rem  = total_stitches % steps

    left_actions, right_actions = [], []

    for i, r in enumerate(rows):
        dec = base + (1 if i < rem else 0)
        left_actions.append((r, f"-{dec} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ (–ª–µ–≤–æ–µ –ø–ª–µ—á–æ)"))
        if r+1 <= rows_total:
            right_actions.append((r+1, f"-{dec} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ (–ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ)"))

    return left_actions, right_actions

def plan_neck_and_shoulder(neck_st, neck_rows, neck_start_row, st_shldr, rows_slope, rows_total, straight_percent=0.1):
    """
    –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≥–æ—Ä–ª–æ–≤–∏–Ω—ã + —Å–∫–æ—Å –ø–ª–µ—á–∞:
    - –ø–µ—Ä–≤—ã–π —à–∞–≥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã = 60% (—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ),
    - –¥–∞–ª—å—à–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ —É–±–∞–≤–∫–∏ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã,
    - –ø–æ—Å–ª–µ–¥–Ω–∏–µ straight_percent –≥–ª—É–±–∏–Ω—ã = –ø—Ä—è–º—ã–µ —Ä—è–¥—ã (–≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –±–µ–∑ —É–±–∞–≤–æ–∫),
    - –ø–ª–µ—á–æ –ø–ª–∞–≤–Ω–æ —É—Ö–æ–¥–∏—Ç –≤ –Ω–æ–ª—å –Ω–∞ rows_slope —Ä—è–¥–∞—Ö.
    """

    actions = []
    if neck_st <= 0 or st_shldr <= 0:
        return actions

    # ---------------------------
    # 1. –ü–µ—Ä–≤—ã–π —à–∞–≥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (60%)
    # ---------------------------
    first_dec = int(round(neck_st * 0.6))
    if first_dec % 2 == 1:
        first_dec += 1
    rest = neck_st - first_dec
    if rest < 0:
        first_dec -= 2
        rest = neck_st - first_dec

    actions.append((neck_start_row, f"-{first_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))

    # ---------------------------
    # 2. –£–±–∞–≤–∫–∏ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    # ---------------------------
    straight_rows = max(2, int(round(neck_rows * straight_percent)))
    last_neck_row = neck_start_row + neck_rows - straight_rows  # –∫–æ–Ω–µ—Ü —É–±–∞–≤–æ–∫ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã

    # –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—è–¥—ã –¥–ª—è —É–±–∞–≤–æ–∫ (—á—ë—Ç–Ω—ã–µ)
    rows = list(range(neck_start_row+2, last_neck_row+1, 2))
    parts = split_total_into_steps(rest, len(rows)) if rows else []

    for r, v in zip(rows, parts):
        actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ)"))

    # ---------------------------
    # 3. –°–∫–æ—Å –ø–ª–µ—á–∞
    # ---------------------------
    shoulder_start = rows_total - rows_slope + 1
    rows_shoulder = list(range(shoulder_start, rows_total, 2))  # —á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã
    total_shoulder = st_shldr  # –ø–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ —É–π—Ç–∏ –≤ –Ω–æ–ª—å

    parts_shoulder = split_total_into_steps(total_shoulder, len(rows_shoulder))

    for r, v in zip(rows_shoulder, parts_shoulder):
        actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ)"))

    return actions

# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫—Ä—É–≥–ª–∞—è)
# -----------------------------
def calc_round_neckline(total_stitches, total_rows, start_row, rows_total, straight_spec=0.05):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è:
    - 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: straight_spec —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä—è–º—ã—Ö —Ä—è–¥–æ–≤ –≤–≤–µ—Ä—Ö—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.05).
    - 5 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: straight_spec –º–æ–∂–µ—Ç –±—ã—Ç—å last_action_row (int) ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥, –≥–¥–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —É–±–∞–≤–∫–∏.
      –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª –≤–æ–∑—å–º—ë–º min(last_action_row, rows_total-2).

    –ü—Ä–∞–≤–∏–ª–∞:
    - –ø–µ—Ä–≤—ã–π —à–∞–≥ = 60% –ø–µ—Ç–µ–ª—å (–¥–æ–≤–æ–¥–∏–º –¥–æ —á—ë—Ç–Ω–æ–≥–æ),
    - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ä—è–¥–∞ –ø–æ–ª–æ—Ç–Ω–∞ ‚Äî –ø—Ä—è–º–æ,
    - –º–∏–Ω–∏–º—É–º 2 –≤–µ—Ä—Ö–Ω–∏—Ö —Ä—è–¥–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî –ø—Ä—è–º–æ,
    - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —É–±–∞–≤–æ—á–Ω—ã—Ö —à–∞–≥–∞ –ø–æ –≥–æ—Ä–ª–æ–≤–∏–Ω–µ ‚â§ 1 –ø–µ—Ç–ª–∏,
    - –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –≤ —á—ë—Ç–Ω—ã—Ö —Ä—è–¥–∞—Ö, –Ω–∞—á–∏–Ω–∞—è –Ω–µ —Ä–∞–Ω—å—à–µ 6-–≥–æ —Ä—è–¥–∞.
    """
    if total_stitches <= 0 or total_rows <= 0:
        return []

    # 1) –ø–µ—Ä–≤—ã–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —à–∞–≥ 60% –∏ –î–û–í–û–î–ò–ú –î–û –ß–Å–¢–ù–û–ì–û
    first_dec = int(round(total_stitches * 0.60))
    if first_dec % 2 == 1:
        first_dec += 1
    rest = total_stitches - first_dec
    if rest < 0:
        # –µ—Å–ª–∏ ¬´–ø–µ—Ä–µ–±—Ä–∞–ª–∏¬ª –∏–∑-–∑–∞ —á—ë—Ç–Ω–æ—Å—Ç–∏, –æ—Ç–∫–∞—Ç–∏–º –Ω–∞ 2 –ø–µ—Ç–ª–∏
        first_dec -= 2
        rest = total_stitches - first_dec
        if first_dec <= 0:
            first_dec = max(2, total_stitches - 2)
            rest = total_stitches - first_dec

    # 2) –≤–µ—Ä—Ö–Ω–∏–µ –ø—Ä—è–º—ã–µ —Ä—è–¥—ã
    if isinstance(straight_spec, (int, np.integer)):
        # –ø–µ—Ä–µ–¥–∞–ª–∏ last_action_row
        last_action_row = int(straight_spec)
        # –¥–∞–¥–∏–º –º–∏–Ω–∏–º—É–º 2 –ø—Ä—è–º—ã—Ö –≤–µ—Ä—Ö–Ω–∏—Ö —Ä—è–¥–∞ –ø–æ –≥–ª—É–±–∏–Ω–µ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
        straight_rows = max(2, int(round(total_rows * 0.05)))
        neck_end_by_depth = start_row + total_rows - 1 - straight_rows
        effective_end = min(neck_end_by_depth, last_action_row, rows_total - 2)
    else:
        # –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç (–∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.05)
        straight_percent = float(straight_spec)
        straight_rows = max(2, int(round(total_rows * straight_percent)))
        neck_end_by_depth = start_row + total_rows - 1 - straight_rows
        effective_end = min(neck_end_by_depth, rows_total - 2)

    # 3) –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã
    rows = allowed_even_rows(start_row, effective_end, rows_total)
    if not rows:
        return []

    actions = []
    # –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏
    actions.append((rows[0], f"-{first_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))

    # 4) –æ—Å—Ç–∞—Ç–æ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º
    if rest <= 0 or len(rows) == 1:
        return actions

    rest_rows = rows[1:]
    steps = min(len(rest_rows), rest)
    # —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ç–æ–ª—å–∫–æ 2 —à–∞–≥–æ–≤ —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏ ‚Äî –µ—Å–ª–∏ –º–æ–∂–µ–º, –¥–µ–ª–∞–µ–º 3
    if steps == 2 and rest > 2 and len(rest_rows) >= 3:
        steps = 3

    idxs   = np.linspace(0, len(rest_rows)-1, num=steps, dtype=int)
    chosen = [rest_rows[i] for i in idxs]
    parts  = split_total_into_steps(rest, steps)

    # 5) —Å–≥–ª–∞–¥–∏–º –≤–µ—Ä—Ö: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —à–∞–≥–∞ ‚â§ 1 –ø–µ—Ç–ª–∏, ¬´–ª–∏—à–Ω–µ–µ¬ª –æ—Ç–¥–∞—ë–º –≤–Ω–∏–∑
    if steps >= 2:
        over = 0
        for i in [steps-2, steps-1]:
            if parts[i] > 1:
                over += parts[i] - 1
                parts[i] = 1
        jmax = max(1, steps-2)
        j = 0
        while over > 0 and jmax > 0:
            parts[j % jmax] += 1
            over -= 1
            j += 1

    for r, v in zip(chosen, parts):
        actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ)"))

    return actions

# -----------------------------
# –ü—Ä–æ–π–º–∞ (–∫—Ä—É–≥–ª–∞—è)
# -----------------------------
def calc_round_armhole(st_chest, st_shoulders, start_row, shoulder_start_row, rows_total, depth_percent=0.05, hold_percent=0.1):
    """–°–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è –ø—Ä–æ–π–º–∞: —É–±–∞–≤–∫–∏ –≤–Ω—É—Ç—Ä—å, –ø–æ—Ç–æ–º –ø—Ä—è–º–æ, –ø–æ—Ç–æ–º –ø–ª–∞–≤–Ω—ã–π –≤—ã—Ö–æ–¥ –∫ –ø–ª–µ—á–∞–º.
       –ü—Ä–æ–π–º–∞ –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ –ø–ª–µ—á–∞."""
    if shoulder_start_row <= start_row:
        return []

    end_row = shoulder_start_row - 1
    total_rows = end_row - start_row + 1
    if total_rows <= 0:
        return []

    depth_armhole_st = int(round(st_chest * depth_percent))
    st_mid = st_chest - depth_armhole_st

    rows_smooth = int(total_rows * 0.4)       # –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å
    rows_hold   = int(total_rows * hold_percent)  # –ø—Ä—è–º–æ
    rows_rest   = total_rows - rows_smooth - rows_hold

    actions = []

    # –≠—Ç–∞–ø 1: —É–±–∞–≤–∫–∏ –≤–Ω—É—Ç—Ä—å (chest ‚Üí mid)
    delta1 = st_mid - st_chest
    if delta1 < 0:
        actions += sym_decreases(-delta1, start_row, start_row+rows_smooth, rows_total, "–ø—Ä–æ–π–º–∞")

    # –≠—Ç–∞–ø 2: –ø—Ä—è–º–æ (st_mid)

    # –≠—Ç–∞–ø 3: –ø—Ä–∏–±–∞–≤–∫–∏ –Ω–∞—Ä—É–∂—É (mid ‚Üí –ø–ª–µ—á–∏)
    delta2 = st_shoulders - st_mid
    if delta2 > 0:
        actions += sym_increases(delta2, start_row+rows_smooth+rows_hold, end_row, rows_total, "–ø—Ä–æ–π–º–∞")

    return actions

# -----------------------------
# –°–ª–∏—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (–≥–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–æ)
# -----------------------------
def merge_actions(actions, rows_total):
    """
    –ü—Ä–∞–≤–∏–ª–∞:
    - –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –∏ —Å–∫–æ—Å –ø–ª–µ—á–∞ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –°–ê–ú–û–ú –ü–ï–†–í–û–ú —Ä—è–¥—É –≥–æ—Ä–ª–æ–≤–∏–Ω—ã,
      –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –º—ã –∏—Ö —Ä–∞–∑–Ω–æ—Å–∏–º.
    - –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Å–≤–æ—ë–º —Ä—è–¥—É.
    - —Å–∫–æ—Å –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ +1 —Ä—è–¥ (–µ—Å–ª–∏ –∑–∞–Ω—è—Ç ‚Äî –∏—â–µ–º –¥–∞–ª—å—à–µ).
    """
    merged = defaultdict(list)
    for row, note in actions:
        merged[row].append(note)

    fixed = []
    used_rows = set()
    first_neck_row = None  # –∑–∞–ø–æ–º–Ω–∏–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã

    # —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    for row in sorted(merged.keys()):
        if any("–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n for n in merged[row]):
            first_neck_row = row
            break

    for row in sorted(merged.keys()):
        notes = merged[row]

        if ("–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in " ".join(notes)) and ("—Å–∫–æ—Å –ø–ª–µ—á–∞" in " ".join(notes)):
            # –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–º–µ—Å—Ç–µ
            if row == first_neck_row:
                fixed.append((row, "; ".join(notes)))
                used_rows.add(row)
            else:
                # —Ä–∞–∑–¥–µ–ª—è–µ–º: –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –≤ —Å–≤–æ—ë–º —Ä—è–¥—É, —Å–∫–æ—Å –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤—ã—à–µ
                shoulder_notes = [n for n in notes if "—Å–∫–æ—Å –ø–ª–µ—á–∞" in n]
                neck_notes     = [n for n in notes if "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n]

                fixed.append((row, "; ".join(neck_notes)))
                used_rows.add(row)

                new_row = row + 1
                while new_row in used_rows and new_row < rows_total:
                    new_row += 1

                for n in shoulder_notes:
                    fixed.append((new_row, n))
                    used_rows.add(new_row)
        else:
            fixed.append((row, "; ".join(notes)))
            used_rows.add(row)

    return sorted(fixed, key=lambda x: int(str(x[0]).split('-')[0]))

# -----------------------------
# –£—á—ë—Ç —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏
# -----------------------------
def fix_carriage_side(actions, method=None):
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ: —É–±–∞–≤–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏.
    –ß–∞—Å—Ç–∏—á–Ω–æ–µ:   —É–±–∞–≤–∫–∏ —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.
    –ù–µ—á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã ‚Üí –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞; —á—ë—Ç–Ω—ã–µ ‚Üí –∫–∞—Ä–µ—Ç–∫–∞ —Å–ª–µ–≤–∞.
    """
    if method is None:
        method = st.session_state.get("method", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)")

    use_std = method.startswith("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
    fixed = []

    for r, note in actions:
        note_lower = note.lower()

        # –≥–¥–µ "–ø—Ä–∞–≤–∏–ª—å–Ω–æ" –¥–µ–ª–∞—Ç—å —É–±–∞–≤–∫—É –≤ —ç—Ç–æ–º —Ä—è–¥—É
        if r % 2 == 1:  # –Ω–µ—á—ë—Ç–Ω—ã–π: –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞
            correct_side = "—Å–ø—Ä–∞–≤–∞" if use_std else "—Å–ª–µ–≤–∞"
        else:           # —á—ë—Ç–Ω—ã–π: –∫–∞—Ä–µ—Ç–∫–∞ —Å–ª–µ–≤–∞
            correct_side = "—Å–ª–µ–≤–∞" if use_std else "—Å–ø—Ä–∞–≤–∞"

        # –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –≥–¥–µ —Å—Ç–æ—Ä–æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω—ã–º —Å–ª–æ–≤–æ–º
        if (("—Å–ø—Ä–∞–≤–∞" in note_lower) or ("—Å–ª–µ–≤–∞" in note_lower)) and (correct_side not in note_lower):
            new_r = r - 1 if r > 1 else r + 1
            fixed.append((new_r, note))
        else:
            fixed.append((r, note))

    return fixed

# -----------------------------
# –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ —Ä—è–¥–∞–º
# -----------------------------
def section_tags(row, rows_to_armhole_end, neck_start_row, shoulder_start_row):
    tags = []
    if row <= rows_to_armhole_end:
        tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
    if rows_to_armhole_end < row < shoulder_start_row:
        tags.append("–ü—Ä–æ–π–º–∞")
    if neck_start_row and row >= neck_start_row:
        tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if shoulder_start_row and row >= shoulder_start_row:
        tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return " + ".join(tags) if tags else "‚Äî"
    
# -----------------------------
# –¢–∞–±–ª–∏—Ü–∞ + —Å–µ–≥–º–µ–Ω—Ç—ã
# -----------------------------
def make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    merged = defaultdict(list)
    for row, note in actions:
        if 1 <= row <= rows_count:
            merged[row].append(note)

    rows_sorted = sorted(merged.keys())
    table_rows = []
    prev = 1

    if not rows_sorted:
        seg = section_tags(1, rows_to_armhole_end, neck_start_row, shoulder_start_row)
        table_rows.append((f"1-{rows_count}", "–ü—Ä—è–º–æ", seg))
    else:
        for r in rows_sorted:
            if r > prev:
                seg = section_tags(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
                if prev == r-1:
                    table_rows.append((str(prev), "–ü—Ä—è–º–æ", seg))
                else:
                    table_rows.append((f"{prev}-{r-1}", "–ü—Ä—è–º–æ", seg))
            table_rows.append((str(r), "; ".join(merged[r]),
                               section_tags(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
            prev = r + 1

        last_action_row = max(rows_sorted)
        if prev <= last_action_row:
            seg = section_tags(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
            if prev == last_action_row:
                table_rows.append((str(prev), "–ü—Ä—è–º–æ", seg))
            else:
                table_rows.append((f"{prev}-{last_action_row}", "–ü—Ä—è–º–æ", seg))

    df = pd.DataFrame(table_rows, columns=["–†—è–¥—ã", "–î–µ–π—Å—Ç–≤–∏—è", "–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)

    if key:
        st.session_state[key] = table_rows

def parse_inputs():
    return (
        float(density_st_str.replace(",", ".")),
        float(density_row_str.replace(",", ".")),
        float(hip_cm_str.replace(",", ".")),
        float(chest_cm_str.replace(",", ".")),
        float(length_cm_str.replace(",", ".")),
        float(armhole_depth_cm_str.replace(",", ".")),
        float(neck_width_cm_str.replace(",", ".")),
        float(neck_depth_cm_str.replace(",", ".")),
        float(neck_depth_back_cm_str.replace(",", ".")),
        float(shoulder_len_cm_str.replace(",", ".")),
        float(shoulder_slope_cm_str.replace(",", "."))
    )

# -----------------------------
# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# -----------------------------
st.header("–ü–µ—Ä–µ–¥ / –°–ø–∏–Ω–∫–∞")


density_st_str   = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")
density_row_str  = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")

hip_cm_str       = st.text_input("–®–∏—Ä–∏–Ω–∞ –Ω–∏–∑–∞ –¥–µ—Ç–∞–ª–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
chest_cm_str     = st.text_input("–®–∏—Ä–∏–Ω–∞ –¥–µ—Ç–∞–ª–∏ –ø–æ –≥—Ä—É–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
length_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")

armhole_depth_cm_str   = st.text_input("–î–ª–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")

neck_width_cm_str      = st.text_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
neck_depth_cm_str      = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–µ—Ä–µ–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")
neck_depth_back_cm_str = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–∏–Ω–∫–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")

shoulder_len_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")
shoulder_slope_cm_str  = st.text_input("–°–∫–æ—Å –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É")

# -----------------------------
# –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —É–±–∞–≤–æ–∫
# -----------------------------
method = st.selectbox(
    "–ú–µ—Ç–æ–¥ —É–±–∞–≤–æ–∫",
    ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)", "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ (–ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ —Ä—è–¥—ã)"],
    index=0
)

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞
# -----------------------------
if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):

    inputs = [
        density_st_str, density_row_str,
        hip_cm_str, chest_cm_str, length_cm_str,
        armhole_depth_cm_str,
        neck_width_cm_str, neck_depth_cm_str, neck_depth_back_cm_str,
        shoulder_len_cm_str, shoulder_slope_cm_str
    ]

    if not all(inputs):
        st.error("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º")
        st.stop()

    try:
        (density_st, density_row, hip_cm, chest_cm, length_cm,
         armhole_depth_cm, neck_width_cm, neck_depth_cm, neck_depth_back_cm,
         shoulder_len_cm, shoulder_slope_cm) = parse_inputs()
    except:
        st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π)")
        st.stop()

    # -----------------------------
    # –ü–µ—Ä–µ—Å—á—ë—Ç –≤ –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
    # -----------------------------
    st_hip     = cm_to_st(hip_cm, density_st)
    st_chest   = cm_to_st(chest_cm, density_st)
    rows_total = cm_to_rows(length_cm, density_row)
    rows_armh  = cm_to_rows(armhole_depth_cm, density_row)

    neck_st    = cm_to_st(neck_width_cm, density_st)
    neck_rows_front  = cm_to_rows(neck_depth_cm, density_row)
    neck_rows_back   = cm_to_rows(neck_depth_back_cm, density_row)

    st_shldr   = cm_to_st(shoulder_len_cm, density_st)
    rows_slope = cm_to_rows(shoulder_slope_cm, density_row)

    st_shoulders = 2 * st_shldr + neck_st
    rows_bottom  = rows_total - rows_armh - rows_slope

    armhole_start_row   = rows_bottom + 1
    shoulder_start_row  = rows_total - rows_slope + 1
    armhole_end_row     = shoulder_start_row - 1
    rows_to_armhole_end = rows_bottom
    last_action_row     = rows_total - 1  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ = —É–±–∞–≤–∫–∞, –Ω–µ –∑–∞–∫—Ä—ã—Ç–∏–µ

    neck_start_row_front = rows_total - neck_rows_front + 1
    neck_start_row_back  = rows_total - neck_rows_back + 1

    # -----------------------------
    # üìä –°–≤–æ–¥–∫–∞
    # -----------------------------
    st.subheader("üìä –°–≤–æ–¥–∫–∞")
    st.write(f"- –ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å: **{st_hip}**")
    st.write(f"- –í—Å–µ–≥–æ —Ä—è–¥–æ–≤: **{rows_total}**")

# -----------------------------
# üìã –ü–µ—Ä–µ–¥
# -----------------------------
st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞")
actions = []

# 1) –ù–∏–∑: —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –Ω–∏–∑–æ–º –∏ ¬´–≥—Ä—É–¥—å—é¬ª (—Ç–µ—Ö–Ω. —à–∏—Ä–∏–Ω–∞ = st_shoulders)
delta_bottom = (2*st_shldr + neck_st) - st_hip
if delta_bottom > 0:
    actions += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
elif delta_bottom < 0:
    actions += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")

# 2) –ü—Ä–æ–π–º–∞ (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
actions += calc_round_armhole(
    st_chest,            # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å ¬´—Å–∫—Ä—ã—Ç—É—é –≥—Ä—É–¥—å¬ª, –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å 2*st_shldr+neck_st
    2*st_shldr + neck_st,
    armhole_start_row,
    shoulder_start_row,
    rows_total
)

# 3) –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + —Å–∫–æ—Å –ø–ª–µ—á–∞ (–µ–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞)
actions += plan_neck_and_shoulder(
    neck_st=neck_st,
    neck_rows=neck_rows_front,
    neck_start_row=neck_start_row_front,
    st_shldr=st_shldr,
    rows_slope=rows_slope,
    rows_total=rows_total,
    straight_percent=0.10
)

# 4) –°–ª–∏—è–Ω–∏–µ, —Å—Ç–æ—Ä–æ–Ω–∞ –∫–∞—Ä–µ—Ç–∫–∏, –≤—ã–≤–æ–¥
actions = merge_actions(actions, rows_total)
actions = fix_carriage_side(actions, method)
make_table_full(actions, rows_total, rows_bottom, neck_start_row_front, shoulder_start_row, key="table_front")
    # -----------------------------
# üìã –°–ø–∏–Ω–∫–∞
# -----------------------------
st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏")
actions_back = []

# 1) –ù–∏–∑
delta_bottom = (2*st_shldr + neck_st) - st_hip
if delta_bottom > 0:
    actions_back += sym_increases(delta_bottom, 6, rows_to_armhole_end, rows_total, "–±–æ–∫")
elif delta_bottom < 0:
    actions_back += sym_decreases(-delta_bottom, 6, rows_to_armhole_end, rows_total, "–±–æ–∫")

# 2) –ü—Ä–æ–π–º–∞
delta_armh = (2*st_shldr + neck_st) - st_chest
armhole_start_row = rows_to_armhole_end + 1
armhole_end_row   = shoulder_start_row - 1
if delta_armh > 0:
    actions_back += sym_increases(delta_armh, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")
elif delta_armh < 0:
    actions_back += sym_decreases(-delta_armh, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")

# 3) –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + —Å–∫–æ—Å –ø–ª–µ—á–∞ (–µ–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞)
actions_back += plan_neck_and_shoulder(
    neck_st=neck_st,
    neck_rows=neck_rows_back,
    neck_start_row=neck_start_row_back,
    st_shldr=st_shldr,
    rows_slope=rows_slope,
    rows_total=rows_total,
    straight_percent=0.10
)

# 4) –°–ª–∏—è–Ω–∏–µ –∏ –≤—ã–≤–æ–¥
actions_back = merge_actions(actions_back, rows_total)
actions_back = fix_carriage_side(actions_back, method)
make_table_full(actions_back, rows_total, rows_to_armhole_end, neck_start_row_back, shoulder_start_row, key="table_back")
    # -----------------------------
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è PDF
    # -----------------------------
st.session_state.actions = actions
st.session_state.actions_back = actions_back
st.session_state.st_hip = st_hip
st.session_state.rows_total = rows_total
st.session_state.rows_bottom = rows_bottom

    # –ø–µ—Ä–µ—Å—á—ë—Ç –≤ –ø–µ—Ç–ª–∏/—Ä—è–¥—ã
    st_hip     = cm_to_st(hip_cm, density_st)
    st_chest   = cm_to_st(chest_cm, density_st)
    rows_total = cm_to_rows(length_cm, density_row)
    rows_armh  = cm_to_rows(armhole_depth_cm, density_row)

    neck_st    = cm_to_st(neck_width_cm, density_st)
    neck_rows_front  = cm_to_rows(neck_depth_cm, density_row)
    neck_rows_back   = cm_to_rows(neck_depth_back_cm, density_row)

    st_shldr   = cm_to_st(shoulder_len_cm, density_st)
    rows_slope = cm_to_rows(shoulder_slope_cm, density_row)

    st_shoulders = 2 * st_shldr + neck_st
    rows_bottom  = rows_total - rows_armh - rows_slope

    armhole_start_row   = rows_bottom + 1
    shoulder_start_row  = rows_total - rows_slope + 1
    armhole_end_row     = shoulder_start_row - 1

    # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ ‚Äî –∑–∞–∫—Ä—ã—Ç–∏–µ; –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –¥–æ rows_total-1
    last_action_row = rows_total - 1

    # —Å—Ç–∞—Ä—Ç –≥–æ—Ä–ª–æ–≤–∏–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ last_action_row (—á—Ç–æ–±—ã –Ω–µ ¬´—Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏¬ª)
    neck_start_row_front = last_action_row - neck_rows_front + 1
    neck_start_row_back  = last_action_row - neck_rows_back + 1

# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è PDF
st.session_state.actions = actions
st.session_state.actions_back = actions_back
st.session_state.st_hip = st_hip
st.session_state.rows_total = rows_total
st.session_state.rows_bottom = rows_bottom

from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import io

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç DejaVuSans (—Ñ–∞–π–ª DejaVuSans.ttf –Ω—É–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å —Ä—è–¥–æ–º —Å App.py)
pdfmetrics.registerFont(TTFont("DejaVuSans", "DejaVuSans.ttf"))

if st.session_state.actions and st.session_state.actions_back:
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —à—Ä–∏—Ñ—Ç –≤–æ –≤—Å–µ—Ö —Å—Ç–∏–ª—è—Ö
    styles["Normal"].fontName = "DejaVuSans"
    styles["Heading1"].fontName = "DejaVuSans"
    styles["Heading2"].fontName = "DejaVuSans"

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    elements.append(Paragraph("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", styles['Heading1']))
    elements.append(Spacer(1, 12))

    # –°–≤–æ–¥–∫–∞
    summary_data = [
        ["–ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å", str(st.session_state.st_hip)],
        ["–í—Å–µ–≥–æ —Ä—è–¥–æ–≤", str(st.session_state.rows_total)],
        ["–ù–∏–∑ (–¥–æ –ø—Ä–æ–π–º—ã –∏ –ø–ª–µ—á–∞)", str(st.session_state.rows_bottom)]
    ]
    table = Table(summary_data, hAlign="LEFT")
    table.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 12))

    # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞
    elements.append(Paragraph("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞", styles['Heading2']))
    tbl_front = Table(st.session_state.table_front, hAlign="LEFT")
    tbl_front.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl_front)
    elements.append(Spacer(1, 12))

    # –¢–∞–±–ª–∏—Ü–∞ —Å–ø–∏–Ω–∫–∏
    elements.append(Paragraph("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏", styles['Heading2']))
    tbl_back = Table(st.session_state.table_back, hAlign="LEFT")
    tbl_back.setStyle(TableStyle([
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
    ]))
    elements.append(tbl_back)

    # –§–æ—Ä–º–∏—Ä—É–µ–º PDF
    doc.build(elements)
    buffer.seek(0)

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å PDF",
        data=buffer,
        file_name="vyazanie_instructions.pdf",
        mime="application/pdf"
    )
else:
    st.info("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ 'üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å'")
