import streamlit as st
import numpy as np
import pandas as pd
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á—ë—Ç –º–æ–¥–µ–ª–∏")

# -----------------------------
# –°–µ—Å—Å–∏—è
# -----------------------------
if "actions" not in st.session_state:
    st.session_state.actions = []
    st.session_state.actions_back = []
    st.session_state.st_hip = 0
    st.session_state.rows_total = 0
    st.session_state.rows_bottom = 0
    st.session_state.table_front = []
    st.session_state.table_back = []

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -----------------------------
def cm_to_st(cm, dens_st):  return int(round((cm/10.0)*dens_st))
def cm_to_rows(cm, dens_r): return int(round((cm/10.0)*dens_r))

def split_total_into_steps(total: int, steps: int):
    if total <= 0 or steps <= 0: return []
    base = total // steps
    rem  = total % steps
    return [base + (1 if i < rem else 0) for i in range(steps)]

def allowed_rows_any(start_row, end_row, rows_total, min_row=6, cut_last_two=True):
    if end_row is None: end_row = rows_total
    high = min(end_row, rows_total - 2) if cut_last_two else end_row
    low  = max(min_row, start_row)
    return list(range(low, high+1)) if low <= high else []

def allowed_even_rows(start_row, end_row, rows_total, min_row=6, cut_last_two=True):
    rows = allowed_rows_any(start_row, end_row, rows_total, min_row, cut_last_two)
    return [r for r in rows if r % 2 == 0]

def allowed_odd_rows(start_row, end_row, rows_total, min_row=6, cut_last_two=True):
    rows = allowed_rows_any(start_row, end_row, rows_total, min_row, cut_last_two)
    return [r for r in rows if r % 2 == 1]

# —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–æ –±–æ–∫–∞–º/–ø—Ä–æ–π–º–µ –∏ —Ç.–ø.) ‚Äî –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
def sym_increases(total_add, start_row, end_row, rows_total, label):
    if total_add <= 0: return []
    if total_add % 2: total_add += 1
    # —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª—é–±—ã–µ —Ä—è–¥—ã (–∞ —Ñ–∞–∫—Ç —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ—Ç–æ–º –ø–æ–ø—Ä–∞–≤–∏—Ç fix_carriage_side)
    rows = allowed_rows_any(max(6,start_row), end_row, rows_total)
    if not rows: return []
    per_side = total_add // 2
    steps = min(len(rows), per_side)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]
    parts = split_total_into_steps(per_side, steps)
    out=[]
    for r,v in zip(chosen,parts):
        out.append((r, f"+{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"+{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

def sym_decreases(total_sub, start_row, end_row, rows_total, label):
    if total_sub <= 0: return []
    if total_sub % 2: total_sub += 1
    rows = allowed_rows_any(max(6,start_row), end_row, rows_total)
    if not rows: return []
    per_side = total_sub // 2
    steps = min(len(rows), per_side)
    idxs  = np.linspace(0, len(rows)-1, num=steps, dtype=int)
    chosen= [rows[i] for i in idxs]
    parts = split_total_into_steps(per_side, steps)
    out=[]
    for r,v in zip(chosen,parts):
        out.append((r, f"-{v} –ø. {label} (—Å–ø—Ä–∞–≤–∞)"))
        out.append((r, f"-{v} –ø. {label} (—Å–ª–µ–≤–∞)"))
    return out

# -----------------------------
# –ü—Ä–æ–π–º–∞ (—Å–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è, 3 –∑–æ–Ω—ã)
# -----------------------------
def calc_round_armhole(st_chest, st_shoulders, start_row, shoulder_start_row, rows_total,
                       depth_percent=0.05, hold_percent=0.10):
    if shoulder_start_row <= start_row: return []
    end_row = shoulder_start_row - 1
    total_rows = end_row - start_row + 1
    if total_rows <= 0: return []

    depth_armhole_st = int(round(st_chest * depth_percent))
    st_mid = st_chest - depth_armhole_st

    rows_smooth = int(round(total_rows * 0.40))
    rows_hold   = int(round(total_rows * hold_percent))
    if rows_smooth + rows_hold > total_rows:
        rows_smooth = max(0, total_rows - rows_hold)
    rows_rest = max(0, total_rows - rows_smooth - rows_hold)

    actions=[]

    # 1) –≤–Ω—É—Ç—Ä—å
    delta1 = st_mid - st_chest
    if delta1 < 0:
        actions += sym_decreases(-delta1, start_row, start_row+rows_smooth-1, rows_total, "–ø—Ä–æ–π–º–∞")
    # 2) –ø—Ä—è–º–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º
    # 3) –Ω–∞—Ä—É–∂—É
    delta2 = st_shoulders - st_mid
    if delta2 > 0:
        actions += sym_increases(delta2, start_row+rows_smooth+rows_hold, end_row, rows_total, "–ø—Ä–æ–π–º–∞")

    return actions

# -----------------------------
# –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫—Ä—É–≥–ª–∞—è)
# -----------------------------
def plan_neck_and_shoulders_split(neck_st, neck_rows, neck_start_row,
                                  st_shldr, rows_slope, rows_total,
                                  straight_percent=0.20):
    """
    –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–∏ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º:
      - 1-–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã: –¢–û–õ–¨–ö–û –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–±–µ–∑ –ø–ª–µ—á–∞);
      - –≤–µ—Ä—Ö–Ω–∏–µ straight_percent –≥–ª—É–±–∏–Ω—ã –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî –ø—Ä—è–º–æ;
      - –õ–ï–í–û–ï –ø–ª–µ—á–æ: –ø–ª–µ—á–æ –≤ –Ω–µ—á—ë—Ç–Ω—ã—Ö, –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –≤ —á—ë—Ç–Ω—ã—Ö;
        –ü–†–ê–í–û–ï –ø–ª–µ—á–æ: –ø–ª–µ—á–æ –≤ —á—ë—Ç–Ω—ã—Ö, –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ –≤ –Ω–µ—á—ë—Ç–Ω—ã—Ö;
      - –ø–ª–µ—á–æ —É—Ö–æ–¥–∏—Ç –≤ –Ω–æ–ª—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–∞–±–æ—á–µ–º —Ä—è–¥—É (rows_total-1).
    """
    actions = []

    if neck_st <= 0 or neck_rows <= 0 or st_shldr <= 0: 
        return actions

    # 1) —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (60%, —á—ë—Ç–Ω–æ–µ)
    first_dec = int(round(neck_st * 0.60))
    if first_dec % 2: first_dec += 1
    if first_dec > neck_st: first_dec = neck_st - (neck_st % 2)
    rest = max(0, neck_st - first_dec)

    # –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–ª–æ–≤–∏–Ω—ã
    straight_rows = max(2, int(round(neck_rows * straight_percent)))
    neck_last_dec_row = min(neck_start_row + neck_rows - 1 - straight_rows, rows_total - 2)
    if neck_last_dec_row < neck_start_row: neck_last_dec_row = neck_start_row

    # 1-–π —Ä—è–¥ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã ‚Äî —Ç–æ–ª—å–∫–æ –≥–æ—Ä–ª–æ
    central_row = max(6, min(neck_start_row, rows_total-2))
    actions.append((central_row, f"-{first_dec} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Ü–µ–Ω—Ç—Ä, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))

    # –°–∫–æ–ª—å–∫–æ –ø–µ—Ç–µ–ª—å –Ω–∞ –∫–∞–∂–¥–æ–º –ø–ª–µ—á–µ –ø—Ä—è–º–æ –ü–û–°–õ–ï —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è (–µ—â—ë –¥–æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —É–±–∞–≤–æ–∫ –≥–æ—Ä–ª–∞):
    remain_neck = neck_st - first_dec
    left_after_split  = st_shldr + remain_neck//2
    right_after_split = st_shldr + (remain_neck - remain_neck//2)
    # –≤—Å—Ç–∞–≤–∏–º —Å–ª—É–∂–µ–±–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Ç–æ–º —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ)
    actions.append((central_row, f"[SPLIT_INFO] –õ–µ–≤–æ–µ –ø–ª–µ—á–æ: {left_after_split} –ø., –ü—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ: {right_after_split} –ø."))

    # 2) –û—Å—Ç–∞–ª—å–Ω–æ–µ –≥–æ—Ä–ª–æ ‚Äî —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —á—ë—Ç/–Ω–µ—á—ë—Ç, —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–µ—á–∞–º
    if rest > 0 and neck_last_dec_row > central_row:
        left_rows_for_neck  = allowed_even_rows(central_row+1, neck_last_dec_row, rows_total)  # –ª–µ–≤–æ–µ –≥–æ—Ä–ª–æ ‚Äî —á—ë—Ç–Ω—ã–µ
        right_rows_for_neck = allowed_odd_rows (central_row+1, neck_last_dec_row, rows_total)  # –ø—Ä–∞–≤–æ–µ –≥–æ—Ä–ª–æ ‚Äî –Ω–µ—á—ë—Ç–Ω—ã–µ

        # —á–µ—Ä–µ–¥—É–µ–º —É–±–∞–≤–∫–∏ –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏
        seq = []
        li, ri = 0, 0
        while len(seq) < rest and (li < len(left_rows_for_neck) or ri < len(right_rows_for_neck)):
            if li < len(left_rows_for_neck):
                seq.append( ("L", left_rows_for_neck[li]) ); li += 1
            if len(seq) >= rest: break
            if ri < len(right_rows_for_neck):
                seq.append( ("R", right_rows_for_neck[ri]) ); ri += 1

        for side, row in seq:
            if side == "L":
                actions.append((row, "-1 –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ [L]"))
            else:
                actions.append((row, "-1 –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ [R]"))

    # 3) –°–∫–æ—Å –ø–ª–µ—á–∞ ‚Äî —É—Ö–æ–¥–∏—Ç –≤ –Ω–æ–ª—å –∫ rows_total-1.
    shoulder_start_row = rows_total - rows_slope + 1
    last_action_row    = rows_total - 1

    # –õ–ï–í–û–ï –ø–ª–µ—á–æ: –Ω–µ—á—ë—Ç–Ω—ã–µ
    left_rows_sh = allowed_odd_rows(shoulder_start_row, last_action_row, rows_total)
    # –ü–†–ê–í–û–ï –ø–ª–µ—á–æ: —á—ë—Ç–Ω—ã–µ
    right_rows_sh = allowed_even_rows(shoulder_start_row, last_action_row, rows_total)

    # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º –≤–µ—Å—å –æ–±—ä—ë–º –ø–ª–µ—á–∞ (—Å—Ç–µ–∂–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ –ø–ª–µ—á–æ) –ø–æ –µ–≥–æ —Ä—è–¥–∞–º
    parts_left  = split_total_into_steps(st_shldr, max(1, len(left_rows_sh)))
    parts_right = split_total_into_steps(st_shldr, max(1, len(right_rows_sh)))

    # –í–ê–ñ–ù–û: –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≥–æ—Ä–ª–∞ (central_row) ‚Äî –±–µ–∑ –ø–ª–µ—á–µ–≤—ã—Ö —É–±–∞–≤–æ–∫. –ú—ã —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ–º –ø–ª–µ—á–æ —Å shoulder_start_row, —Ç–∞–∫ —á—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –Ω–µ—Ç.
    for r, v in zip(left_rows_sh, parts_left):
        actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ [L]"))
    for r, v in zip(right_rows_sh, parts_right):
        actions.append((r, f"-{v} –ø. —Å–∫–æ—Å –ø–ª–µ—á–∞ [R]"))

    return actions

# -----------------------------
# –°–ª–∏—è–Ω–∏–µ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ) ‚Äî —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏, —Ä–∞–∑–≤–æ–¥–∏–º ¬´–≥–æ—Ä–ª–æ+–ø–ª–µ—á–æ¬ª –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–æ–≤–ø–∞–ª–∏
# -----------------------------
def merge_actions(actions, rows_total):
    grouped = defaultdict(list)
    for row, note in actions:
        if isinstance(row, int) and 1 <= row <= rows_total:
            grouped[row].append(note)

    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º
    for r in grouped:
        seen=set(); uniq=[]
        for n in grouped[r]:
            if n not in seen:
                uniq.append(n); seen.add(n)
        grouped[r]=uniq

    # –∑–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ—Ä–ª–æ+–ø–ª–µ—á–æ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É, –∫—Ä–æ–º–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ (–≥–¥–µ –º—ã –∏ —Ç–∞–∫ –Ω–µ —Å—Ç–∞–≤–∏–º –ø–ª–µ—á–æ)
    out=[]
    for r in sorted(grouped):
        notes = grouped[r]
        neck = [n for n in notes if "–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n.lower()]
        sh   = [n for n in notes if "—Å–∫–æ—Å –ø–ª–µ—á–∞" in n.lower()]
        other= [n for n in notes if n not in neck and n not in sh]
        if neck and sh:
            # –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ø–ª–µ—á–æ –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä—è–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –µ–≥–æ [L]/[R] –∏ —á—ë—Ç–Ω–æ—Å—Ç–∏
            for n in neck: out.append((r,n))
            for n in other: out.append((r,n))
            for s in sh:
                is_left  = "[l]" in s.lower()
                is_right = "[r]" in s.lower()
                target = r
                # –ø–æ–¥–≤–∏–Ω–µ–º –Ω–∞ +1 —Ä—è–¥ –Ω—É–∂–Ω–æ–π —á—ë—Ç–Ω–æ—Å—Ç–∏
                if is_left:
                    target = r+1 if (r+1)%2==1 else r+2
                elif is_right:
                    target = r+1 if (r+1)%2==0 else r+2
                # –Ω–µ –∑–∞–ª–µ–∑–∞—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ä—è–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                if target >= rows_total: target = rows_total-1
                out.append((target, s))
        else:
            for n in notes: out.append((r,n))
    # –µ—â—ë —Ä–∞–∑ —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å–∫–ª–µ–∏–º
    merged=defaultdict(list)
    for r,n in out: merged[r].append(n)
    result=[]
    for r in sorted(merged):
        result.append((r, "; ".join(merged[r])))
    return result

# -----------------------------
# –£—á—ë—Ç —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏
# -----------------------------
def fix_carriage_side(actions, method=None):
    if method is None:
        method = st.session_state.get("method","–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)")
    use_std = method.startswith("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
    fixed=[]
    for r, note in actions:
        nl = note.lower()
        # —Ä—è–¥—ã: –Ω–µ—á—ë—Ç–Ω—ã–π ‚Äî –∫–∞—Ä–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞; —á—ë—Ç–Ω—ã–π ‚Äî —Å–ª–µ–≤–∞
        correct_side = ("—Å–ø—Ä–∞–≤–∞" if r%2==1 else "—Å–ª–µ–≤–∞") if use_std else ("—Å–ª–µ–≤–∞" if r%2==1 else "—Å–ø—Ä–∞–≤–∞")
        if (("—Å–ø—Ä–∞–≤–∞" in nl) or ("—Å–ª–µ–≤–∞" in nl)) and (correct_side not in nl):
            new_r = r-1 if r>1 else r+1
            fixed.append((new_r, note))
        else:
            fixed.append((r, note))
    return fixed

# -----------------------------
# –°–µ–≥–º–µ–Ω—Ç—ã
# -----------------------------
def tag_segment(row, rows_to_armhole_end, neck_start_row, shoulder_start_row):
    tags=[]
    if row <= rows_to_armhole_end: tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
    if rows_to_armhole_end < row < shoulder_start_row: tags.append("–ü—Ä–æ–π–º–∞")
    if neck_start_row and row >= neck_start_row: tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if shoulder_start_row and row >= shoulder_start_row: tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return " + ".join(tags) if tags else "‚Äî"

# -----------------------------
# –¢–∞–±–ª–∏—Ü—ã (–æ–±—â–∞—è + —Ñ—Ä–æ–Ω—Ç/–±—ç–∫ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º)
# -----------------------------
def make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    merged = defaultdict(list)
    for r,n in actions:
        if 1<=r<=rows_count: merged[r].append(n)
    rows_sorted = sorted(merged)
    table=[]
    prev=1
    if not rows_sorted:
        table.append((f"1-{rows_count}", "–ü—Ä—è–º–æ", tag_segment(1,rows_to_armhole_end,neck_start_row,shoulder_start_row)))
    else:
        for r in rows_sorted:
            if r>prev:
                seg = tag_segment(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
                table.append((str(prev) if prev==r-1 else f"{prev}-{r-1}", "–ü—Ä—è–º–æ", seg))
            table.append((str(r), "; ".join(merged[r]),
                          tag_segment(r, rows_to_armhole_end, neck_start_row, shoulder_start_row)))
            prev=r+1
        if prev<=rows_count:
            seg = tag_segment(prev, rows_to_armhole_end, neck_start_row, shoulder_start_row)
            table.append((str(prev) if prev==rows_count else f"{prev}-{rows_count}", "–ü—Ä—è–º–æ", seg))
    df = pd.DataFrame(table, columns=["–†—è–¥—ã","–î–µ–π—Å—Ç–≤–∏—è","–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)
    if key: st.session_state[key]=table

def _make_table_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None, title_left="‚Äî –õ–ï–í–û–ï –ü–õ–ï–ß–û ‚Äî", title_right="‚Äî –ü–†–ê–í–û–ï –ü–õ–ï–ß–û ‚Äî"):
    merged = defaultdict(list)
    for r,n in actions:
        if 1<=r<=rows_count: merged[r].append(n)
    if not merged:
        make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=key)
        return
    # –ø–æ–∏—â–µ–º split
    rows_sorted = sorted(merged)
    split_row=None
    for r in rows_sorted:
        if any("—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏" in n.lower() for n in merged[r]):
            split_row=r; break
    if split_row is None:
        make_table_full(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=key)
        return
    def clean(text): return text.replace("[L]","").replace("[R]","").strip()
    def push_plain(tbl,a,b):
        if a>b: return
        seg = tag_segment(a, rows_to_armhole_end, neck_start_row, shoulder_start_row)
        tbl.append((str(a) if a==b else f"{a}-{b}", "–ü—Ä—è–º–æ", seg))

    table=[]
    # 1) –¥–æ split
    prev=1
    for r in [x for x in rows_sorted if x<split_row]:
        if r>prev: push_plain(table, prev, r-1)
        table.append((str(r), "; ".join(clean(n) for n in merged[r]), tag_segment(r,rows_to_armhole_end,neck_start_row,shoulder_start_row)))
        prev=r+1
    if prev<=split_row-1: push_plain(table, prev, split_row-1)
    # —Å–∞–º split ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ä–ª–æ–≤–∏–Ω—É –∏ –∏–Ω—Ñ–æ
    split_notes=[n for n in merged[split_row] if ("–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in n.lower()) or ("[split_info]" in n.lower())]
    if split_notes:
        table.append((str(split_row), "; ".join(clean(n) for n in split_notes),
                      tag_segment(split_row,rows_to_armhole_end,neck_start_row,shoulder_start_row)))
    # 2) –ª–µ–≤–æ–µ –ø–ª–µ—á–æ
    table.append((title_left, "", ""))
    left_rows=[]; prev=split_row+1
    for r in [x for x in rows_sorted if x>split_row]:
        notes=[]
        for n in merged[r]:
            ln=n.lower()
            if ("—Å–∫–æ—Å –ø–ª–µ—á–∞" in ln and "[l]" in ln) or ("–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in ln and "[r]" not in ln):
                notes.append(n)
        if notes: left_rows.append((r,notes))
    for r,notes in left_rows:
        if r>prev: push_plain(table, prev, r-1)
        table.append((str(r), "; ".join(clean(n) for n in notes), tag_segment(r,rows_to_armhole_end,neck_start_row,shoulder_start_row)))
        prev=r+1
    if prev<=rows_count: push_plain(table, prev, rows_count)
    # 3) –ø—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ (—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –∫ split)
    table.append((f"{title_right} (–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ä—è–¥—É {split_row})", "", ""))
    prev=split_row
    right_rows=[]
    cand=[split_row]+[x for x in rows_sorted if x>split_row]
    for r in cand:
        notes=[]
        for n in merged.get(r,[]):
            ln=n.lower()
            if ("—Å–∫–æ—Å –ø–ª–µ—á–∞" in ln and "[r]" in ln) or ("–≥–æ—Ä–ª–æ–≤–∏–Ω–∞" in ln and "[l]" not in ln):
                notes.append(n)
        if r==split_row and any("—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏" in n.lower() for n in merged[split_row]):
            notes.append("‚Ü≥ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∞–≤–æ–º—É –ø–ª–µ—á—É")
        if notes: right_rows.append((r,notes))
    for r,notes in right_rows:
        if r>prev: push_plain(table, prev, r-1)
        table.append((str(r), "; ".join(clean(n) for n in notes), tag_segment(r,rows_to_armhole_end,neck_start_row,shoulder_start_row)))
        prev=r+1
    if prev<=rows_count: push_plain(table, prev, rows_count)

    df=pd.DataFrame(table, columns=["–†—è–¥—ã","–î–µ–π—Å—Ç–≤–∏—è","–°–µ–≥–º–µ–Ω—Ç"])
    st.dataframe(df, use_container_width=True, hide_index=True)
    if key: st.session_state[key]=table

def make_table_front_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    _make_table_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key, "‚Äî –õ–ï–í–û–ï –ü–õ–ï–ß–û ‚Äî", "‚Äî –ü–†–ê–í–û–ï –ü–õ–ï–ß–û ‚Äî")

def make_table_back_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key=None):
    _make_table_split(actions, rows_count, rows_to_armhole_end, neck_start_row, shoulder_start_row, key, "‚Äî –õ–ï–í–û–ï –ü–õ–ï–ß–û ‚Äî", "‚Äî –ü–†–ê–í–û–ï –ü–õ–ï–ß–û ‚Äî")

# -----------------------------
# –í–≤–æ–¥
# -----------------------------
st.header("–ü–µ—Ä–µ–¥ / –°–ø–∏–Ω–∫–∞")
density_st_str   = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –ø–µ—Ç–ª–∏ –≤ 10 —Å–º", placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")
density_row_str  = st.text_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: —Ä—è–¥—ã –≤ 10 —Å–º",  placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")
hip_cm_str       = st.text_input("–®–∏—Ä–∏–Ω–∞ –Ω–∏–∑–∞ –¥–µ—Ç–∞–ª–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
chest_cm_str     = st.text_input("–®–∏—Ä–∏–Ω–∞ –¥–µ—Ç–∞–ª–∏ –ø–æ –≥—Ä—É–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
length_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")
armhole_depth_cm_str   = st.text_input("–î–ª–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")
neck_width_cm_str      = st.text_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É")
neck_depth_cm_str      = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–µ—Ä–µ–¥–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")
neck_depth_back_cm_str = st.text_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã —Å–ø–∏–Ω–∫–∏ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É")
shoulder_len_cm_str    = st.text_input("–î–ª–∏–Ω–∞ –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É")
shoulder_slope_cm_str  = st.text_input("–°–∫–æ—Å –ø–ª–µ—á–∞ (—Å–º)", placeholder="–≤–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É")

method = st.selectbox(
    "–ú–µ—Ç–æ–¥ —É–±–∞–≤–æ–∫",
    ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä–µ—Ç–∫–∏)", "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ (–ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ —Ä—è–¥—ã)"],
    index=0
)

def parse_inputs():
    return (
        float(density_st_str.replace(",", ".")),
        float(density_row_str.replace(",", ".")),
        float(hip_cm_str.replace(",", ".")),
        float(chest_cm_str.replace(",", ".")),
        float(length_cm_str.replace(",", ".")),
        float(armhole_depth_cm_str.replace(",", ".")),
        float(neck_width_cm_str.replace(",", ".")),
        float(neck_depth_cm_str.replace(",", ".")),
        float(neck_depth_back_cm_str.replace(",", ".")),
        float(shoulder_len_cm_str.replace(",", ".")),
        float(shoulder_slope_cm_str.replace(",", "."))
    )

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª
# -----------------------------
if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    inputs = [density_st_str, density_row_str, hip_cm_str, chest_cm_str, length_cm_str,
              armhole_depth_cm_str, neck_width_cm_str, neck_depth_cm_str, neck_depth_back_cm_str,
              shoulder_len_cm_str, shoulder_slope_cm_str]
    if not all(inputs):
        st.error("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º")
        st.stop()
    try:
        (density_st, density_row, hip_cm, chest_cm, length_cm,
         armhole_depth_cm, neck_width_cm, neck_depth_cm, neck_depth_back_cm,
         shoulder_len_cm, shoulder_slope_cm) = parse_inputs()
    except:
        st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π)")
        st.stop()

    # –ü–µ—Ä–µ—Å—á—ë—Ç—ã
    st_hip     = cm_to_st(hip_cm, density_st)
    if st_hip % 2: st_hip += 1  # —á—ë—Ç–Ω—ã–π –Ω–∞–±–æ—Ä
    st_chest   = cm_to_st(chest_cm, density_st)
    rows_total = cm_to_rows(length_cm, density_row)
    rows_armh  = cm_to_rows(armhole_depth_cm, density_row)

    neck_st    = cm_to_st(neck_width_cm, density_st)
    neck_rows_front  = cm_to_rows(neck_depth_cm, density_row)
    neck_rows_back   = cm_to_rows(neck_depth_back_cm, density_row)

    st_shldr   = cm_to_st(shoulder_len_cm, density_st)  # –Ω–∞ –æ–¥–Ω–æ –ø–ª–µ—á–æ
    rows_slope = cm_to_rows(shoulder_slope_cm, density_row)

    st_shoulders = 2*st_shldr + neck_st
    rows_bottom  = rows_total - rows_armh - rows_slope
    if rows_bottom < 0: rows_bottom = 0

    armhole_start_row   = rows_bottom + 1
    shoulder_start_row  = rows_total - rows_slope + 1
    armhole_end_row     = shoulder_start_row - 1
    rows_to_armhole_end = rows_bottom
    last_action_row     = rows_total - 1

    neck_start_row_front = rows_total - neck_rows_front + 1
    neck_start_row_back  = rows_total - neck_rows_back + 1

    # -----------------------------
    # –°–≤–æ–¥–∫–∞
    # -----------------------------
    st.subheader("üìä –°–≤–æ–¥–∫–∞")
    st.write(f"- –ù–∞–±—Ä–∞—Ç—å –ø–µ—Ç–µ–ª—å: **{st_hip}**")
    st.write(f"- –í—Å–µ–≥–æ —Ä—è–¥–æ–≤: **{rows_total}**")

    # -----------------------------
    # –ü–ï–†–ï–î
    # -----------------------------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞")
    actions = []

    # –ù–∏–∑: –Ω–µ —Ä–∞–Ω—å—à–µ 6-–≥–æ —Ä—è–¥–∞
    delta_bottom = st_chest - st_hip
    if delta_bottom > 0:
        actions += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
    elif delta_bottom < 0:
        actions += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")

    # –ü—Ä–æ–π–º–∞
    actions += calc_round_armhole(st_chest, st_shoulders, armhole_start_row, shoulder_start_row, rows_total)

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–∏
    actions += plan_neck_and_shoulders_split(
        neck_st=neck_st,
        neck_rows=neck_rows_front,
        neck_start_row=neck_start_row_front,
        st_shldr=st_shldr,
        rows_slope=rows_slope,
        rows_total=rows_total,
        straight_percent=0.20
    )

    actions = merge_actions(actions, rows_total)
    actions = fix_carriage_side(actions, method)

    make_table_front_split(actions, rows_total, rows_bottom, neck_start_row_front, shoulder_start_row, key="table_front")

    # -----------------------------
    # –°–ü–ò–ù–ö–ê
    # -----------------------------
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–∫–∏")
    actions_back = []

    # –ù–∏–∑
    delta_bottom = st_chest - st_hip
    if delta_bottom > 0:
        actions_back += sym_increases(delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")
    elif delta_bottom < 0:
        actions_back += sym_decreases(-delta_bottom, 6, rows_bottom, rows_total, "–±–æ–∫")

    # –ü—Ä–æ–π–º–∞ (–∫–∞–∫ –Ω–∞ –ø–µ—Ä–µ–¥–µ)
    actions_back += calc_round_armhole(st_chest, st_shoulders, armhole_start_row, shoulder_start_row, rows_total)

    # –ì–æ—Ä–ª–æ–≤–∏–Ω–∞ + –ø–ª–µ—á–∏ (—Å–ø–∏–Ω–∫–∞)
    actions_back += plan_neck_and_shoulders_split(
        neck_st=neck_st,
        neck_rows=neck_rows_back,
        neck_start_row=neck_start_row_back,
        st_shldr=st_shldr,
        rows_slope=rows_slope,
        rows_total=rows_total,
        straight_percent=0.20
    )

    actions_back = merge_actions(actions_back, rows_total)
    actions_back = fix_carriage_side(actions_back, method)

    make_table_back_split(actions_back, rows_total, rows_bottom, neck_start_row_back, shoulder_start_row, key="table_back")

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è PDF (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    st.session_state.actions = actions
    st.session_state.actions_back = actions_back
    st.session_state.st_hip = st_hip
    st.session_state.rows_total = rows_total
    st.session_state.rows_bottom = rows_bottom
