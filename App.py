import streamlit as st
import numpy as np
import pandas as pd
from collections import defaultdict

st.title("üß∂ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—è–∑–∞–Ω–∏–µ ‚Äî –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã–∫—Ä–æ–µ–∫")

# -----------------------------
# –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã
# -----------------------------
def cm_to_st(cm, dens_st):   
    return int(round((cm/10.0)*dens_st))

def cm_to_rows(cm, dens_row):
    return int(round((cm/10.0)*dens_row))

def to_even(row: int) -> int:
    """–°–¥–≤–∏–≥–∞–µ–º —Ä—è–¥ –¥–æ —á—ë—Ç–Ω–æ–≥–æ, –º–∏–Ω–∏–º—É–º 6-–≥–æ."""
    row = max(6, row)
    return row if row % 2 == 0 else row + 1

def allowed_even_rows(start_row: int, end_row: int, rows_total: int):
    """
    –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á—ë—Ç–Ω—ã–µ —Ä—è–¥—ã:
    - –Ω–µ —Ä–∞–Ω—å—à–µ 6,
    - –Ω–µ –ø–æ–∑–∂–µ end_row,
    - –Ω–µ –ø–æ–∑–∂–µ rows_total-2.
    """
    high = min(end_row, rows_total - 2)
    if high < 6:
        return []
    start = to_even(start_row)
    high = high if high % 2 == 0 else high - 1
    return list(range(start, high + 1, 2)) if start <= high else []

def split_total_into_steps(total: int, steps: int):
    """–î–µ–ª–∏–º total –Ω–∞ steps –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π (—Å—É–º–º–∞ = total)."""
    if total <= 0:
        return []
    steps = max(1, min(steps, total))
    base = total // steps
    rem = total % steps
    parts = [base] * steps
    for i in range(rem):
        parts[i] += 1
    return parts

# -----------------------------
# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π
# -----------------------------
def sym_increases(total_add: int, desired_steps: int, start_row: int, end_row: int, rows_total: int, label: str):
    """–°–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ –ø—Ä–∏–±–∞–≤–∫–∏ (—Å–ª–µ–≤–∞+—Å–ø—Ä–∞–≤–∞)."""
    if total_add <= 0:
        return []
    if total_add % 2 == 1:
        total_add += 1
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows:
        return []
    steps = min(desired_steps, len(rows))
    per_side_total = total_add // 2
    parts = split_total_into_steps(per_side_total, steps)
    idxs = np.linspace(0, len(rows) - 1, num=steps, dtype=int)
    chosen = [rows[i] for i in idxs]
    return [(r, f"+{v} –ø. {label} —Å–ª–µ–≤–∞ –∏ +{v} –ø. {label} —Å–ø—Ä–∞–≤–∞") for r, v in zip(chosen, parts)]

def solo_decreases(total_dec: int, desired_steps: int, start_row: int, end_row: int, rows_total: int, label: str):
    """–ù–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ —É–±–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–ª–µ—á–æ)."""
    if total_dec <= 0:
        return []
    rows = allowed_even_rows(start_row, end_row, rows_total)
    if not rows:
        return []
    steps = min(desired_steps, len(rows))
    parts = split_total_into_steps(total_dec, steps)
    idxs = np.linspace(0, len(rows) - 1, num=steps, dtype=int)
    chosen = [rows[i] for i in idxs]
    return [(r, f"-{v} –ø. {label}") for r, v in zip(chosen, parts)]

def calc_round_neckline(total_stitches: int, total_rows: int, start_row: int, rows_total: int):
    """–ì–æ—Ä–ª–æ–≤–∏–Ω–∞: 60% —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ —à–∞–≥–∞–º. –®–∞–≥–∏ —É–∫—Ä—É–ø–Ω—è—é—Ç—Å—è –µ—Å–ª–∏ –º–∞–ª–æ —Ä—è–¥–æ–≤."""
    if total_stitches <= 0 or total_rows <= 0:
        return []
    parts = [int(round(total_stitches * p / 100)) for p in [60, 20, 10, 5, 5]]
    diff = total_stitches - sum(parts)
    if diff != 0:
        parts[0] += diff
    rows = allowed_even_rows(start_row, start_row + total_rows - 1, rows_total)
    if not rows:
        return []
    actions = []
    # –ø–µ—Ä–≤—ã–π —à–∞–≥ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)
    if parts[0] > 0:
        actions.append((rows[0], f"-{parts[0]} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (—Å–µ—Ä–µ–¥–∏–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ—á–∏)"))
    # –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
    rest_total = sum(parts[1:])
    if rest_total > 0 and len(rows) > 1:
        steps = min(len(rows) - 1, rest_total)
        rest_parts = split_total_into_steps(rest_total, steps)
        idxs = np.linspace(1, len(rows) - 1, num=steps, dtype=int)
        chosen = [rows[i] for i in idxs]
        for r, v in zip(chosen, rest_parts):
            actions.append((r, f"-{v} –ø. –≥–æ—Ä–ª–æ–≤–∏–Ω–∞ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ –æ—Ç–¥–µ–ª—å–Ω–æ)"))
    return actions

def slope_shoulder(total_stitches: int, start_row: int, end_row: int, rows_total: int, steps: int = 3):
    """–°–∫–æ—Å –ø–ª–µ—á–∞ —Å —É–∫—Ä—É–ø–Ω–µ–Ω–∏–µ–º —à–∞–≥–∞."""
    return solo_decreases(total_stitches, steps, start_row, end_row, rows_total, "–ø–ª–µ—á–æ (–∫–∞–∂–¥–æ–µ –ø–ª–µ—á–æ)")

def section_label(row, rows_to_armhole_end, armhole_start_row, armhole_end_row, neck_start_row, shoulder_start_row):
    tags = []
    if row <= rows_to_armhole_end:
        tags.append("–ù–∏–∑ –∏–∑–¥–µ–ª–∏—è")
    if armhole_start_row <= row <= armhole_end_row:
        tags.append("–ü—Ä–æ–π–º–∞")
    if row >= neck_start_row:
        tags.append("–ì–æ—Ä–ª–æ–≤–∏–Ω–∞")
    if row >= shoulder_start_row:
        tags.append("–°–∫–æ—Å –ø–ª–µ—á–∞")
    return ", ".join(tags) if tags else "‚Äî"

def render_table(actions, rows_total, rows_to_armhole_end=None, armhole_start_row=None, armhole_end_row=None, neck_start_row=None, shoulder_start_row=None):
    merged = defaultdict(list)
    for row, note in actions:
        merged[row].append(note)  # —Ä—è–¥—ã —É–∂–µ —á—ë—Ç–Ω—ã–µ (–∫—Ä–æ–º–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è)

    rows_sorted = sorted(merged.keys())
    data = {
        "–†—è–¥": rows_sorted,
        "–î–µ–π—Å—Ç–≤–∏—è": [", ".join(merged[r]) for r in rows_sorted],
    }
    if armhole_start_row is not None:
        data["–°–µ–≥–º–µ–Ω—Ç"] = [
            section_label(r, rows_to_armhole_end, armhole_start_row, armhole_end_row, neck_start_row, shoulder_start_row)
            for r in rows_sorted
        ]
    else:
        data["–°–µ–≥–º–µ–Ω—Ç"] = ["–†—É–∫–∞–≤" if r < rows_total else "–û–∫–∞—Ç (–ø—Ä—è–º–æ–π)" for r in rows_sorted]
    st.dataframe(pd.DataFrame(data), use_container_width=True, hide_index=True)

# -----------------------------
# –í–∫–ª–∞–¥–∫–∏
# -----------------------------
tab1, tab2, tab3 = st.tabs(["–ü–µ—Ä–µ–¥", "–°–ø–∏–Ω–∫–∞", "–†—É–∫–∞–≤"])

# -----------------------------
# –ü–µ—Ä–µ–¥
# -----------------------------
with tab1:
    st.header("–ü–µ—Ä–µ–¥")
    density_st = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–ø–µ—Ç–ª–∏ –≤ 10 —Å–º)", min_value=1, value=23, key="dst1")
    density_row = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (—Ä—è–¥—ã –≤ 10 —Å–º)", min_value=1, value=40, key="drw1")
    chest_cm = st.number_input("–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)", min_value=50, value=90, key="ch1")
    hip_cm   = st.number_input("–û–±—Ö–≤–∞—Ç –Ω–∏–∑–∞ (—Å–º)",   min_value=50, value=80, key="hip1")
    length_cm= st.number_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", min_value=30, value=55, key="len1")
    armhole_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", min_value=10, value=23, key="arm1")
    shoulders_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –ø–æ –ø–ª–µ—á–∞–º (—Å–º)", min_value=20, value=100, key="shw1")
    neck_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=5, value=18, key="nw1")
    neck_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=2, value=6, key="nd1")
    shoulder_len_cm   = st.number_input("–î–ª–∏–Ω–∞ –ø–ª–µ—á–∞ (—Å–º)", min_value=5, value=12, key="sl1")
    shoulder_slope_cm = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (—Å–º)", min_value=1, value=4, key="ss1")

    if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥"):
        st_chest, st_hip, st_sh = cm_to_st(chest_cm, density_st), cm_to_st(hip_cm, density_st), cm_to_st(shoulders_width_cm, density_st)
        rows_total, rows_armhole = cm_to_rows(length_cm, density_row), cm_to_rows(armhole_depth_cm, density_row)
        neck_st, neck_rows = cm_to_st(neck_width_cm, density_st), cm_to_rows(neck_depth_cm, density_row)
        st_shoulder, rows_sh_slope = cm_to_st(shoulder_len_cm, density_st), cm_to_rows(shoulder_slope_cm, density_row)
        rows_to_armhole_end = rows_total - rows_armhole
        shoulder_start_row, neck_start_row = rows_total - rows_sh_slope + 1, rows_total - neck_rows + 1
        armhole_start_row, armhole_end_row = rows_to_armhole_end + 1, min(rows_total, shoulder_start_row - 1)
        actions = []
        if st_chest > st_hip:
            actions += sym_increases(st_chest - st_hip, (st_chest - st_hip)//2, 6, rows_to_armhole_end, rows_total, "–±–æ–∫")
        if st_sh > st_chest:
            actions += sym_increases(st_sh - st_chest, (st_sh - st_chest)//2, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")
        actions += calc_round_neckline(neck_st, neck_rows, neck_start_row, rows_total)
        actions += slope_shoulder(st_shoulder, shoulder_start_row, rows_total, rows_total, steps=3)
        st.subheader("–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω")
        render_table(actions, rows_total, rows_to_armhole_end, armhole_start_row, armhole_end_row, neck_start_row, shoulder_start_row)

# -----------------------------
# –°–ø–∏–Ω–∫–∞
# -----------------------------
with tab2:
    st.header("–°–ø–∏–Ω–∫–∞")
    density_st = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–ø–µ—Ç–ª–∏ –≤ 10 —Å–º)", min_value=1, value=23, key="dst2")
    density_row = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (—Ä—è–¥—ã –≤ 10 —Å–º)", min_value=1, value=40, key="drw2")
    chest_cm = st.number_input("–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)", min_value=50, value=90, key="ch2")
    hip_cm   = st.number_input("–û–±—Ö–≤–∞—Ç –Ω–∏–∑–∞ (—Å–º)",   min_value=50, value=80, key="hip2")
    length_cm= st.number_input("–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (—Å–º)", min_value=30, value=55, key="len2")
    armhole_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–π–º—ã (—Å–º)", min_value=10, value=23, key="arm2")
    shoulders_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –ø–æ –ø–ª–µ—á–∞–º (—Å–º)", min_value=20, value=100, key="shw2")
    neck_width_cm = st.number_input("–®–∏—Ä–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=5, value=18, key="nw2")
    neck_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –≥–æ—Ä–ª–æ–≤–∏–Ω—ã (—Å–º)", min_value=1, value=3, key="nd2")
    shoulder_len_cm   = st.number_input("–î–ª–∏–Ω–∞ –ø–ª–µ—á–∞ (—Å–º)", min_value=5, value=12, key="sl2")
    shoulder_slope_cm = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–∫–æ—Å–∞ –ø–ª–µ—á–∞ (—Å–º)", min_value=1, value=4, key="ss2")

    if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ø–∏–Ω–∫—É"):
        st_chest, st_hip, st_sh = cm_to_st(chest_cm, density_st), cm_to_st(hip_cm, density_st), cm_to_st(shoulders_width_cm, density_st)
        rows_total, rows_armhole = cm_to_rows(length_cm, density_row), cm_to_rows(armhole_depth_cm, density_row)
        neck_st, neck_rows = cm_to_st(neck_width_cm, density_st), cm_to_rows(neck_depth_cm, density_row)
        st_shoulder, rows_sh_slope = cm_to_st(shoulder_len_cm, density_st), cm_to_rows(shoulder_slope_cm, density_row)
        rows_to_armhole_end = rows_total - rows_armhole
        shoulder_start_row, neck_start_row = rows_total - rows_sh_slope + 1, rows_total - neck_rows + 1
        armhole_start_row, armhole_end_row = rows_to_armhole_end + 1, min(rows_total, shoulder_start_row - 1)
        actions = []
        if st_chest > st_hip:
            actions += sym_increases(st_chest - st_hip, (st_chest - st_hip)//2, 6, rows_to_armhole_end, rows_total, "–±–æ–∫")
        if st_sh > st_chest:
            actions += sym_increases(st_sh - st_chest, (st_sh - st_chest)//2, armhole_start_row, armhole_end_row, rows_total, "–ø—Ä–æ–π–º–∞")
        actions += calc_round_neckline(neck_st, neck_rows, neck_start_row, rows_total)
        actions += slope_shoulder(st_shoulder, shoulder_start_row, rows_total, rows_total, steps=3)
        st.subheader("–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω")
        render_table(actions, rows_total, rows_to_armhole_end, armhole_start_row, armhole_end_row, neck_start_row, shoulder_start_row)

# -----------------------------
# –†—É–∫–∞–≤
# -----------------------------
with tab3:
    st.header("–†—É–∫–∞–≤ (–æ–≤–µ—Ä—Å–∞–π–∑, –ø—Ä—è–º–æ–π –æ–∫–∞—Ç)")
    density_st = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–ø–µ—Ç–ª–∏ –≤ 10 —Å–º)", min_value=1, value=23, key="dst3")
    density_row = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (—Ä—è–¥—ã –≤ 10 —Å–º)", min_value=1, value=40, key="drw3")
    length_cm   = st.number_input("–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ (—Å–º)", min_value=20, value=60, key="len_r")
    wrist_cm    = st.number_input("–®–∏—Ä–∏–Ω–∞ –º–∞–Ω–∂–µ—Ç—ã (—Å–º)", min_value=10, value=18, key="wr")
    top_cm      = st.number_input("–®–∏—Ä–∏–Ω–∞ –≤–µ—Ä—Ö–∞ —Ä—É–∫–∞–≤–∞ (—Å–º)", min_value=20, value=36, key="top_r")

    if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä—É–∫–∞–≤"):
        st_wrist, st_top = cm_to_st(wrist_cm, density_st), cm_to_st(top_cm, density_st)
        rows_total = cm_to_rows(length_cm, density_row)
        delta = st_top - st_wrist
        actions = []
        if delta > 0:
            actions += sym_increases(delta, delta//2, 6, rows_total - 1, rows_total, "—Ä—É–∫–∞–≤")
        actions.append((rows_total, "–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–µ—Ç–ª–∏ (–ø—Ä—è–º–æ–π –æ–∫–∞—Ç)"))
        st.subheader("–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω")
        render_table(actions, rows_total)
